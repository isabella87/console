REM Generated at 2019-01-15 09:57:14
REM PRODUCT VERSION: Oracle Database 11g Enterprise Edition  11.2.0.3.0 64bit Production
REM USER: P2P

REM Create common procedures
CREATE OR REPLACE PROCEDURE "DROP_TABLE_IF_EXISTS" (V_TABLE_NAME VARCHAR2) IS
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE ' || V_TABLE_NAME;
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE <> -0942 THEN
      RAISE;
    END IF;
END DROP_TABLE_IF_EXISTS;
/
CREATE OR REPLACE PROCEDURE "DROP_SEQUENCE_IF_EXISTS" (V_SEQUENCE_NAME VARCHAR2) IS
BEGIN
  EXECUTE IMMEDIATE 'DROP SEQUENCE ' || V_SEQUENCE_NAME;
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE <> -2289 THEN
      RAISE;
    END IF;
END DROP_SEQUENCE_IF_EXISTS;
/

REM Drop tables
CALL DROP_TABLE_IF_EXISTS('SHCA_DOC_FILE');
CALL DROP_TABLE_IF_EXISTS('PRJ_GUARANTEE_PERSON');
CALL DROP_TABLE_IF_EXISTS('PRJ_GUARANTEE_ORG');
CALL DROP_TABLE_IF_EXISTS('PRJ_ENT_PROGRESS');
CALL DROP_TABLE_IF_EXISTS('PRJ_ENGINEER');
CALL DROP_TABLE_IF_EXISTS('PRJ_CTOR_ORG');
CALL DROP_TABLE_IF_EXISTS('PRJ_BONUS');
CALL DROP_TABLE_IF_EXISTS('CA_DOC');
CALL DROP_TABLE_IF_EXISTS('TS_VOUCHER');
CALL DROP_TABLE_IF_EXISTS('TS_TENDER');
CALL DROP_TABLE_IF_EXISTS('TS_REPAY_UNFRZ');
CALL DROP_TABLE_IF_EXISTS('TS_REPAY_INTEREST');
CALL DROP_TABLE_IF_EXISTS('TS_REPAY_HISTORY');
CALL DROP_TABLE_IF_EXISTS('TS_REPAY_FRZ');
CALL DROP_TABLE_IF_EXISTS('TS_REPAY');
CALL DROP_TABLE_IF_EXISTS('TS_LOAN_HISTORY');
CALL DROP_TABLE_IF_EXISTS('TS_LOAN');
CALL DROP_TABLE_IF_EXISTS('TS_INVEST');
CALL DROP_TABLE_IF_EXISTS('TS_DETAIL_HISTORY');
CALL DROP_TABLE_IF_EXISTS('TS_DEBT_REGISTER_CANCEL');
CALL DROP_TABLE_IF_EXISTS('TS_DEBT_REGISTER');
CALL DROP_TABLE_IF_EXISTS('TS_CREDIT_END_HISTORY');
CALL DROP_TABLE_IF_EXISTS('TS_CREDIT_END');
CALL DROP_TABLE_IF_EXISTS('TS_CREDIT_ASSIGN');
CALL DROP_TABLE_IF_EXISTS('TS_COLLECTION');
CALL DROP_TABLE_IF_EXISTS('TS_CANCEL_TENDER');
CALL DROP_TABLE_IF_EXISTS('TS_BAIL_ID_MODIFY');
CALL DROP_TABLE_IF_EXISTS('TS_B2C_DETAIL');
CALL DROP_TABLE_IF_EXISTS('TS_AUTO_TENDER_LOG');
CALL DROP_TABLE_IF_EXISTS('TS_AUTO_BID_AUTH');
CALL DROP_TABLE_IF_EXISTS('SYS_ACTION_LOG_KEYWORDS');
CALL DROP_TABLE_IF_EXISTS('SYS_ACTION_LOG');
CALL DROP_TABLE_IF_EXISTS('SHCA_SIGN_USER');
CALL DROP_TABLE_IF_EXISTS('SHCA_DOC_SIGN');
CALL DROP_TABLE_IF_EXISTS('PRJ_REMARKS');
CALL DROP_TABLE_IF_EXISTS('PRJ_RATING');
CALL DROP_TABLE_IF_EXISTS('PRJ_PROGRESS');
CALL DROP_TABLE_IF_EXISTS('PRJ_PERMISSIBLE_INVESTORS');
CALL DROP_TABLE_IF_EXISTS('PRJ_OWNER');
CALL DROP_TABLE_IF_EXISTS('PRJ_MORTGAGE');
CALL DROP_TABLE_IF_EXISTS('PRJ_MGR_PERSON');
CALL DROP_TABLE_IF_EXISTS('PRJ_MGR_ORG');
CALL DROP_TABLE_IF_EXISTS('PRJ_LOAN');
CALL DROP_TABLE_IF_EXISTS('PRJ_INDEX_CONTRACT');
CALL DROP_TABLE_IF_EXISTS('PRJ_INDEX');
CALL DROP_TABLE_IF_EXISTS('PRJ_CREDIT_ASSIGN');
CALL DROP_TABLE_IF_EXISTS('PRJ_BONUS_DETAIL');
CALL DROP_TABLE_IF_EXISTS('PRJ_ACTION');
CALL DROP_TABLE_IF_EXISTS('MY_USER_ROLE');
CALL DROP_TABLE_IF_EXISTS('MY_USER_PROP');
CALL DROP_TABLE_IF_EXISTS('MY_USER');
CALL DROP_TABLE_IF_EXISTS('MY_ROLE_PERM');
CALL DROP_TABLE_IF_EXISTS('MY_ROLE');
CALL DROP_TABLE_IF_EXISTS('MY_DICT');
CALL DROP_TABLE_IF_EXISTS('MSG_CREDIT_ASSIGN');
CALL DROP_TABLE_IF_EXISTS('FS_FILE2');
CALL DROP_TABLE_IF_EXISTS('CRM_MGR_RELATION_PATH');
CALL DROP_TABLE_IF_EXISTS('CRM_MGR_RELATION');
CALL DROP_TABLE_IF_EXISTS('CRM_MGR_REG_USER_RELATION');
CALL DROP_TABLE_IF_EXISTS('CRM_INVESTOR_REMARK');
CALL DROP_TABLE_IF_EXISTS('CRM_INVESTOR_MGR');
CALL DROP_TABLE_IF_EXISTS('CRM_INVESTOR');
CALL DROP_TABLE_IF_EXISTS('CM_NOTICE1');
CALL DROP_TABLE_IF_EXISTS('CM_NOTICE');
CALL DROP_TABLE_IF_EXISTS('CA_SIGN_TOKEN');
CALL DROP_TABLE_IF_EXISTS('CA_DOC_SIGN');
CALL DROP_TABLE_IF_EXISTS('BA_PRJ_MORTGAGE');
CALL DROP_TABLE_IF_EXISTS('BA_PRJ_MGR_PERSON');
CALL DROP_TABLE_IF_EXISTS('BA_PRJ_MGR_ORG');
CALL DROP_TABLE_IF_EXISTS('BA_PRJ_ENGINEER');
CALL DROP_TABLE_IF_EXISTS('BA_OWNER');
CALL DROP_TABLE_IF_EXISTS('BA_GUARANTEE_PERSON');
CALL DROP_TABLE_IF_EXISTS('BA_GUARANTEE_ORG');
CALL DROP_TABLE_IF_EXISTS('BA_CTOR_ORG');
CALL DROP_TABLE_IF_EXISTS('APP_MONTH_SUMMARY');
CALL DROP_TABLE_IF_EXISTS('APP_INFO1');
CALL DROP_TABLE_IF_EXISTS('APP_INFO');
CALL DROP_TABLE_IF_EXISTS('APP_DISCLOSURE_REPORT_DETAIL');
CALL DROP_TABLE_IF_EXISTS('APP_DISCLOSURE_REPORT');
CALL DROP_TABLE_IF_EXISTS('ACC_USER_MONTH_REPORT');
CALL DROP_TABLE_IF_EXISTS('ACC_USER_DAY_STATISTICS');
CALL DROP_TABLE_IF_EXISTS('ACC_USER_DAILY_STATIS_HISTORY');
CALL DROP_TABLE_IF_EXISTS('ACC_SCORE_ORDER');
CALL DROP_TABLE_IF_EXISTS('ACC_SCORE_DETAIL');
CALL DROP_TABLE_IF_EXISTS('ACC_SCORE');
CALL DROP_TABLE_IF_EXISTS('ACC_RUNNING');
CALL DROP_TABLE_IF_EXISTS('ACC_PRIVILEGE_USER');
CALL DROP_TABLE_IF_EXISTS('ACC_INVESTOR_LEVEL_QUESTION');
CALL DROP_TABLE_IF_EXISTS('ACC_INVESTOR_LEVEL_DETAIL');
CALL DROP_TABLE_IF_EXISTS('ACC_INVESTOR_LEVEL');
CALL DROP_TABLE_IF_EXISTS('ACC_FINACIERINFO');
CALL DROP_TABLE_IF_EXISTS('ACC_DAILY_SUMMARY_TENDER2');
CALL DROP_TABLE_IF_EXISTS('ACC_DAILY_SUMMARY_TENDER');
CALL DROP_TABLE_IF_EXISTS('ACC_DAILY_SUMMARY_REPAY_I');
CALL DROP_TABLE_IF_EXISTS('ACC_DAILY_SUMMARY_REPAY');
CALL DROP_TABLE_IF_EXISTS('ACC_DAILY_SUMMARY_REMAIN');
CALL DROP_TABLE_IF_EXISTS('ACC_DAILY_SUMMARY_MANAGER');
CALL DROP_TABLE_IF_EXISTS('ACC_DAILY_SUMMARY_LOAN2');
CALL DROP_TABLE_IF_EXISTS('ACC_DAILY_SUMMARY_LOAN');
CALL DROP_TABLE_IF_EXISTS('ACC_DAILY_SUMMARY_HISTORY');
CALL DROP_TABLE_IF_EXISTS('ACC_DAILY_SUMMARY_CREDIT_OUT');
CALL DROP_TABLE_IF_EXISTS('ACC_DAILY_SUMMARY_CREDIT_IN');
CALL DROP_TABLE_IF_EXISTS('ACC_DAILY_SUMMARY1');
CALL DROP_TABLE_IF_EXISTS('ACC_DAILY_SUMMARY');
CALL DROP_TABLE_IF_EXISTS('ACC_BALANCE');
CALL DROP_TABLE_IF_EXISTS('ACC_AUTO_TENDER_STRATEGY');
CALL DROP_TABLE_IF_EXISTS('ACC_AUTO_TENDER_QUEUE');
/

REM Create user type VARCHAR2_NTT
CREATE OR REPLACE TYPE        "VARCHAR2_NTT" AS TABLE OF VARCHAR2(4000 CHAR);
/

REM Create Table ACC_AUTO_TENDER_QUEUE
CREATE TABLE "ACC_AUTO_TENDER_QUEUE" (
	"AU_ID" NUMBER NOT NULL,
	"IN_DATE" DATE NULL,
	"MATCH_FAILED_COUNT" NUMBER NULL,
	"REMARK" VARCHAR2(200 CHAR) NULL
);
COMMENT ON TABLE "ACC_AUTO_TENDER_QUEUE" IS '自动出借排队表';
REM Column comments ACC_AUTO_TENDER_QUEUE
COMMENT ON COLUMN "ACC_AUTO_TENDER_QUEUE"."AU_ID" IS '用户id';
COMMENT ON COLUMN "ACC_AUTO_TENDER_QUEUE"."IN_DATE" IS '入队时间';
COMMENT ON COLUMN "ACC_AUTO_TENDER_QUEUE"."MATCH_FAILED_COUNT" IS '匹配失败次数';
COMMENT ON COLUMN "ACC_AUTO_TENDER_QUEUE"."REMARK" IS '备注';
REM Primary key ACC_AUTO_TENDER_QUEUE
ALTER TABLE "ACC_AUTO_TENDER_QUEUE" ADD CONSTRAINT "SYS_C0026133" PRIMARY KEY (AU_ID) USING INDEX;
/

REM Create Table ACC_AUTO_TENDER_STRATEGY
CREATE TABLE "ACC_AUTO_TENDER_STRATEGY" (
	"AU_ID" NUMBER NOT NULL,
	"CREATE_TIME" DATE NULL,
	"UPDATE_TIME" DATE NULL,
	"STATUS" NUMBER NULL,
	"MAX_RATE" NUMBER NULL,
	"MIN_RATE" NUMBER NULL,
	"MAX_BORR_DAYS" NUMBER NULL,
	"MIN_BORR_DAYS" NUMBER NULL,
	"PER_INVEST_MAX_AMT" NUMBER NULL,
	"FIXED_BAL" NUMBER NULL,
	"ALLOW_RISK_ASSESS" VARCHAR2(200 CHAR) NULL
);
COMMENT ON TABLE "ACC_AUTO_TENDER_STRATEGY" IS '自动出借策略表';
REM Column comments ACC_AUTO_TENDER_STRATEGY
COMMENT ON COLUMN "ACC_AUTO_TENDER_STRATEGY"."AU_ID" IS '用户id';
COMMENT ON COLUMN "ACC_AUTO_TENDER_STRATEGY"."CREATE_TIME" IS '创建时间';
COMMENT ON COLUMN "ACC_AUTO_TENDER_STRATEGY"."UPDATE_TIME" IS '修改时间';
COMMENT ON COLUMN "ACC_AUTO_TENDER_STRATEGY"."STATUS" IS '状态：0关闭，1开启';
COMMENT ON COLUMN "ACC_AUTO_TENDER_STRATEGY"."MAX_RATE" IS '可接受最大借款利率';
COMMENT ON COLUMN "ACC_AUTO_TENDER_STRATEGY"."MIN_RATE" IS '可接受最小借款利率';
COMMENT ON COLUMN "ACC_AUTO_TENDER_STRATEGY"."MAX_BORR_DAYS" IS '可接受最大借款天数';
COMMENT ON COLUMN "ACC_AUTO_TENDER_STRATEGY"."MIN_BORR_DAYS" IS '可接受最小借款天数';
COMMENT ON COLUMN "ACC_AUTO_TENDER_STRATEGY"."PER_INVEST_MAX_AMT" IS '单笔投资最高限额';
COMMENT ON COLUMN "ACC_AUTO_TENDER_STRATEGY"."FIXED_BAL" IS '账户保留余额';
COMMENT ON COLUMN "ACC_AUTO_TENDER_STRATEGY"."ALLOW_RISK_ASSESS" IS '可接受项目风险评估等级';
REM Primary key ACC_AUTO_TENDER_STRATEGY
ALTER TABLE "ACC_AUTO_TENDER_STRATEGY" ADD CONSTRAINT "SYS_C0026132" PRIMARY KEY (AU_ID) USING INDEX;
/

REM Create Table ACC_BALANCE
CREATE TABLE "ACC_BALANCE" (
	"AU_ID" NUMBER NOT NULL,
	"BALANCE" NUMBER NULL,
	"DATEPOINT" DATE NULL
);
REM Column comments ACC_BALANCE
COMMENT ON COLUMN "ACC_BALANCE"."AU_ID" IS '用户id';
COMMENT ON COLUMN "ACC_BALANCE"."BALANCE" IS '账户余额';
COMMENT ON COLUMN "ACC_BALANCE"."DATEPOINT" IS '截止时间';
REM Primary key ACC_BALANCE
ALTER TABLE "ACC_BALANCE" ADD CONSTRAINT "" PRIMARY KEY () USING INDEX;
/

REM Create Table ACC_DAILY_SUMMARY
CREATE TABLE "ACC_DAILY_SUMMARY" (
	"AU_ID" NUMBER NOT NULL,
	"DATEPOINT" VARCHAR2(8) NOT NULL,
	"TENDER_AMT" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"LOAN_AMT" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"LOAN_INCOME" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"TENDER_AMT2" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"LOAN_AMT2" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"CREDIT_IN_AMT" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"CREDIT_OUT_AMT" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"CREDIT_FEE" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"REPAY_INTEREST_AMT" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"REPAY_INTEREST_FEE" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"REPAY_AMT" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"MANAGER" VARCHAR2(40) NULL,
	"LOAN_INCOME2" NUMBER(18,2) DEFAULT 0 NOT NULL
);
REM Column comments ACC_DAILY_SUMMARY
COMMENT ON COLUMN "ACC_DAILY_SUMMARY"."AU_ID" IS '用户ID';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY"."DATEPOINT" IS '统计日期(YYYYMMDD)';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY"."TENDER_AMT" IS '当日成功投标金额';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY"."LOAN_AMT" IS '当日成功放款金额';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY"."LOAN_INCOME" IS '当日平台收益(sum(每笔成功放款本金 * 该项目年化利差 * 借款天数 / 365))';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY"."TENDER_AMT2" IS '当日成功投标金额(仅新手标)';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY"."LOAN_AMT2" IS '当日成功放款金额(仅新手标)';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY"."CREDIT_IN_AMT" IS '当日成功买入债权本金';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY"."CREDIT_OUT_AMT" IS '当日成功卖出债权本金';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY"."CREDIT_FEE" IS '当日总债权转让手续费';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY"."REPAY_INTEREST_AMT" IS '当日总还息';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY"."REPAY_INTEREST_FEE" IS '当日总还息手续费';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY"."REPAY_AMT" IS '当日总还本';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY"."MANAGER" IS '当日所属客户经理';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY"."LOAN_INCOME2" IS '当日平台收益(仅新手标)(sum(每笔成功放款本金 * 该项目年化利差 * 借款天数 / 365))';
REM Primary key ACC_DAILY_SUMMARY
ALTER TABLE "ACC_DAILY_SUMMARY" ADD CONSTRAINT "ACC_DAILY_SUMMARY_PK" PRIMARY KEY (AU_ID,DATEPOINT) USING INDEX;
/

REM Create Table ACC_DAILY_SUMMARY1
CREATE TABLE "ACC_DAILY_SUMMARY1" (
	"TENDER_AMT" NUMBER(18,2) NOT NULL,
	"TENDER_AMT2" NUMBER(18,2) NOT NULL,
	"CREDIT_IN_AMT" NUMBER(18,2) NOT NULL,
	"CREDIT_OUT_AMT" NUMBER(18,2) NOT NULL,
	"LOAN_INCOME" NUMBER(18,2) NOT NULL,
	"LOAN_INCOME2" NUMBER(18,2) NOT NULL,
	"LOAN_AMT2" NUMBER(18,2) NOT NULL,
	"DATEPOINT" VARCHAR2(8) NOT NULL,
	"REPAY_AMT" NUMBER(18,2) NOT NULL,
	"MANAGER" VARCHAR2(40) NULL,
	"CREDIT_FEE" NUMBER(18,2) NOT NULL,
	"AU_ID" NUMBER NOT NULL,
	"REPAY_INTEREST_AMT" NUMBER(18,2) NOT NULL,
	"REPAY_INTEREST_FEE" NUMBER(18,2) NOT NULL,
	"LOAN_AMT" NUMBER(18,2) NOT NULL
);
REM Column comments ACC_DAILY_SUMMARY1
COMMENT ON COLUMN "ACC_DAILY_SUMMARY1"."TENDER_AMT" IS '当日成功投标金额';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY1"."TENDER_AMT2" IS '当日成功投标金额(仅新手标)';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY1"."CREDIT_IN_AMT" IS '当日成功买入债权本金';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY1"."CREDIT_OUT_AMT" IS '当日成功卖出债权本金';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY1"."LOAN_INCOME" IS '当日平台收益(sum(每笔成功放款本金 * 该项目年化利差 * 借款天数 / 365))';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY1"."LOAN_INCOME2" IS '当日平台收益(仅新手标)(sum(每笔成功放款本金 * 该项目年化利差 * 借款天数 / 365))';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY1"."LOAN_AMT2" IS '当日成功放款金额(仅新手标)';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY1"."DATEPOINT" IS '统计日期(YYYYMMDD)';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY1"."REPAY_AMT" IS '当日总还本';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY1"."MANAGER" IS '当日所属客户经理';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY1"."CREDIT_FEE" IS '当日总债权转让手续费';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY1"."AU_ID" IS '用户ID';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY1"."REPAY_INTEREST_AMT" IS '当日总还息';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY1"."REPAY_INTEREST_FEE" IS '当日总还息手续费';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY1"."LOAN_AMT" IS '当日成功放款金额';
REM Primary key ACC_DAILY_SUMMARY1
ALTER TABLE "ACC_DAILY_SUMMARY1" ADD CONSTRAINT "ACC_DAILY_SUMMARY1_PK" PRIMARY KEY (AU_ID,DATEPOINT) USING INDEX;
/

REM Create Table ACC_DAILY_SUMMARY_CREDIT_IN
CREATE TABLE "ACC_DAILY_SUMMARY_CREDIT_IN" (
	"AU_ID" NUMBER NOT NULL,
	"DATEPOINT" VARCHAR2(8) NOT NULL,
	"CREDIT_IN_AMT" NUMBER(18,2) DEFAULT 0 NOT NULL
);
REM Column comments ACC_DAILY_SUMMARY_CREDIT_IN
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_CREDIT_IN"."AU_ID" IS '用户ID';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_CREDIT_IN"."DATEPOINT" IS '统计日期(YYYYMMDD)';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_CREDIT_IN"."CREDIT_IN_AMT" IS '当日债权买入总金额';
REM Primary key ACC_DAILY_SUMMARY_CREDIT_IN
ALTER TABLE "ACC_DAILY_SUMMARY_CREDIT_IN" ADD CONSTRAINT "ACC_DAILY_SUMMARY_CREDIT_I_PK" PRIMARY KEY (AU_ID,DATEPOINT) USING INDEX;
/

REM Create Table ACC_DAILY_SUMMARY_CREDIT_OUT
CREATE TABLE "ACC_DAILY_SUMMARY_CREDIT_OUT" (
	"AU_ID" NUMBER NOT NULL,
	"DATEPOINT" VARCHAR2(8) NOT NULL,
	"CREDIT_OUT_AMT" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"CREDIT_FEE" NUMBER(18,2) DEFAULT 0 NOT NULL
);
REM Column comments ACC_DAILY_SUMMARY_CREDIT_OUT
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_CREDIT_OUT"."AU_ID" IS '用户ID';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_CREDIT_OUT"."DATEPOINT" IS '统计日期(YYYYMMDD)';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_CREDIT_OUT"."CREDIT_OUT_AMT" IS '当日债权卖出总金额';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_CREDIT_OUT"."CREDIT_FEE" IS '当日债权卖出总手续费';
REM Primary key ACC_DAILY_SUMMARY_CREDIT_OUT
ALTER TABLE "ACC_DAILY_SUMMARY_CREDIT_OUT" ADD CONSTRAINT "ACC_DAILY_SUMMARY_CREDIT_O_PK" PRIMARY KEY (AU_ID,DATEPOINT) USING INDEX;
/

REM Create Table ACC_DAILY_SUMMARY_HISTORY
CREATE TABLE "ACC_DAILY_SUMMARY_HISTORY" (
	"DATEPOINT" VARCHAR2(8) NULL,
	"RETRY_COUNT" NUMBER DEFAULT 0 NULL,
	"RET_CODE" VARCHAR2(80) NULL,
	"RET_MSG" VARCHAR2(80) NULL,
	"TENDER_FLAG" NUMBER DEFAULT 0 NULL,
	"LOAN_FLAG" NUMBER DEFAULT 0 NULL,
	"TENDER_FLAG2" NUMBER DEFAULT 0 NULL,
	"LOAN_FLAG2" NUMBER DEFAULT 0 NULL,
	"CREDIT_IN_FLAG" NUMBER DEFAULT 0 NULL,
	"CREDIT_OUT_FLAG" NUMBER DEFAULT 0 NULL,
	"REPAY_INTEREST_FLAG" NUMBER DEFAULT 0 NULL,
	"REPAY_FLAG" NUMBER DEFAULT 0 NULL,
	"MANAGER_FLAG" NUMBER DEFAULT 0 NULL,
	"REMAIN_FLAG" NUMBER DEFAULT 0 NULL
);
REM Column comments ACC_DAILY_SUMMARY_HISTORY
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_HISTORY"."DATEPOINT" IS '日期';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_HISTORY"."RETRY_COUNT" IS '尝试次数';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_HISTORY"."TENDER_FLAG" IS '成功；0成功 1失败';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_HISTORY"."LOAN_FLAG" IS '成功；0成功 1失败';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_HISTORY"."TENDER_FLAG2" IS '成功；0成功 1失败';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_HISTORY"."LOAN_FLAG2" IS '成功；0成功 1失败';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_HISTORY"."CREDIT_IN_FLAG" IS '成功；0成功 1失败';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_HISTORY"."CREDIT_OUT_FLAG" IS '成功；0成功 1失败';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_HISTORY"."REPAY_INTEREST_FLAG" IS '成功；0成功 1失败';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_HISTORY"."REPAY_FLAG" IS '成功；0成功 1失败';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_HISTORY"."MANAGER_FLAG" IS '成功；0成功 1失败';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_HISTORY"."REMAIN_FLAG" IS '成功；0成功 1失败';
REM Primary key ACC_DAILY_SUMMARY_HISTORY
ALTER TABLE "ACC_DAILY_SUMMARY_HISTORY" ADD CONSTRAINT "" PRIMARY KEY () USING INDEX;
/

REM Create Table ACC_DAILY_SUMMARY_LOAN
CREATE TABLE "ACC_DAILY_SUMMARY_LOAN" (
	"AU_ID" NUMBER NOT NULL,
	"DATEPOINT" VARCHAR2(8) NOT NULL,
	"LOAN_AMT" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"LOAN_INCOME" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"LOAN_AMT2" NUMBER(18,2) DEFAULT 0 NOT NULL
);
REM Column comments ACC_DAILY_SUMMARY_LOAN
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_LOAN"."AU_ID" IS '用户ID';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_LOAN"."DATEPOINT" IS '统计日期(YYYYMMDD)';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_LOAN"."LOAN_AMT" IS '当日成功放款总额';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_LOAN"."LOAN_INCOME" IS '当日平台收入总额';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_LOAN"."LOAN_AMT2" IS '当日成功放款年化总额';
REM Primary key ACC_DAILY_SUMMARY_LOAN
ALTER TABLE "ACC_DAILY_SUMMARY_LOAN" ADD CONSTRAINT "ACC_DAILY_SUMMARY_LOAN_PK" PRIMARY KEY (AU_ID,DATEPOINT) USING INDEX;
/

REM Create Table ACC_DAILY_SUMMARY_LOAN2
CREATE TABLE "ACC_DAILY_SUMMARY_LOAN2" (
	"AU_ID" NUMBER NOT NULL,
	"DATEPOINT" VARCHAR2(8) NOT NULL,
	"LOAN_AMT2" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"LOAN_INCOME2" NUMBER(18,2) DEFAULT 0 NOT NULL
);
REM Column comments ACC_DAILY_SUMMARY_LOAN2
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_LOAN2"."AU_ID" IS '用户ID';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_LOAN2"."DATEPOINT" IS '统计日期(YYYYMMDD)';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_LOAN2"."LOAN_AMT2" IS '当日总放款金额';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_LOAN2"."LOAN_INCOME2" IS '当日平台收益(仅新手标)(sum(每笔成功放款本金 * 该项目年化利差 * 借款天数 / 365))';
REM Primary key ACC_DAILY_SUMMARY_LOAN2
ALTER TABLE "ACC_DAILY_SUMMARY_LOAN2" ADD CONSTRAINT "ACC_DAILY_SUMMARY_LOAN2_PK" PRIMARY KEY (AU_ID,DATEPOINT) USING INDEX;
/

REM Create Table ACC_DAILY_SUMMARY_MANAGER
CREATE TABLE "ACC_DAILY_SUMMARY_MANAGER" (
	"AU_ID" NUMBER NOT NULL,
	"DATEPOINT" VARCHAR2(8) NOT NULL,
	"MANAGER" VARCHAR2(40) NULL
);
REM Column comments ACC_DAILY_SUMMARY_MANAGER
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_MANAGER"."AU_ID" IS '用户ID';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_MANAGER"."DATEPOINT" IS '统计日期(YYYYMMDD)';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_MANAGER"."MANAGER" IS '客户经理';
REM Primary key ACC_DAILY_SUMMARY_MANAGER
ALTER TABLE "ACC_DAILY_SUMMARY_MANAGER" ADD CONSTRAINT "ACC_DAILY_SUMMARY_MANAGE_PK" PRIMARY KEY (AU_ID,DATEPOINT) USING INDEX;
/

REM Create Table ACC_DAILY_SUMMARY_REMAIN
CREATE TABLE "ACC_DAILY_SUMMARY_REMAIN" (
	"AU_ID" NUMBER NOT NULL,
	"DATEPOINT" VARCHAR2(8) NOT NULL,
	"REMAIN_AMT" NUMBER(18,2) DEFAULT 0 NOT NULL
);
REM Column comments ACC_DAILY_SUMMARY_REMAIN
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_REMAIN"."AU_ID" IS '用户ID';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_REMAIN"."DATEPOINT" IS '统计日期(YYYYMMDD)';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_REMAIN"."REMAIN_AMT" IS '当日投资余额总额';
REM Primary key ACC_DAILY_SUMMARY_REMAIN
ALTER TABLE "ACC_DAILY_SUMMARY_REMAIN" ADD CONSTRAINT "ACC_DAILY_SUMMARY_REMAIN_PK" PRIMARY KEY (AU_ID,DATEPOINT) USING INDEX;
/

REM Create Table ACC_DAILY_SUMMARY_REPAY
CREATE TABLE "ACC_DAILY_SUMMARY_REPAY" (
	"AU_ID" NUMBER NOT NULL,
	"DATEPOINT" VARCHAR2(8) NOT NULL,
	"REPAY_AMT" NUMBER(18,2) DEFAULT 0 NOT NULL
);
REM Column comments ACC_DAILY_SUMMARY_REPAY
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_REPAY"."AU_ID" IS '用户ID';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_REPAY"."DATEPOINT" IS '统计日期(YYYYMMDD)';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_REPAY"."REPAY_AMT" IS '当日还款总额';
REM Primary key ACC_DAILY_SUMMARY_REPAY
ALTER TABLE "ACC_DAILY_SUMMARY_REPAY" ADD CONSTRAINT "ACC_DAILY_SUMMARY_REPAY_PK" PRIMARY KEY (AU_ID,DATEPOINT) USING INDEX;
/

REM Create Table ACC_DAILY_SUMMARY_REPAY_I
CREATE TABLE "ACC_DAILY_SUMMARY_REPAY_I" (
	"AU_ID" NUMBER NOT NULL,
	"DATEPOINT" VARCHAR2(8) NOT NULL,
	"REPAY_INTEREST_AMT" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"REPAY_FEE" NUMBER(18,2) DEFAULT 0 NOT NULL
);
REM Column comments ACC_DAILY_SUMMARY_REPAY_I
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_REPAY_I"."AU_ID" IS '用户ID';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_REPAY_I"."DATEPOINT" IS '统计日期(YYYYMMDD)';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_REPAY_I"."REPAY_INTEREST_AMT" IS '当日成功还息总金额';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_REPAY_I"."REPAY_FEE" IS '当日成功还息手续费';
REM Primary key ACC_DAILY_SUMMARY_REPAY_I
ALTER TABLE "ACC_DAILY_SUMMARY_REPAY_I" ADD CONSTRAINT "ACC_DAILY_SUMMARY_REPAY_I_PK" PRIMARY KEY (AU_ID,DATEPOINT) USING INDEX;
/

REM Create Table ACC_DAILY_SUMMARY_TENDER
CREATE TABLE "ACC_DAILY_SUMMARY_TENDER" (
	"AU_ID" NUMBER NOT NULL,
	"DATEPOINT" VARCHAR2(8) NOT NULL,
	"TENDER_AMT" NUMBER(18,2) DEFAULT 0 NOT NULL
);
REM Column comments ACC_DAILY_SUMMARY_TENDER
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_TENDER"."AU_ID" IS '用户ID';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_TENDER"."DATEPOINT" IS '统计日期(YYYYMMDD)';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_TENDER"."TENDER_AMT" IS '当日成功投标金额';
REM Primary key ACC_DAILY_SUMMARY_TENDER
ALTER TABLE "ACC_DAILY_SUMMARY_TENDER" ADD CONSTRAINT "ACC_DAILY_SUMMARY_TENDER_PK" PRIMARY KEY (AU_ID,DATEPOINT) USING INDEX;
/

REM Create Table ACC_DAILY_SUMMARY_TENDER2
CREATE TABLE "ACC_DAILY_SUMMARY_TENDER2" (
	"AU_ID" NUMBER NOT NULL,
	"DATEPOINT" VARCHAR2(8) NOT NULL,
	"TENDER_AMT2" NUMBER(18,2) DEFAULT 0 NOT NULL
);
REM Column comments ACC_DAILY_SUMMARY_TENDER2
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_TENDER2"."AU_ID" IS '用户ID';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_TENDER2"."DATEPOINT" IS '统计日期(YYYYMMDD)';
COMMENT ON COLUMN "ACC_DAILY_SUMMARY_TENDER2"."TENDER_AMT2" IS '当日成功投标金额(新手标)';
REM Primary key ACC_DAILY_SUMMARY_TENDER2
ALTER TABLE "ACC_DAILY_SUMMARY_TENDER2" ADD CONSTRAINT "ACC_DAILY_SUMMARY_TENDER2_PK" PRIMARY KEY (AU_ID,DATEPOINT) USING INDEX;
/

REM Create Table ACC_FINACIERINFO
CREATE TABLE "ACC_FINACIERINFO" (
	"F_ID" NUMBER NOT NULL,
	"NAME" VARCHAR2(200 CHAR) NOT NULL,
	"LINKMAN_NAME" VARCHAR2(200 CHAR) NOT NULL,
	"LINKMAN_MOBILE" VARCHAR2(22 CHAR) NOT NULL,
	"AMT" NUMBER(12,2) NULL,
	"START_TIME" DATE NULL,
	"END_TIME" DATE NULL,
	"LOAN_PURPOSE" VARCHAR2(3200 CHAR) NULL,
	"GUARANTEE_SCHEME" NUMBER NULL,
	"CREATE_TIME" DATE NOT NULL,
	"ASSIGNER_NAME" VARCHAR2(80 CHAR) NULL,
	"ASSIGNE_TIME" DATE NULL,
	"UPDATER" VARCHAR2(80 CHAR) NULL,
	"UPDATE_TIME" DATE NULL,
	"TRACKER_NAME" VARCHAR2(80 CHAR) NULL,
	"STATUS" VARCHAR2(128 CHAR) NOT NULL,
	"INFO_FEEDBACK" VARCHAR2(4000 CHAR) NULL,
	"OTHER_GUARANTEE_SCHEME" VARCHAR2(4000 CHAR) NULL,
	"SRC" VARCHAR2(800 CHAR) NULL,
	"LINKMAN_QQ" VARCHAR2(40 CHAR) NULL,
	"LINKMAN_WCHAT" VARCHAR2(80 CHAR) NULL,
	"EMAIL" VARCHAR2(200 CHAR) NULL,
	"ADDRESS" VARCHAR2(2000 CHAR) NULL,
	"ORG_CODE" VARCHAR2(2000 CHAR) NULL,
	"GUARANTEE_NAME" VARCHAR2(100) NULL,
	"PAYER_NAME" VARCHAR2(100) NULL,
	"DRAWER_NAME" VARCHAR2(100) NULL,
	"OTHER_INFO" VARCHAR2(2000) NULL
);
COMMENT ON TABLE "ACC_FINACIERINFO" IS '我要借款申请表';
REM Column comments ACC_FINACIERINFO
COMMENT ON COLUMN "ACC_FINACIERINFO"."F_ID" IS '借款申请ID';
COMMENT ON COLUMN "ACC_FINACIERINFO"."NAME" IS '借款人（企业/个人）名称';
COMMENT ON COLUMN "ACC_FINACIERINFO"."LINKMAN_NAME" IS '联系人姓名';
COMMENT ON COLUMN "ACC_FINACIERINFO"."LINKMAN_MOBILE" IS '联系人手机号';
COMMENT ON COLUMN "ACC_FINACIERINFO"."AMT" IS '借款金额（万元';
COMMENT ON COLUMN "ACC_FINACIERINFO"."START_TIME" IS '用款开始时间';
COMMENT ON COLUMN "ACC_FINACIERINFO"."END_TIME" IS '用款结束时间';
COMMENT ON COLUMN "ACC_FINACIERINFO"."LOAN_PURPOSE" IS '借款用途';
COMMENT ON COLUMN "ACC_FINACIERINFO"."GUARANTEE_SCHEME" IS '担保方案';
COMMENT ON COLUMN "ACC_FINACIERINFO"."CREATE_TIME" IS '创建时间';
COMMENT ON COLUMN "ACC_FINACIERINFO"."ASSIGNER_NAME" IS '分配人';
COMMENT ON COLUMN "ACC_FINACIERINFO"."ASSIGNE_TIME" IS '分配时间';
COMMENT ON COLUMN "ACC_FINACIERINFO"."UPDATER" IS '更新人';
COMMENT ON COLUMN "ACC_FINACIERINFO"."UPDATE_TIME" IS '更新时间';
COMMENT ON COLUMN "ACC_FINACIERINFO"."TRACKER_NAME" IS '跟进人';
COMMENT ON COLUMN "ACC_FINACIERINFO"."STATUS" IS '1:申请中，2：已分配，3:已注册 ，4：待审核，5：已通过，6：未通过，7：已开户';
COMMENT ON COLUMN "ACC_FINACIERINFO"."INFO_FEEDBACK" IS '跟进返回信息';
COMMENT ON COLUMN "ACC_FINACIERINFO"."OTHER_GUARANTEE_SCHEME" IS '其他担保方案';
COMMENT ON COLUMN "ACC_FINACIERINFO"."SRC" IS '来源';
COMMENT ON COLUMN "ACC_FINACIERINFO"."LINKMAN_QQ" IS '联系人QQ号';
COMMENT ON COLUMN "ACC_FINACIERINFO"."LINKMAN_WCHAT" IS '联系人微信号';
COMMENT ON COLUMN "ACC_FINACIERINFO"."EMAIL" IS '电子邮箱';
COMMENT ON COLUMN "ACC_FINACIERINFO"."ADDRESS" IS '联系地址';
COMMENT ON COLUMN "ACC_FINACIERINFO"."ORG_CODE" IS '企业统一社会信用代码';
COMMENT ON COLUMN "ACC_FINACIERINFO"."GUARANTEE_NAME" IS '保证人';
COMMENT ON COLUMN "ACC_FINACIERINFO"."PAYER_NAME" IS '应收账款付款人';
COMMENT ON COLUMN "ACC_FINACIERINFO"."DRAWER_NAME" IS '出票人和承兑人';
COMMENT ON COLUMN "ACC_FINACIERINFO"."OTHER_INFO" IS '其他情况';
REM Primary key ACC_FINACIERINFO
ALTER TABLE "ACC_FINACIERINFO" ADD CONSTRAINT "ACC_FINACIERINFO_PK" PRIMARY KEY (F_ID) USING INDEX;
/

REM Create Table ACC_INVESTOR_LEVEL
CREATE TABLE "ACC_INVESTOR_LEVEL" (
	"ITL_ID" NUMBER NOT NULL,
	"AU_ID" NUMBER NOT NULL,
	"LVL" NUMBER DEFAULT 1 NOT NULL,
	"DATE_POINT" DATE NOT NULL,
	"SCORE" NUMBER DEFAULT 0 NOT NULL
);
COMMENT ON TABLE "ACC_INVESTOR_LEVEL" IS '投资者评级';
REM Column comments ACC_INVESTOR_LEVEL
COMMENT ON COLUMN "ACC_INVESTOR_LEVEL"."LVL" IS '投资人级别(保守型投资人 = 1；稳健性投资人 = 2； 平衡型投资人 = 3； 成长型投资人 = 4； 积极型投资人 = 5)';
COMMENT ON COLUMN "ACC_INVESTOR_LEVEL"."DATE_POINT" IS '分级时间';
COMMENT ON COLUMN "ACC_INVESTOR_LEVEL"."SCORE" IS '总分';
REM Primary key ACC_INVESTOR_LEVEL
ALTER TABLE "ACC_INVESTOR_LEVEL" ADD CONSTRAINT "ACC_INVESTOR_LEVEL_PK" PRIMARY KEY (ITL_ID) USING INDEX;
/

REM Create Table ACC_INVESTOR_LEVEL_DETAIL
REM Depend on table(s)
REM [ACC_INVESTOR_LEVEL]
CREATE TABLE "ACC_INVESTOR_LEVEL_DETAIL" (
	"ITL_ID" NUMBER NOT NULL,
	"QN" NUMBER NOT NULL,
	"OPT_NO" NUMBER DEFAULT 1 NOT NULL,
	"TYPE" NUMBER DEFAULT 1 NOT NULL
);
COMMENT ON TABLE "ACC_INVESTOR_LEVEL_DETAIL" IS '评级详细信息表';
REM Column comments ACC_INVESTOR_LEVEL_DETAIL
COMMENT ON COLUMN "ACC_INVESTOR_LEVEL_DETAIL"."QN" IS '题目编号';
COMMENT ON COLUMN "ACC_INVESTOR_LEVEL_DETAIL"."OPT_NO" IS '题目选项';
COMMENT ON COLUMN "ACC_INVESTOR_LEVEL_DETAIL"."TYPE" IS '1个人，2机构';
REM Primary key ACC_INVESTOR_LEVEL_DETAIL
ALTER TABLE "ACC_INVESTOR_LEVEL_DETAIL" ADD CONSTRAINT "ACC_INVESTOR_LEVEL_DETAIL_PK" PRIMARY KEY (ITL_ID,QN) USING INDEX;
REM Foreign keys ACC_INVESTOR_LEVEL_DETAIL
ALTER TABLE "ACC_INVESTOR_LEVEL_DETAIL" ADD CONSTRAINT "ACC_INVESTOR_LEVEL_DETAIL_FK1" FOREIGN KEY (ITL_ID) REFERENCES "ACC_INVESTOR_LEVEL" (ITL_ID) ON DELETE NO ACTION;
/

REM Create Table ACC_INVESTOR_LEVEL_QUESTION
CREATE TABLE "ACC_INVESTOR_LEVEL_QUESTION" (
	"QN" NUMBER NOT NULL,
	"OPT_NO" NUMBER NOT NULL,
	"SCORE" NUMBER DEFAULT 0 NOT NULL,
	"ENABLED" NUMBER(1) DEFAULT 0 NOT NULL,
	"TYPE" NUMBER DEFAULT 1 NOT NULL
);
COMMENT ON TABLE "ACC_INVESTOR_LEVEL_QUESTION" IS '评级问题分数记录表';
REM Column comments ACC_INVESTOR_LEVEL_QUESTION
COMMENT ON COLUMN "ACC_INVESTOR_LEVEL_QUESTION"."QN" IS '题目编号';
COMMENT ON COLUMN "ACC_INVESTOR_LEVEL_QUESTION"."OPT_NO" IS '题目选项';
COMMENT ON COLUMN "ACC_INVESTOR_LEVEL_QUESTION"."SCORE" IS '选项得分';
COMMENT ON COLUMN "ACC_INVESTOR_LEVEL_QUESTION"."ENABLED" IS '是否有效';
COMMENT ON COLUMN "ACC_INVESTOR_LEVEL_QUESTION"."TYPE" IS '1个人，2机构';
REM Primary key ACC_INVESTOR_LEVEL_QUESTION
ALTER TABLE "ACC_INVESTOR_LEVEL_QUESTION" ADD CONSTRAINT "ACC_INVESTOR_LEVEL_QUESTIO_PK" PRIMARY KEY (QN,OPT_NO,TYPE) USING INDEX;
/

REM Create Table ACC_PRIVILEGE_USER
CREATE TABLE "ACC_PRIVILEGE_USER" (
	"AU_ID" NUMBER NOT NULL,
	"CREATOR" VARCHAR2(80 CHAR) NOT NULL,
	"CREATE_TIME" DATE NOT NULL,
	"UPDATER" VARCHAR2(80 CHAR) NULL,
	"UPDATE_TIME" DATE NULL,
	"P1" NUMBER DEFAULT 0 NOT NULL,
	"P2" NUMBER DEFAULT 0 NOT NULL,
	"P3" NUMBER DEFAULT 0 NOT NULL,
	"P4" NUMBER DEFAULT 0 NOT NULL,
	"P5" NUMBER DEFAULT 0 NOT NULL
);
COMMENT ON TABLE "ACC_PRIVILEGE_USER" IS '特权用户表';
REM Column comments ACC_PRIVILEGE_USER
COMMENT ON COLUMN "ACC_PRIVILEGE_USER"."AU_ID" IS '用户ID';
COMMENT ON COLUMN "ACC_PRIVILEGE_USER"."CREATOR" IS '创建人';
COMMENT ON COLUMN "ACC_PRIVILEGE_USER"."CREATE_TIME" IS '创建时间';
COMMENT ON COLUMN "ACC_PRIVILEGE_USER"."UPDATER" IS '更新人';
COMMENT ON COLUMN "ACC_PRIVILEGE_USER"."UPDATE_TIME" IS '更新时间';
COMMENT ON COLUMN "ACC_PRIVILEGE_USER"."P1" IS '1-无新手投资人限制';
COMMENT ON COLUMN "ACC_PRIVILEGE_USER"."P2" IS '1-无债权转让限制';
COMMENT ON COLUMN "ACC_PRIVILEGE_USER"."P3" IS '1-无投资额最高最低限制';
COMMENT ON COLUMN "ACC_PRIVILEGE_USER"."P4" IS '1-无项目白名单限制';
COMMENT ON COLUMN "ACC_PRIVILEGE_USER"."P5" IS '1-免除债权转让手续费';
REM Primary key ACC_PRIVILEGE_USER
ALTER TABLE "ACC_PRIVILEGE_USER" ADD CONSTRAINT "ACC_PRIVILEGE_USER_PK" PRIMARY KEY (AU_ID) USING INDEX;
/

REM Create Table ACC_RUNNING
CREATE TABLE "ACC_RUNNING" (
	"AR_ID" NUMBER NOT NULL,
	"AU_ID" NUMBER NOT NULL,
	"AR_TYPE" NUMBER NOT NULL,
	"DATEPOINT" DATE NOT NULL,
	"DEBIT_AMT" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"CREDIT_AMT" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"FRZ_AMT" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"UNFRZ_AMT" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"REMARK" VARCHAR2(4000 CHAR) NULL,
	"TS_ID" NUMBER DEFAULT 0 NOT NULL,
	"P_ID" NUMBER NULL,
	"JX_SEQ_NO" VARCHAR2(320 CHAR) NOT NULL
);
COMMENT ON TABLE "ACC_RUNNING" IS '账户明细';
REM Column comments ACC_RUNNING
COMMENT ON COLUMN "ACC_RUNNING"."AR_ID" IS '主键';
COMMENT ON COLUMN "ACC_RUNNING"."AU_ID" IS '用户id';
COMMENT ON COLUMN "ACC_RUNNING"."AR_TYPE" IS '0未知类型，1充值，2提现，3放款，4还本，5放款（借款人），6还本（借款人），7债权转入，8债权转出，9还息，10还息（借款人），11（投资），12（流标），14还息手续费,15放款手续费，18债权转出手续费，20发放红包，21收到红包,46活期收益';
COMMENT ON COLUMN "ACC_RUNNING"."DATEPOINT" IS '记录创建时间';
COMMENT ON COLUMN "ACC_RUNNING"."DEBIT_AMT" IS '借出金额(减少金额)';
COMMENT ON COLUMN "ACC_RUNNING"."CREDIT_AMT" IS '贷入金额(增加金额)';
COMMENT ON COLUMN "ACC_RUNNING"."FRZ_AMT" IS '冻结金额';
COMMENT ON COLUMN "ACC_RUNNING"."UNFRZ_AMT" IS '解冻金额';
COMMENT ON COLUMN "ACC_RUNNING"."REMARK" IS '备注';
COMMENT ON COLUMN "ACC_RUNNING"."TS_ID" IS '关联的业务操作ID';
COMMENT ON COLUMN "ACC_RUNNING"."P_ID" IS '项目id';
COMMENT ON COLUMN "ACC_RUNNING"."JX_SEQ_NO" IS '即信系统跟踪号';
REM Primary key ACC_RUNNING
ALTER TABLE "ACC_RUNNING" ADD CONSTRAINT "ACC_RUNNING_PK" PRIMARY KEY (AR_ID) USING INDEX;
REM Index ACC_RUNNING
CREATE INDEX "ACC_RUNNING_IX1" ON "ACC_RUNNING" (AU_ID,DATEPOINT,AR_TYPE)
/

REM Create Table ACC_SCORE
CREATE TABLE "ACC_SCORE" (
	"AU_ID" NUMBER NOT NULL,
	"SCORE" NUMBER NULL
);
COMMENT ON TABLE "ACC_SCORE" IS '会员积分总分表';
REM Column comments ACC_SCORE
COMMENT ON COLUMN "ACC_SCORE"."AU_ID" IS '用户id';
COMMENT ON COLUMN "ACC_SCORE"."SCORE" IS '积分值';
REM Primary key ACC_SCORE
ALTER TABLE "ACC_SCORE" ADD CONSTRAINT "" PRIMARY KEY () USING INDEX;
/

REM Create Table ACC_SCORE_DETAIL
CREATE TABLE "ACC_SCORE_DETAIL" (
	"ASD_ID" NUMBER NOT NULL,
	"AU_ID" NUMBER NOT NULL,
	"DATE_POINT" DATE NULL,
	"ORIGIN" NUMBER NULL,
	"GAINED" NUMBER NULL,
	"SPENT" NUMBER NULL,
	"BALANCE" NUMBER NULL
);
COMMENT ON TABLE "ACC_SCORE_DETAIL" IS '会员积分明细表';
REM Column comments ACC_SCORE_DETAIL
COMMENT ON COLUMN "ACC_SCORE_DETAIL"."ASD_ID" IS '积分明细表主键id';
COMMENT ON COLUMN "ACC_SCORE_DETAIL"."AU_ID" IS '用户id';
COMMENT ON COLUMN "ACC_SCORE_DETAIL"."DATE_POINT" IS '积分时间';
COMMENT ON COLUMN "ACC_SCORE_DETAIL"."ORIGIN" IS '积分来源：1-签到，2-注册并开户成功，3-转介绍，4-首次投资， 5-投资余额，11-活动奖励积分，12-兑换， 13-过期， 14-调整(预留来源)';
COMMENT ON COLUMN "ACC_SCORE_DETAIL"."GAINED" IS '通过积分来源，获取的积分';
COMMENT ON COLUMN "ACC_SCORE_DETAIL"."SPENT" IS '兑换和过期后消耗的积分';
COMMENT ON COLUMN "ACC_SCORE_DETAIL"."BALANCE" IS '总积分余额';
REM Primary key ACC_SCORE_DETAIL
ALTER TABLE "ACC_SCORE_DETAIL" ADD CONSTRAINT "SYS_C0026008" PRIMARY KEY (ASD_ID) USING INDEX;
/

REM Create Table ACC_SCORE_ORDER
CREATE TABLE "ACC_SCORE_ORDER" (
	"ASO_ID" NUMBER NOT NULL,
	"AU_ID" NUMBER NOT NULL,
	"SCORE" NUMBER NULL,
	"DATE_POINT" DATE NULL,
	"AW_NO" VARCHAR2(20) NULL
);
COMMENT ON TABLE "ACC_SCORE_ORDER" IS '会员积分兑换表';
REM Column comments ACC_SCORE_ORDER
COMMENT ON COLUMN "ACC_SCORE_ORDER"."ASO_ID" IS '积分兑换表id';
COMMENT ON COLUMN "ACC_SCORE_ORDER"."AU_ID" IS '用户id';
COMMENT ON COLUMN "ACC_SCORE_ORDER"."SCORE" IS '消耗积分';
COMMENT ON COLUMN "ACC_SCORE_ORDER"."DATE_POINT" IS '兑换时间';
COMMENT ON COLUMN "ACC_SCORE_ORDER"."AW_NO" IS '奖品编号，如A01，A02';
REM Primary key ACC_SCORE_ORDER
ALTER TABLE "ACC_SCORE_ORDER" ADD CONSTRAINT "SYS_C0026011" PRIMARY KEY (ASO_ID) USING INDEX;
/

REM Create Table ACC_USER_DAILY_STATIS_HISTORY
CREATE TABLE "ACC_USER_DAILY_STATIS_HISTORY" (
	"DATEPOINT" VARCHAR2(16 CHAR) NOT NULL,
	"RETRY_COUNT" NUMBER DEFAULT 0 NOT NULL,
	"DONE" NUMBER DEFAULT 0 NOT NULL,
	"DONE2" NUMBER DEFAULT 0 NOT NULL
);
REM Column comments ACC_USER_DAILY_STATIS_HISTORY
COMMENT ON COLUMN "ACC_USER_DAILY_STATIS_HISTORY"."DATEPOINT" IS '日期';
COMMENT ON COLUMN "ACC_USER_DAILY_STATIS_HISTORY"."RETRY_COUNT" IS '重试次数';
COMMENT ON COLUMN "ACC_USER_DAILY_STATIS_HISTORY"."DONE" IS '是否已完成';
REM Primary key ACC_USER_DAILY_STATIS_HISTORY
ALTER TABLE "ACC_USER_DAILY_STATIS_HISTORY" ADD CONSTRAINT "ACC_USER_DAILY_STATIS_HIST_PK" PRIMARY KEY (DATEPOINT) USING INDEX;
/

REM Create Table ACC_USER_DAY_STATISTICS
CREATE TABLE "ACC_USER_DAY_STATISTICS" (
	"AU_ID" NUMBER NOT NULL,
	"INVEST_AMT" NUMBER(18,2) DEFAULT 0 NULL,
	"TENDER_AMT" NUMBER(18,2) DEFAULT 0 NULL,
	"CREDIT_AMT" NUMBER(18,2) DEFAULT 0 NULL,
	"DATEPOINT" VARCHAR2(32 CHAR) NOT NULL,
	"INVEST_COUNT" NUMBER DEFAULT 0 NULL,
	"CREDIT_ASSIGN_COUNT" NUMBER DEFAULT 0 NULL,
	"INCOME_AMT" NUMBER(18,2) DEFAULT 0 NULL,
	"BIND_CARD_COUNT" NUMBER DEFAULT 0 NULL,
	"IS_INVEST" NUMBER DEFAULT 0 NOT NULL,
	"FIRST_INVEST" NUMBER DEFAULT 0 NULL,
	"REPAID_CAPITAL_AMT" NUMBER(18,2) DEFAULT 0 NULL
);
REM Column comments ACC_USER_DAY_STATISTICS
COMMENT ON COLUMN "ACC_USER_DAY_STATISTICS"."AU_ID" IS '用户auId';
COMMENT ON COLUMN "ACC_USER_DAY_STATISTICS"."INVEST_AMT" IS '投资余额';
COMMENT ON COLUMN "ACC_USER_DAY_STATISTICS"."TENDER_AMT" IS '投资总额';
COMMENT ON COLUMN "ACC_USER_DAY_STATISTICS"."CREDIT_AMT" IS '转入债权本金总额';
COMMENT ON COLUMN "ACC_USER_DAY_STATISTICS"."DATEPOINT" IS '统计记录日期yyyymmdd';
COMMENT ON COLUMN "ACC_USER_DAY_STATISTICS"."INVEST_COUNT" IS '投标次数';
COMMENT ON COLUMN "ACC_USER_DAY_STATISTICS"."CREDIT_ASSIGN_COUNT" IS '债权转入次数';
COMMENT ON COLUMN "ACC_USER_DAY_STATISTICS"."INCOME_AMT" IS '公司收入额';
COMMENT ON COLUMN "ACC_USER_DAY_STATISTICS"."BIND_CARD_COUNT" IS '绑卡次数';
COMMENT ON COLUMN "ACC_USER_DAY_STATISTICS"."IS_INVEST" IS '是否投资，当天投资次数大于0，则为1；否则为0；';
COMMENT ON COLUMN "ACC_USER_DAY_STATISTICS"."FIRST_INVEST" IS '是否为第一次投资';
COMMENT ON COLUMN "ACC_USER_DAY_STATISTICS"."REPAID_CAPITAL_AMT" IS '已还本金';
REM Primary key ACC_USER_DAY_STATISTICS
ALTER TABLE "ACC_USER_DAY_STATISTICS" ADD CONSTRAINT "ACC_USER_DAY_STATISTICS_PK" PRIMARY KEY (AU_ID,DATEPOINT) USING INDEX;
/

REM Create Table ACC_USER_MONTH_REPORT
CREATE TABLE "ACC_USER_MONTH_REPORT" (
	"AU_ID" NUMBER NOT NULL,
	"YEAR" NUMBER NOT NULL,
	"MONTH" NUMBER NOT NULL,
	"STATUS" NUMBER DEFAULT 0 NULL
);
COMMENT ON TABLE "ACC_USER_MONTH_REPORT" IS '投资人年报月报表';
REM Column comments ACC_USER_MONTH_REPORT
COMMENT ON COLUMN "ACC_USER_MONTH_REPORT"."AU_ID" IS '投资人ID';
COMMENT ON COLUMN "ACC_USER_MONTH_REPORT"."YEAR" IS '年份';
COMMENT ON COLUMN "ACC_USER_MONTH_REPORT"."MONTH" IS '月份';
COMMENT ON COLUMN "ACC_USER_MONTH_REPORT"."STATUS" IS '0,未添加.1,已添加.';
REM Primary key ACC_USER_MONTH_REPORT
ALTER TABLE "ACC_USER_MONTH_REPORT" ADD CONSTRAINT "ACC_USER_MONTH_REPORT_PK" PRIMARY KEY (AU_ID,YEAR,MONTH) USING INDEX;
/

REM Create Table APP_DISCLOSURE_REPORT
CREATE TABLE "APP_DISCLOSURE_REPORT" (
	"ADR_ID" NUMBER NOT NULL,
	"YEAR" VARCHAR2(8 CHAR) NULL,
	"MONTH" VARCHAR2(4 CHAR) NULL,
	"TYPE" NUMBER NULL,
	"NAME" VARCHAR2(2000 CHAR) NULL,
	"CREATER" VARCHAR2(2000 CHAR) NULL,
	"CREATE_TIME" DATE NULL,
	"UPDATER" VARCHAR2(2000 CHAR) NULL,
	"UPDATER_TIME" DATE NULL
);
REM Column comments APP_DISCLOSURE_REPORT
COMMENT ON COLUMN "APP_DISCLOSURE_REPORT"."ADR_ID" IS '表ID';
COMMENT ON COLUMN "APP_DISCLOSURE_REPORT"."YEAR" IS '年份';
COMMENT ON COLUMN "APP_DISCLOSURE_REPORT"."MONTH" IS '月份';
COMMENT ON COLUMN "APP_DISCLOSURE_REPORT"."TYPE" IS '类型，0：月报，1：年报';
COMMENT ON COLUMN "APP_DISCLOSURE_REPORT"."NAME" IS '名称，如2017年-平台运营-月报';
COMMENT ON COLUMN "APP_DISCLOSURE_REPORT"."CREATER" IS '创建人';
COMMENT ON COLUMN "APP_DISCLOSURE_REPORT"."CREATE_TIME" IS '创建时间';
COMMENT ON COLUMN "APP_DISCLOSURE_REPORT"."UPDATER" IS '更新人';
COMMENT ON COLUMN "APP_DISCLOSURE_REPORT"."UPDATER_TIME" IS '更新时间';
REM Primary key APP_DISCLOSURE_REPORT
ALTER TABLE "APP_DISCLOSURE_REPORT" ADD CONSTRAINT "SYS_C0026304" PRIMARY KEY (ADR_ID) USING INDEX;
/

REM Create Table APP_DISCLOSURE_REPORT_DETAIL
REM Depend on table(s)
REM [APP_DISCLOSURE_REPORT]
CREATE TABLE "APP_DISCLOSURE_REPORT_DETAIL" (
	"ADR_ID" NUMBER NULL,
	"KEY" VARCHAR2(200 CHAR) NULL,
	"VALUE" VARCHAR2(200 CHAR) NULL
);
REM Column comments APP_DISCLOSURE_REPORT_DETAIL
COMMENT ON COLUMN "APP_DISCLOSURE_REPORT_DETAIL"."ADR_ID" IS '表ID，来自APP_DISCLOSURE_REPORT';
COMMENT ON COLUMN "APP_DISCLOSURE_REPORT_DETAIL"."KEY" IS '关键字，1**：运营；2**：业务种类；3**：借款用途';
COMMENT ON COLUMN "APP_DISCLOSURE_REPORT_DETAIL"."VALUE" IS '数值';
REM Primary key APP_DISCLOSURE_REPORT_DETAIL
ALTER TABLE "APP_DISCLOSURE_REPORT_DETAIL" ADD CONSTRAINT "" PRIMARY KEY () USING INDEX;
REM Foreign keys APP_DISCLOSURE_REPORT_DETAIL
ALTER TABLE "APP_DISCLOSURE_REPORT_DETAIL" ADD CONSTRAINT "ADR_ID_FK" FOREIGN KEY (ADR_ID) REFERENCES "APP_DISCLOSURE_REPORT" (ADR_ID) ON DELETE CASCADE;
/

REM Create Table APP_INFO
CREATE TABLE "APP_INFO" (
	"ID" NUMBER NOT NULL,
	"NAME" VARCHAR2(120 CHAR) NULL,
	"CONTENT" VARCHAR2(800 CHAR) NULL
);
COMMENT ON TABLE "APP_INFO" IS 'app信息表';
REM Column comments APP_INFO
REM Primary key APP_INFO
ALTER TABLE "APP_INFO" ADD CONSTRAINT "APP_INFO_PK" PRIMARY KEY (ID) USING INDEX;
/

REM Create Table APP_INFO1
CREATE TABLE "APP_INFO1" (
	"CONTENT" VARCHAR2(400) NULL,
	"ID" NUMBER NOT NULL,
	"NAME" VARCHAR2(60) NULL
);
REM Column comments APP_INFO1
REM Primary key APP_INFO1
ALTER TABLE "APP_INFO1" ADD CONSTRAINT "APP_INFO1_PK" PRIMARY KEY (ID) USING INDEX;
/

REM Create Table APP_MONTH_SUMMARY
CREATE TABLE "APP_MONTH_SUMMARY" (
	"YEAR_MONTH" VARCHAR2(6) NOT NULL,
	"REG_COUNT" NUMBER DEFAULT 0 NULL,
	"BORROW_AMT_COUNT" NUMBER DEFAULT 0 NULL,
	"PER_PEOPLE_AMT_COUNT" NUMBER DEFAULT 0 NULL
);
COMMENT ON TABLE "APP_MONTH_SUMMARY" IS '首页数据统计表';
REM Column comments APP_MONTH_SUMMARY
COMMENT ON COLUMN "APP_MONTH_SUMMARY"."YEAR_MONTH" IS '年月，主键';
COMMENT ON COLUMN "APP_MONTH_SUMMARY"."REG_COUNT" IS '注册人数';
COMMENT ON COLUMN "APP_MONTH_SUMMARY"."BORROW_AMT_COUNT" IS '累计借贷金额';
COMMENT ON COLUMN "APP_MONTH_SUMMARY"."PER_PEOPLE_AMT_COUNT" IS '人均累计出借金额';
REM Primary key APP_MONTH_SUMMARY
ALTER TABLE "APP_MONTH_SUMMARY" ADD CONSTRAINT "SYS_C0026023" PRIMARY KEY (YEAR_MONTH) USING INDEX;
/

REM Create Table BA_CTOR_ORG
CREATE TABLE "BA_CTOR_ORG" (
	"BCO_ID" NUMBER NOT NULL,
	"NAME" VARCHAR2(2000 CHAR) NULL,
	"ENT_NATURE" VARCHAR2(200 CHAR) NULL,
	"REG_FUNDS" NUMBER(18,2) NULL,
	"INTRO" VARCHAR2(4000 CHAR) NULL,
	"CREATOR" VARCHAR2(80 CHAR) NULL,
	"CREATE_TIME" DATE NULL,
	"UPDATER" VARCHAR2(80 CHAR) NULL,
	"UPDATE_TIME" DATE NULL,
	"QUALIFICATION" VARCHAR2(200 CHAR) NULL,
	"SHOW_NAME" VARCHAR2(200 CHAR) NULL,
	"ENT_STRENGTH" VARCHAR2(200 CHAR) NULL,
	"ENT_QUALITY" VARCHAR2(200 CHAR) NULL,
	"SHOW_REG_FUNDS" VARCHAR2(200 CHAR) NULL,
	"NATION_PRIZE_COUNT" NUMBER(2) NULL,
	"PROVIN_PRIZE_COUNT" NUMBER(4) NULL,
	"REG_YEARS" NUMBER(4) NULL,
	"LASTED_AREA" NUMBER(18,2) NULL,
	"LASTED_OUTPUT" NUMBER(18,2) NULL,
	"SHOW_REG_YEARS" VARCHAR2(200 CHAR) NOT NULL,
	"REGISTERED_DATE" DATE NULL
);
COMMENT ON TABLE "BA_CTOR_ORG" IS 'DA_施工单位_基础表';
REM Column comments BA_CTOR_ORG
COMMENT ON COLUMN "BA_CTOR_ORG"."BCO_ID" IS '施工单位基础数据库id';
COMMENT ON COLUMN "BA_CTOR_ORG"."NAME" IS '企业名称';
COMMENT ON COLUMN "BA_CTOR_ORG"."ENT_NATURE" IS '企业性质。参见 企业资质字典表（D_ENT_NATURE）';
COMMENT ON COLUMN "BA_CTOR_ORG"."REG_FUNDS" IS '注册资本金';
COMMENT ON COLUMN "BA_CTOR_ORG"."INTRO" IS '介绍';
COMMENT ON COLUMN "BA_CTOR_ORG"."CREATOR" IS '创建人';
COMMENT ON COLUMN "BA_CTOR_ORG"."CREATE_TIME" IS '加入时间';
COMMENT ON COLUMN "BA_CTOR_ORG"."UPDATER" IS '更新人';
COMMENT ON COLUMN "BA_CTOR_ORG"."UPDATE_TIME" IS '更新时间';
COMMENT ON COLUMN "BA_CTOR_ORG"."QUALIFICATION" IS '行业资质。参见 行业资质字典表D_ENT_QUALIFICATION';
COMMENT ON COLUMN "BA_CTOR_ORG"."SHOW_NAME" IS '展示企业名称';
COMMENT ON COLUMN "BA_CTOR_ORG"."ENT_STRENGTH" IS '企业实力。参见 D_ENT_STRENGTH字典表。';
COMMENT ON COLUMN "BA_CTOR_ORG"."ENT_QUALITY" IS '企业质量';
COMMENT ON COLUMN "BA_CTOR_ORG"."SHOW_REG_FUNDS" IS '展示注册资金';
COMMENT ON COLUMN "BA_CTOR_ORG"."NATION_PRIZE_COUNT" IS '获得全国奖项次数';
COMMENT ON COLUMN "BA_CTOR_ORG"."PROVIN_PRIZE_COUNT" IS '省级项目获得奖项次数';
COMMENT ON COLUMN "BA_CTOR_ORG"."REG_YEARS" IS '注册年限';
COMMENT ON COLUMN "BA_CTOR_ORG"."LASTED_AREA" IS '上一年度施工面积（平方）';
COMMENT ON COLUMN "BA_CTOR_ORG"."LASTED_OUTPUT" IS '上一年度产值（亿元）';
COMMENT ON COLUMN "BA_CTOR_ORG"."SHOW_REG_YEARS" IS '展示注册年限';
COMMENT ON COLUMN "BA_CTOR_ORG"."REGISTERED_DATE" IS '注册时间（成立时间）';
REM Primary key BA_CTOR_ORG
ALTER TABLE "BA_CTOR_ORG" ADD CONSTRAINT "BA_CTOR_ORG_PK" PRIMARY KEY (BCO_ID) USING INDEX;
/

REM Create Table BA_GUARANTEE_ORG
CREATE TABLE "BA_GUARANTEE_ORG" (
	"BGO_ID" NUMBER NOT NULL,
	"NAME" VARCHAR2(2000 CHAR) NULL,
	"REG_FUNDS" NUMBER(18,2) NULL,
	"INTRO" VARCHAR2(4000 CHAR) NULL,
	"CREATOR" VARCHAR2(80 CHAR) NULL,
	"CREATE_TIME" DATE NULL,
	"UPDATER" VARCHAR2(80 CHAR) NULL,
	"UPDATE_TIME" DATE NULL,
	"REG_ADDRESS" VARCHAR2(2000 CHAR) NULL,
	"POSTCODE" VARCHAR2(80 CHAR) NULL,
	"LINKMAN" VARCHAR2(2000 CHAR) NULL,
	"MOBILE" VARCHAR2(2000 CHAR) NULL,
	"RANKING" NUMBER NULL,
	"GET_PRIZE" VARCHAR2(2000 CHAR) NULL,
	"ORG_WEB_SITE" VARCHAR2(2000 CHAR) NULL,
	"SHOW_NAME" VARCHAR2(200 CHAR) NULL,
	"REGISTERED_DATE" DATE NULL,
	"QUALIFICATION" VARCHAR2(200 CHAR) NULL,
	"SHOW_REG_ADDRESS" VARCHAR2(200 CHAR) NULL,
	"LEGAL_ID_CARD" VARCHAR2(2000 CHAR) NULL,
	"LEGAL_PERSON_NAME" VARCHAR2(2000 CHAR) NULL,
	"LEGAL_PERSON_SHOW_NAME" VARCHAR2(200 CHAR) NULL,
	"REG_YEARS" NUMBER(4) NULL,
	"SOCIAL_CREDIT_CODE" VARCHAR2(2000 CHAR) NULL,
	"SHOW_SOCIAL_CREDIT_CODE" VARCHAR2(200 CHAR) NULL
);
COMMENT ON TABLE "BA_GUARANTEE_ORG" IS '担保机构-基础表';
REM Column comments BA_GUARANTEE_ORG
COMMENT ON COLUMN "BA_GUARANTEE_ORG"."BGO_ID" IS '担保公司基础数据库id';
COMMENT ON COLUMN "BA_GUARANTEE_ORG"."NAME" IS '企业名称';
COMMENT ON COLUMN "BA_GUARANTEE_ORG"."REG_FUNDS" IS '注册资金';
COMMENT ON COLUMN "BA_GUARANTEE_ORG"."INTRO" IS '担保企业介绍。';
COMMENT ON COLUMN "BA_GUARANTEE_ORG"."CREATOR" IS '创建人';
COMMENT ON COLUMN "BA_GUARANTEE_ORG"."CREATE_TIME" IS '加入时间';
COMMENT ON COLUMN "BA_GUARANTEE_ORG"."UPDATER" IS '更新人';
COMMENT ON COLUMN "BA_GUARANTEE_ORG"."UPDATE_TIME" IS '更新时间';
COMMENT ON COLUMN "BA_GUARANTEE_ORG"."REG_ADDRESS" IS '注册地址';
COMMENT ON COLUMN "BA_GUARANTEE_ORG"."POSTCODE" IS '邮编';
COMMENT ON COLUMN "BA_GUARANTEE_ORG"."LINKMAN" IS '联系人';
COMMENT ON COLUMN "BA_GUARANTEE_ORG"."MOBILE" IS '联系人联系电话';
COMMENT ON COLUMN "BA_GUARANTEE_ORG"."RANKING" IS '行业排名';
COMMENT ON COLUMN "BA_GUARANTEE_ORG"."GET_PRIZE" IS '获得奖项';
COMMENT ON COLUMN "BA_GUARANTEE_ORG"."ORG_WEB_SITE" IS '公司官网';
COMMENT ON COLUMN "BA_GUARANTEE_ORG"."SHOW_NAME" IS '担保企业展示名称';
COMMENT ON COLUMN "BA_GUARANTEE_ORG"."REGISTERED_DATE" IS '注册时间（成立时间）';
COMMENT ON COLUMN "BA_GUARANTEE_ORG"."QUALIFICATION" IS '行业资质';
COMMENT ON COLUMN "BA_GUARANTEE_ORG"."SHOW_REG_ADDRESS" IS '显示注册地址';
COMMENT ON COLUMN "BA_GUARANTEE_ORG"."LEGAL_ID_CARD" IS '法定代表人身份证号';
COMMENT ON COLUMN "BA_GUARANTEE_ORG"."LEGAL_PERSON_NAME" IS '法定代表人姓名';
COMMENT ON COLUMN "BA_GUARANTEE_ORG"."LEGAL_PERSON_SHOW_NAME" IS '法定代表人展示姓名';
COMMENT ON COLUMN "BA_GUARANTEE_ORG"."REG_YEARS" IS '注册年限';
COMMENT ON COLUMN "BA_GUARANTEE_ORG"."SOCIAL_CREDIT_CODE" IS '统一社会信用代码';
COMMENT ON COLUMN "BA_GUARANTEE_ORG"."SHOW_SOCIAL_CREDIT_CODE" IS '展示统一社会信用代码';
REM Primary key BA_GUARANTEE_ORG
ALTER TABLE "BA_GUARANTEE_ORG" ADD CONSTRAINT "BA_GUARANTEE_ORG_PK" PRIMARY KEY (BGO_ID) USING INDEX;
/

REM Create Table BA_GUARANTEE_PERSON
CREATE TABLE "BA_GUARANTEE_PERSON" (
	"BGP_ID" NUMBER NOT NULL,
	"NAME" VARCHAR2(2000 CHAR) NULL,
	"SHOW_NAME" VARCHAR2(80 CHAR) NULL,
	"AGE" NUMBER NULL,
	"SHOW_AGE" VARCHAR2(80 CHAR) NULL,
	"GENDER" VARCHAR2(80 CHAR) NULL,
	"MOBILE" VARCHAR2(2000 CHAR) NULL,
	"ADDRESS" VARCHAR2(2000 CHAR) NULL,
	"SHOW_ADDRESS" VARCHAR2(200 CHAR) NULL,
	"INTRO" VARCHAR2(4000 CHAR) NULL,
	"CREATOR" VARCHAR2(80 CHAR) NULL,
	"CREATE_TIME" DATE NULL,
	"UPDATER" VARCHAR2(80 CHAR) NULL,
	"UPDATE_TIME" DATE NULL,
	"POSTCODE" VARCHAR2(80 CHAR) NULL,
	"ID_CARD" VARCHAR2(2000 CHAR) NULL
);
COMMENT ON TABLE "BA_GUARANTEE_PERSON" IS '担保个人-基础表';
REM Column comments BA_GUARANTEE_PERSON
COMMENT ON COLUMN "BA_GUARANTEE_PERSON"."BGP_ID" IS '担保个人基础数据库id';
COMMENT ON COLUMN "BA_GUARANTEE_PERSON"."NAME" IS '担保人姓名';
COMMENT ON COLUMN "BA_GUARANTEE_PERSON"."SHOW_NAME" IS '担保人展示姓名';
COMMENT ON COLUMN "BA_GUARANTEE_PERSON"."AGE" IS '担保人年龄';
COMMENT ON COLUMN "BA_GUARANTEE_PERSON"."SHOW_AGE" IS '展示年龄';
COMMENT ON COLUMN "BA_GUARANTEE_PERSON"."GENDER" IS '担保人性别';
COMMENT ON COLUMN "BA_GUARANTEE_PERSON"."MOBILE" IS '担保人联系电话';
COMMENT ON COLUMN "BA_GUARANTEE_PERSON"."ADDRESS" IS '担保人联系地址';
COMMENT ON COLUMN "BA_GUARANTEE_PERSON"."SHOW_ADDRESS" IS '担保人展示联系地址';
COMMENT ON COLUMN "BA_GUARANTEE_PERSON"."INTRO" IS '担保人介绍。';
COMMENT ON COLUMN "BA_GUARANTEE_PERSON"."CREATOR" IS '创建人';
COMMENT ON COLUMN "BA_GUARANTEE_PERSON"."CREATE_TIME" IS '加入时间';
COMMENT ON COLUMN "BA_GUARANTEE_PERSON"."UPDATER" IS '更新人';
COMMENT ON COLUMN "BA_GUARANTEE_PERSON"."UPDATE_TIME" IS '更新时间';
COMMENT ON COLUMN "BA_GUARANTEE_PERSON"."POSTCODE" IS '邮编';
COMMENT ON COLUMN "BA_GUARANTEE_PERSON"."ID_CARD" IS '担保人身份证号';
REM Primary key BA_GUARANTEE_PERSON
ALTER TABLE "BA_GUARANTEE_PERSON" ADD CONSTRAINT "BA_GUARANTEE_PERSON_PK" PRIMARY KEY (BGP_ID) USING INDEX;
/

REM Create Table BA_OWNER
CREATE TABLE "BA_OWNER" (
	"OWNER_NAME" VARCHAR2(2000 CHAR) NULL,
	"OWNER_SHOW_NAME" VARCHAR2(200 CHAR) NULL,
	"REG_FUNDS" NUMBER(18,2) NULL,
	"SHOW_REG_FUNDS" VARCHAR2(200 CHAR) NULL,
	"ENT_INDUSTRY" VARCHAR2(200 CHAR) NULL,
	"INTRO" VARCHAR2(4000 CHAR) NULL,
	"CREATOR" VARCHAR2(80 CHAR) NULL,
	"CREATE_TIME" DATE NULL,
	"UPDATER" VARCHAR2(80 CHAR) NULL,
	"UPDATE_TIME" DATE NULL,
	"BO_ID" NUMBER NOT NULL,
	"OWNER_NATURE" VARCHAR2(200 CHAR) NULL,
	"OWNER_STRENGTH" VARCHAR2(200 CHAR) NULL,
	"OWNER_QUALITY" VARCHAR2(200 CHAR) NULL,
	"REGISTERED_DATE" DATE NULL,
	"REG_YEARS" NUMBER(4) NULL
);
COMMENT ON TABLE "BA_OWNER" IS 'DA_建设单位';
REM Column comments BA_OWNER
COMMENT ON COLUMN "BA_OWNER"."OWNER_NAME" IS '企业（业主）名称';
COMMENT ON COLUMN "BA_OWNER"."OWNER_SHOW_NAME" IS '业主展示名称';
COMMENT ON COLUMN "BA_OWNER"."REG_FUNDS" IS '注册资金';
COMMENT ON COLUMN "BA_OWNER"."SHOW_REG_FUNDS" IS '展示注册资金';
COMMENT ON COLUMN "BA_OWNER"."ENT_INDUSTRY" IS '所属行业';
COMMENT ON COLUMN "BA_OWNER"."INTRO" IS '企业介绍';
COMMENT ON COLUMN "BA_OWNER"."CREATOR" IS '创建人';
COMMENT ON COLUMN "BA_OWNER"."CREATE_TIME" IS '创建时间';
COMMENT ON COLUMN "BA_OWNER"."UPDATER" IS '更新人';
COMMENT ON COLUMN "BA_OWNER"."UPDATE_TIME" IS '更新时间';
COMMENT ON COLUMN "BA_OWNER"."BO_ID" IS '项目业主数据库表id';
COMMENT ON COLUMN "BA_OWNER"."OWNER_NATURE" IS '企业性质';
COMMENT ON COLUMN "BA_OWNER"."OWNER_STRENGTH" IS '企业实力';
COMMENT ON COLUMN "BA_OWNER"."OWNER_QUALITY" IS '企业质量';
COMMENT ON COLUMN "BA_OWNER"."REGISTERED_DATE" IS '注册时间（成立时间）';
COMMENT ON COLUMN "BA_OWNER"."REG_YEARS" IS '注册年限';
REM Primary key BA_OWNER
ALTER TABLE "BA_OWNER" ADD CONSTRAINT "BA_OWNER_PK" PRIMARY KEY (BO_ID) USING INDEX;
/

REM Create Table BA_PRJ_ENGINEER
CREATE TABLE "BA_PRJ_ENGINEER" (
	"BPE_ID" NUMBER NOT NULL,
	"NAME" VARCHAR2(2000 CHAR) NULL,
	"ADDRESS" VARCHAR2(2000 CHAR) NULL,
	"PRJ_START_TIME" DATE NULL,
	"PRJ_END_TIME" DATE NULL,
	"ENG_TYPE" VARCHAR2(200 CHAR) NULL,
	"AREA" NUMBER(18,2) NULL,
	"UPDATE_TIME" DATE NULL,
	"ALL_ORG" VARCHAR2(2000 CHAR) NULL,
	"DESIGN_ORG" VARCHAR2(2000 CHAR) NULL,
	"MGR_ORG" VARCHAR2(2000 CHAR) NULL,
	"CREATOR" VARCHAR2(80 CHAR) NULL,
	"CREATE_TIME" DATE NULL,
	"UPDATER" VARCHAR2(80 CHAR) NULL,
	"PRO_INTRO" VARCHAR2(2000 CHAR) NULL,
	"ENG_SHOW_NAME" VARCHAR2(200 CHAR) NULL,
	"ENG_SHOW_ADDRESS" VARCHAR2(200 CHAR) NULL,
	"SHOW_MGR_ORG" VARCHAR2(200 CHAR) NULL,
	"SHOW_DESIGN_ORG" VARCHAR2(200 CHAR) NULL,
	"SHOW_AREA" VARCHAR2(200 CHAR) NULL,
	"DESIGN_ORG_LEVEL" VARCHAR2(200 CHAR) NULL,
	"MGR_ORG_LEVEL" VARCHAR2(200 CHAR) NULL,
	"SHOW_ALL_ORG" VARCHAR2(200 CHAR) NULL,
	"MGR_REAL_NAME" VARCHAR2(2000 CHAR) NULL,
	"MGR_SHOW_NAME" VARCHAR2(80 CHAR) NULL,
	"QUALIFICATION" VARCHAR2(200 CHAR) NULL,
	"MGR_INTRO" VARCHAR2(2000 CHAR) NULL,
	"MGR_GENDER" VARCHAR2(20 CHAR) NULL,
	"MGR_AGE" NUMBER NULL,
	"MGR_SHOW_AGE" VARCHAR2(80 CHAR) NULL
);
COMMENT ON TABLE "BA_PRJ_ENGINEER" IS '项目工程-基础表';
REM Column comments BA_PRJ_ENGINEER
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."BPE_ID" IS '项目工程的基础数据库id';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."NAME" IS '工程名称';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."ADDRESS" IS '建设地址';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."PRJ_START_TIME" IS '开工时间';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."PRJ_END_TIME" IS '竣工时间';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."ENG_TYPE" IS '工程类别';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."AREA" IS '建筑面积';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."UPDATE_TIME" IS '更新时间';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."ALL_ORG" IS '总包单位';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."DESIGN_ORG" IS '设计单位';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."MGR_ORG" IS '监理单位';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."CREATOR" IS '创建人';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."CREATE_TIME" IS '加入时间';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."UPDATER" IS '更新人';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."PRO_INTRO" IS '项目介绍';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."ENG_SHOW_NAME" IS '项目展示名称';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."ENG_SHOW_ADDRESS" IS '展示建设地址';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."SHOW_MGR_ORG" IS '展示监理单位';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."SHOW_DESIGN_ORG" IS '展示设计单位';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."SHOW_AREA" IS '展示建筑面积';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."DESIGN_ORG_LEVEL" IS '设计单位等级';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."MGR_ORG_LEVEL" IS '监理单位等级';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."SHOW_ALL_ORG" IS '总包单位展示名称';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."MGR_REAL_NAME" IS '项目经理真实姓名';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."MGR_SHOW_NAME" IS '项目经理展示名';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."QUALIFICATION" IS '从业资质';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."MGR_INTRO" IS '项目经理介绍';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."MGR_GENDER" IS '项目经理性别';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."MGR_AGE" IS '项目经理年龄';
COMMENT ON COLUMN "BA_PRJ_ENGINEER"."MGR_SHOW_AGE" IS '项目经理展示年龄';
REM Primary key BA_PRJ_ENGINEER
ALTER TABLE "BA_PRJ_ENGINEER" ADD CONSTRAINT "BA_PRJ_ENGINEER_PK" PRIMARY KEY (BPE_ID) USING INDEX;
/

REM Create Table BA_PRJ_MGR_ORG
CREATE TABLE "BA_PRJ_MGR_ORG" (
	"BPMO_ID" NUMBER NOT NULL,
	"ORG_NAME" VARCHAR2(2000 CHAR) NULL,
	"SHOW_ORG_NAME" VARCHAR2(200 CHAR) NULL,
	"REGISTERED_FUND" NUMBER NULL,
	"REGISTERED_DATE" DATE NULL,
	"LEGAL_ID_CARD" VARCHAR2(2000 CHAR) NULL,
	"LEGAL_PERSON_NAME" VARCHAR2(2000 CHAR) NULL,
	"LEGAL_PERSON_SHOW_NAME" VARCHAR2(80 CHAR) NULL,
	"MOBILE" VARCHAR2(2000 CHAR) NULL,
	"EMAIL" VARCHAR2(2000 CHAR) NULL,
	"ADDRESS" VARCHAR2(2000 CHAR) NULL,
	"CREATOR" VARCHAR2(80 CHAR) NULL,
	"CREATE_TIME" DATE NULL,
	"UPDATER" VARCHAR2(80 CHAR) NULL,
	"UPDATE_TIME" DATE NULL,
	"INTRO" VARCHAR2(2000 CHAR) NULL,
	"SHOW_ADDRESS" VARCHAR2(400 CHAR) NULL,
	"FAX" VARCHAR2(2000 CHAR) NULL,
	"WCHAT" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_NAME" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_ID_CARD" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_MOBILE" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_FAX" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_EMAIL" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_WCHAT" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_ADDRESS" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_SHOW_ADDRESS" VARCHAR2(400 CHAR) NULL,
	"LINKMAN_SHOW_NAME" VARCHAR2(80 CHAR) NULL,
	"SOCIAL_CREDIT_CODE" VARCHAR2(2000 CHAR) NULL,
	"SHOW_SOCIAL_CREDIT_CODE" VARCHAR2(80 CHAR) NULL,
	"REGISTERED_SHOW_FUND1" NUMBER NULL,
	"REGISTERED_SHOW_FUND" VARCHAR2(160 CHAR) NULL,
	"INDUSTRY" VARCHAR2(200 CHAR) NULL,
	"WORK_ADDRESS" VARCHAR2(400 CHAR) NULL,
	"SHOW_WORK_ADDRESS" VARCHAR2(400 CHAR) NULL,
	"SHAREHOLDER_INFO" VARCHAR2(800 CHAR) NULL,
	"SHOW_SHAREHOLDER_INFO" VARCHAR2(800 CHAR) NULL,
	"OPERATE_AREA" VARCHAR2(200 CHAR) NULL,
	"OTHER_INFO" VARCHAR2(4000 CHAR) NULL,
	"LINKMAN_QQ" VARCHAR2(2000 CHAR) NULL,
	"BORROWER_AREA" NUMBER NULL,
	"QQ" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_RELATION" VARCHAR2(2000 CHAR) NULL
);
COMMENT ON TABLE "BA_PRJ_MGR_ORG" IS '借款机构-基础表';
REM Column comments BA_PRJ_MGR_ORG
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."BPMO_ID" IS '借款机构id';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."ORG_NAME" IS '机构名';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."SHOW_ORG_NAME" IS '展示名';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."REGISTERED_FUND" IS '注册资金';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."REGISTERED_DATE" IS '注册时间（成立时间）';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."LEGAL_ID_CARD" IS '法定代表人身份证号';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."LEGAL_PERSON_NAME" IS '法定代表人姓名';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."LEGAL_PERSON_SHOW_NAME" IS '法定代表人展示姓名';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."MOBILE" IS '手机号';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."EMAIL" IS '邮箱';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."ADDRESS" IS '注册地址';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."CREATOR" IS '创建人';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."CREATE_TIME" IS '创建时间';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."UPDATER" IS '更新人';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."UPDATE_TIME" IS '更新时间';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."INTRO" IS '介绍';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."SHOW_ADDRESS" IS '注册显示地址';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."FAX" IS '传真';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."WCHAT" IS '微信号';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."LINKMAN_NAME" IS '联系人姓名';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."LINKMAN_ID_CARD" IS '联系人身份证号';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."LINKMAN_MOBILE" IS '联系人手机号';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."LINKMAN_FAX" IS '联系人传真';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."LINKMAN_EMAIL" IS '联系人电子邮箱';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."LINKMAN_WCHAT" IS '联系人微信号';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."LINKMAN_ADDRESS" IS '联系人送达地址';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."LINKMAN_SHOW_ADDRESS" IS '展示联系人送达地址';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."LINKMAN_SHOW_NAME" IS '展示联系人姓名';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."SOCIAL_CREDIT_CODE" IS '统一社会信用代码';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."SHOW_SOCIAL_CREDIT_CODE" IS '展示统一社会信用代码';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."INDUSTRY" IS '所属行业';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."WORK_ADDRESS" IS '办公地址';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."SHOW_WORK_ADDRESS" IS '展示办公地址';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."SHAREHOLDER_INFO" IS '股东信息';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."SHOW_SHAREHOLDER_INFO" IS '展示股东信息';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."OPERATE_AREA" IS '经营区域';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."OTHER_INFO" IS '其他信息';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."LINKMAN_QQ" IS '联系人QQ号';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."BORROWER_AREA" IS '借款人所在地区（1-华北、2-东北、3-华南、4-华中、5-西部）';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."QQ" IS '借款人QQ';
COMMENT ON COLUMN "BA_PRJ_MGR_ORG"."LINKMAN_RELATION" IS '借款人和联系人的关系';
REM Primary key BA_PRJ_MGR_ORG
ALTER TABLE "BA_PRJ_MGR_ORG" ADD CONSTRAINT "BA_PRJ_MGR_ORG_PK" PRIMARY KEY (BPMO_ID) USING INDEX;
/

REM Create Table BA_PRJ_MGR_PERSON
CREATE TABLE "BA_PRJ_MGR_PERSON" (
	"BPMP_ID" NUMBER NOT NULL,
	"REAL_NAME" VARCHAR2(2000 CHAR) NULL,
	"SHOW_NAME" VARCHAR2(80 CHAR) NULL,
	"ID_CARD" VARCHAR2(2000 CHAR) NULL,
	"MOBILE" VARCHAR2(2000 CHAR) NULL,
	"EMAIL" VARCHAR2(2000 CHAR) NULL,
	"ADDRESS" VARCHAR2(2000 CHAR) NULL,
	"WORK_YEARS" NUMBER(4) NULL,
	"CREATOR" VARCHAR2(80 CHAR) NULL,
	"CREATE_TIME" DATE NULL,
	"UPDATER" VARCHAR2(80 CHAR) NULL,
	"UPDATE_TIME" DATE NULL,
	"INTRO" VARCHAR2(4000 CHAR) NULL,
	"QUALIFICATION" VARCHAR2(80 CHAR) NULL,
	"COMPANY" VARCHAR2(2000 CHAR) NULL,
	"POSITION" VARCHAR2(2000 CHAR) NULL,
	"AGE" NUMBER(3) NULL,
	"ID_CARD_ADDRESS_PROV" VARCHAR2(400 CHAR) NULL,
	"ID_CARD_ADDRESS_CITY" VARCHAR2(400 CHAR) NULL,
	"AREA" NUMBER(18,2) NULL,
	"GRM_AREA" NUMBER(18,2) NULL,
	"GRM_YEARS" NUMBER(4) NULL,
	"SHOW_AGE" VARCHAR2(80 CHAR) NULL,
	"GENDER" VARCHAR2(80 CHAR) NULL,
	"WCHAT" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_NAME" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_ID_CARD" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_MOBILE" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_FAX" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_EMAIL" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_WCHAT" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_ADDRESS" VARCHAR2(2000 CHAR) NULL,
	"FAX" VARCHAR2(400 CHAR) NULL,
	"LINKMAN_SHOW_ADDRESS" VARCHAR2(400 CHAR) NULL,
	"LINKMAN_SHOW_NAME" VARCHAR2(80 CHAR) NULL,
	"SHOW_ADDRESS" VARCHAR2(400 CHAR) NULL,
	"INDUSTRY" VARCHAR2(200 CHAR) NULL,
	"WORK_NATURE" VARCHAR2(2000 CHAR) NULL,
	"OTHER_INFO" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_QQ" VARCHAR2(2000 CHAR) NULL,
	"BORROWER_AREA" NUMBER NULL,
	"QQ" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_RELATION" VARCHAR2(2000 CHAR) NULL
);
COMMENT ON TABLE "BA_PRJ_MGR_PERSON" IS '借款人-基础表';
REM Column comments BA_PRJ_MGR_PERSON
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."BPMP_ID" IS '借款人id';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."REAL_NAME" IS '真实姓名';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."SHOW_NAME" IS '展示名';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."ID_CARD" IS '身份证号';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."MOBILE" IS '手机号';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."EMAIL" IS '邮箱';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."ADDRESS" IS '现住址';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."WORK_YEARS" IS '从业经历（年限）';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."CREATOR" IS '创建人';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."CREATE_TIME" IS '创建时间';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."UPDATER" IS '更新人';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."UPDATE_TIME" IS '更新时间';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."INTRO" IS '介绍';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."QUALIFICATION" IS '从业资质（删，但为兼容老数据表中暂不删）';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."COMPANY" IS '工作单位';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."POSITION" IS '现任职务';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."AGE" IS '年龄';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."ID_CARD_ADDRESS_PROV" IS '身份证所在省份';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."ID_CARD_ADDRESS_CITY" IS '身份证所在城市';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."AREA" IS '参建建筑面积（删，但为兼容老数据表中暂不删）';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."GRM_AREA" IS '担任项目经理实施面积（删，但为兼容老数据表中暂不删）';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."GRM_YEARS" IS '担任项目经理工作年限（删，但为兼容老数据表中暂不删）';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."SHOW_AGE" IS '展示年龄';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."GENDER" IS '姓别,0女，1男';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."WCHAT" IS '微信号';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."LINKMAN_NAME" IS '联系人姓名';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."LINKMAN_ID_CARD" IS '联系人身份证号';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."LINKMAN_MOBILE" IS '联系人手机号';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."LINKMAN_FAX" IS '联系人传真';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."LINKMAN_EMAIL" IS '联系人电子邮箱';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."LINKMAN_WCHAT" IS '联系人微信号';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."LINKMAN_ADDRESS" IS '联系人送达地址';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."FAX" IS '传真';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."LINKMAN_SHOW_ADDRESS" IS '展示联系人地址';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."LINKMAN_SHOW_NAME" IS '展示联系人姓名';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."SHOW_ADDRESS" IS '展示地址';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."WORK_NATURE" IS '工作性质';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."OTHER_INFO" IS '其他信息';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."LINKMAN_QQ" IS '联系人QQ号';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."BORROWER_AREA" IS '借款人所在地区（1-华北、2-东北、3-华南、4-华中、5-西部）';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."QQ" IS '借款人QQ';
COMMENT ON COLUMN "BA_PRJ_MGR_PERSON"."LINKMAN_RELATION" IS '借款人和联系人的关系';
REM Primary key BA_PRJ_MGR_PERSON
ALTER TABLE "BA_PRJ_MGR_PERSON" ADD CONSTRAINT "BA_PRJ_MGR_PERSON_PK" PRIMARY KEY (BPMP_ID) USING INDEX;
/

REM Create Table BA_PRJ_MORTGAGE
CREATE TABLE "BA_PRJ_MORTGAGE" (
	"BPM_ID" NUMBER NOT NULL,
	"M_TYPE" NUMBER DEFAULT 2 NOT NULL,
	"CONTENT" <Unknown> NOT NULL,
	"EVALUATION" NUMBER NOT NULL,
	"OWNER_NAME" <Unknown> NOT NULL,
	"OWNER_SHOW_NAME" <Unknown> NOT NULL,
	"OWNER_ID_NO" <Unknown> NULL,
	"LINK_MAN" <Unknown> NULL,
	"LINK_MOBILE" <Unknown> NULL,
	"LINK_ADDRESS" <Unknown> NULL,
	"CREATOR" <Unknown> NULL,
	"CREATE_TIME" DATE NULL,
	"UPDATER" <Unknown> NULL,
	"UPDATE_TIME" DATE NULL,
	"REMARK" <Unknown> NULL
);
COMMENT ON TABLE "BA_PRJ_MORTGAGE" IS '抵押物-基础表';
REM Column comments BA_PRJ_MORTGAGE
COMMENT ON COLUMN "BA_PRJ_MORTGAGE"."BPM_ID" IS '抵押物基础表id';
COMMENT ON COLUMN "BA_PRJ_MORTGAGE"."M_TYPE" IS '抵押方式 1-抵押，2-质押';
COMMENT ON COLUMN "BA_PRJ_MORTGAGE"."CONTENT" IS '抵押物内容';
COMMENT ON COLUMN "BA_PRJ_MORTGAGE"."EVALUATION" IS '抵押物估值';
COMMENT ON COLUMN "BA_PRJ_MORTGAGE"."OWNER_NAME" IS '抵押人姓名或者机构名称';
COMMENT ON COLUMN "BA_PRJ_MORTGAGE"."OWNER_SHOW_NAME" IS '抵押人展示名称';
COMMENT ON COLUMN "BA_PRJ_MORTGAGE"."OWNER_ID_NO" IS '抵押人证件号（身份证号或社会信用代码证号）';
COMMENT ON COLUMN "BA_PRJ_MORTGAGE"."LINK_MAN" IS '联系人姓名';
COMMENT ON COLUMN "BA_PRJ_MORTGAGE"."LINK_MOBILE" IS '联系人手机号码';
COMMENT ON COLUMN "BA_PRJ_MORTGAGE"."LINK_ADDRESS" IS '联系人地址';
COMMENT ON COLUMN "BA_PRJ_MORTGAGE"."CREATOR" IS '创建人';
COMMENT ON COLUMN "BA_PRJ_MORTGAGE"."CREATE_TIME" IS '创建时间';
COMMENT ON COLUMN "BA_PRJ_MORTGAGE"."UPDATER" IS '更新人';
COMMENT ON COLUMN "BA_PRJ_MORTGAGE"."UPDATE_TIME" IS '更新时间';
COMMENT ON COLUMN "BA_PRJ_MORTGAGE"."REMARK" IS '备注';
REM Primary key BA_PRJ_MORTGAGE
ALTER TABLE "BA_PRJ_MORTGAGE" ADD CONSTRAINT "SYS_C0026123" PRIMARY KEY (BPM_ID) USING INDEX;
/

REM Create Table CA_DOC_SIGN
CREATE TABLE "CA_DOC_SIGN" (
	"DOC_SIGN_ID" NUMBER NOT NULL,
	"NAME" VARCHAR2(80 CHAR) NOT NULL,
	"REMARK" VARCHAR2(400 CHAR) NULL,
	"CA_ID" VARCHAR2(40 CHAR) NOT NULL,
	"CREATE_TIME" DATE NOT NULL,
	"EXPIRY_TIME" DATE NOT NULL,
	"SIGNED_TIME" DATE NULL,
	"STATUS" VARCHAR2(40 CHAR) NOT NULL
);
REM Column comments CA_DOC_SIGN
COMMENT ON COLUMN "CA_DOC_SIGN"."DOC_SIGN_ID" IS '主键ID';
COMMENT ON COLUMN "CA_DOC_SIGN"."NAME" IS '实例的名字';
COMMENT ON COLUMN "CA_DOC_SIGN"."REMARK" IS '备注';
COMMENT ON COLUMN "CA_DOC_SIGN"."CA_ID" IS 'CA返回的ID';
COMMENT ON COLUMN "CA_DOC_SIGN"."CREATE_TIME" IS '创建时间';
COMMENT ON COLUMN "CA_DOC_SIGN"."EXPIRY_TIME" IS '过期时间';
COMMENT ON COLUMN "CA_DOC_SIGN"."SIGNED_TIME" IS '签署时间';
COMMENT ON COLUMN "CA_DOC_SIGN"."STATUS" IS '签署状态';
REM Primary key CA_DOC_SIGN
ALTER TABLE "CA_DOC_SIGN" ADD CONSTRAINT "CA_DOC_SIGN_PK" PRIMARY KEY (DOC_SIGN_ID) USING INDEX;
REM Index CA_DOC_SIGN
CREATE INDEX "CA_DOC_SIGN_UK1" ON "CA_DOC_SIGN" (NAME)
/

REM Create Table CA_SIGN_TOKEN
REM Depend on table(s)
REM [CA_DOC_SIGN]
CREATE TABLE "CA_SIGN_TOKEN" (
	"SIGN_TOKEN_ID" NUMBER NOT NULL,
	"DOC_SIGN_ID" NUMBER NOT NULL,
	"MOBILE" VARCHAR2(40 CHAR) NOT NULL,
	"ID_NO_TYPE" VARCHAR2(40 CHAR) NOT NULL,
	"ID_NO" VARCHAR2(80 CHAR) NOT NULL,
	"LINK" VARCHAR2(1000 CHAR) NOT NULL,
	"STATUS" VARCHAR2(40 CHAR) NOT NULL
);
REM Column comments CA_SIGN_TOKEN
COMMENT ON COLUMN "CA_SIGN_TOKEN"."SIGN_TOKEN_ID" IS '主键ID';
COMMENT ON COLUMN "CA_SIGN_TOKEN"."DOC_SIGN_ID" IS '关联的实例ID';
COMMENT ON COLUMN "CA_SIGN_TOKEN"."MOBILE" IS '验证手机号码';
COMMENT ON COLUMN "CA_SIGN_TOKEN"."ID_NO_TYPE" IS '证件类型';
COMMENT ON COLUMN "CA_SIGN_TOKEN"."ID_NO" IS '证件号';
COMMENT ON COLUMN "CA_SIGN_TOKEN"."LINK" IS '签署链接';
COMMENT ON COLUMN "CA_SIGN_TOKEN"."STATUS" IS '签署方状态';
REM Primary key CA_SIGN_TOKEN
ALTER TABLE "CA_SIGN_TOKEN" ADD CONSTRAINT "CA_SIGN_TOKEN_PK" PRIMARY KEY (SIGN_TOKEN_ID) USING INDEX;
REM Foreign keys CA_SIGN_TOKEN
ALTER TABLE "CA_SIGN_TOKEN" ADD CONSTRAINT "CA_SIGN_TOKEN_FK1" FOREIGN KEY (DOC_SIGN_ID) REFERENCES "CA_DOC_SIGN" (DOC_SIGN_ID) ON DELETE CASCADE;
/

REM Create Table CM_NOTICE
CREATE TABLE "CM_NOTICE" (
	"CN_ID" NUMBER NOT NULL,
	"TYPE" NUMBER NOT NULL,
	"TITLE" VARCHAR2(3200 CHAR) NOT NULL,
	"KEY" VARCHAR2(3200 CHAR) NULL,
	"STATUS" NUMBER DEFAULT 0 NOT NULL,
	"RECOMMEND" NUMBER DEFAULT 0 NOT NULL,
	"ABSTRACT_CONTENT" VARCHAR2(4000 CHAR) NULL,
	"PRIORITY" NUMBER NULL,
	"CREATOR" VARCHAR2(1280 CHAR) NOT NULL,
	"CREATE_TIME" DATE NOT NULL,
	"UPDATER" VARCHAR2(1280 CHAR) NOT NULL,
	"UPDATE_TIME" DATE NOT NULL,
	"CONTENT" CLOB NULL,
	"TOP_TIME" DATE NULL,
	"PUBLISH_TIME" DATE NULL,
	"REVOKE_TIME" DATE NULL,
	"REVOKE_USER_NAME" VARCHAR2(160 CHAR) NULL,
	"PUBLISHER" VARCHAR2(160 CHAR) NULL
);
COMMENT ON TABLE "CM_NOTICE" IS '平台信息表';
REM Column comments CM_NOTICE
COMMENT ON COLUMN "CM_NOTICE"."CN_ID" IS '公告id';
COMMENT ON COLUMN "CM_NOTICE"."TYPE" IS '类型。1:还款公告； 2:平台公告； 3:媒体报道； 4:平台动态； 5:法律法规； 6:风险教育，借贷策略； 7:网贷知识；';
COMMENT ON COLUMN "CM_NOTICE"."TITLE" IS '公告标题';
COMMENT ON COLUMN "CM_NOTICE"."KEY" IS '关键字';
COMMENT ON COLUMN "CM_NOTICE"."STATUS" IS '公告状态。0，未提交。1，待审核。2，上线。3，撤下（下架：指从已发布状态去掉，用于历史追踪）。';
COMMENT ON COLUMN "CM_NOTICE"."RECOMMEND" IS '是否推荐。0，不推荐。1，推荐。';
COMMENT ON COLUMN "CM_NOTICE"."ABSTRACT_CONTENT" IS '内容摘要';
COMMENT ON COLUMN "CM_NOTICE"."PRIORITY" IS '优先级，用于设定上下移动';
COMMENT ON COLUMN "CM_NOTICE"."CREATOR" IS '创建者';
COMMENT ON COLUMN "CM_NOTICE"."CREATE_TIME" IS '创建时间';
COMMENT ON COLUMN "CM_NOTICE"."UPDATER" IS '更新者';
COMMENT ON COLUMN "CM_NOTICE"."UPDATE_TIME" IS '更新时间';
COMMENT ON COLUMN "CM_NOTICE"."CONTENT" IS '公告内容';
COMMENT ON COLUMN "CM_NOTICE"."TOP_TIME" IS '置顶时间，当置顶是将priority值设为1';
COMMENT ON COLUMN "CM_NOTICE"."PUBLISH_TIME" IS '发布时间';
COMMENT ON COLUMN "CM_NOTICE"."REVOKE_TIME" IS '撤下时间，下架时间';
COMMENT ON COLUMN "CM_NOTICE"."REVOKE_USER_NAME" IS '撤下者';
COMMENT ON COLUMN "CM_NOTICE"."PUBLISHER" IS '批准上线者';
REM Primary key CM_NOTICE
ALTER TABLE "CM_NOTICE" ADD CONSTRAINT "CM_NOTICE_PK" PRIMARY KEY (CN_ID) USING INDEX;
/

REM Create Table CM_NOTICE1
CREATE TABLE "CM_NOTICE1" (
	"PUBLISHER" VARCHAR2(80) NULL,
	"TOP_TIME" DATE NULL,
	"ABSTRACT_CONTENT" VARCHAR2(4000) NULL,
	"SUBMITTER" VARCHAR2(80) NULL,
	"PRIORITY" NUMBER NULL,
	"UPDATE_TIME" DATE NULL,
	"PUBLISH_TIME" DATE NULL,
	"STATUS" NUMBER NULL,
	"RECOMMEND" NUMBER NOT NULL,
	"SUBMIT_TIME" DATE NULL,
	"REVOKE_USER_NAME" VARCHAR2(80) NULL,
	"CREATOR" VARCHAR2(640) NULL,
	"TITLE" VARCHAR2(1600) NULL,
	"CN_ID" NUMBER NOT NULL,
	"CREATE_TIME" DATE NULL,
	"CONTENT" CLOB NULL,
	"UPDATER" VARCHAR2(640) NULL,
	"REVOKE_TIME" DATE NULL,
	"TYPE" NUMBER NULL,
	"KEY" VARCHAR2(1600) NULL
);
REM Column comments CM_NOTICE1
COMMENT ON COLUMN "CM_NOTICE1"."PUBLISHER" IS '批准上线者';
COMMENT ON COLUMN "CM_NOTICE1"."TOP_TIME" IS '置顶时间，当置顶是将priority值设为1';
COMMENT ON COLUMN "CM_NOTICE1"."ABSTRACT_CONTENT" IS '内容摘要';
COMMENT ON COLUMN "CM_NOTICE1"."SUBMITTER" IS '提交者';
COMMENT ON COLUMN "CM_NOTICE1"."PRIORITY" IS '优先级，用于设定上下移动';
COMMENT ON COLUMN "CM_NOTICE1"."UPDATE_TIME" IS '更新时间';
COMMENT ON COLUMN "CM_NOTICE1"."PUBLISH_TIME" IS '发布时间';
COMMENT ON COLUMN "CM_NOTICE1"."STATUS" IS '公告状态。0，未提交。1，待审核。2，上线。3，撤下（下架：指从已发布状态去掉，用于历史追踪）。';
COMMENT ON COLUMN "CM_NOTICE1"."RECOMMEND" IS '是否推荐。0，不推荐。1，推荐。';
COMMENT ON COLUMN "CM_NOTICE1"."SUBMIT_TIME" IS '提交审核时间';
COMMENT ON COLUMN "CM_NOTICE1"."REVOKE_USER_NAME" IS '撤下者';
COMMENT ON COLUMN "CM_NOTICE1"."CREATOR" IS '创建者';
COMMENT ON COLUMN "CM_NOTICE1"."TITLE" IS '公告标题';
COMMENT ON COLUMN "CM_NOTICE1"."CN_ID" IS '公告id';
COMMENT ON COLUMN "CM_NOTICE1"."CREATE_TIME" IS '创建时间';
COMMENT ON COLUMN "CM_NOTICE1"."CONTENT" IS '公告内容';
COMMENT ON COLUMN "CM_NOTICE1"."UPDATER" IS '更新者';
COMMENT ON COLUMN "CM_NOTICE1"."REVOKE_TIME" IS '撤下时间，下架时间';
COMMENT ON COLUMN "CM_NOTICE1"."TYPE" IS '类型。1:还款公告； 2:平台公告； 3:媒体报道； 4:平台动态； 5:互联网金融； 6:政策法规； 7:投资策略； 8:工程贷； 9:债权转让； 10:班汇宝； 11:班汇通高手； 12:社会责任； 13:工程金融； 14:投资人说; 15:公司简介； 16:管理团队； 17:顾问团队； 18:项目评级体系； 19:合作伙伴； 20:招贤纳士； 21:联系我们； 22:平台原理； 23:注册流程； 24:投资流程； 25:风险提示； 26:注册协议； 27:隐私条款； 28:免责声明 ； 29:账户安全； 30:账户管理; 31:交易管理。';
COMMENT ON COLUMN "CM_NOTICE1"."KEY" IS '关键字';
REM Primary key CM_NOTICE1
ALTER TABLE "CM_NOTICE1" ADD CONSTRAINT "CM_NOTICE1_PK" PRIMARY KEY (CN_ID) USING INDEX;
/

REM Create Table CRM_INVESTOR
CREATE TABLE "CRM_INVESTOR" (
	"CI_ID" NUMBER NOT NULL,
	"AU_ID" NUMBER NULL,
	"REAL_NAME" VARCHAR2(1280 CHAR) NULL,
	"MOBILE" VARCHAR2(1280 CHAR) NOT NULL,
	"DATEPOINT" DATE NOT NULL,
	"OP_USER" VARCHAR2(1280 CHAR) NOT NULL,
	"REMARK" VARCHAR2(4000 CHAR) NULL,
	"PR_LEVEL" NUMBER DEFAULT 0 NOT NULL,
	"ORIGIN_TYPE" VARCHAR2(80 CHAR) NULL,
	"COMPANY" VARCHAR2(400 CHAR) NULL,
	"POSITION" VARCHAR2(400 CHAR) NULL,
	"GENDER" NUMBER DEFAULT 0 NOT NULL,
	"BIRTH" DATE NULL,
	"CITY" VARCHAR2(160 CHAR) NULL,
	"ACTION" NUMBER NULL,
	"ACTION_USER" VARCHAR2(640 CHAR) NULL,
	"ACTION_DATE" DATE NULL,
	"ACTION_REMARK" VARCHAR2(3200 CHAR) NULL
);
REM Column comments CRM_INVESTOR
COMMENT ON COLUMN "CRM_INVESTOR"."CI_ID" IS '主键';
COMMENT ON COLUMN "CRM_INVESTOR"."AU_ID" IS '对应的投资人ID';
COMMENT ON COLUMN "CRM_INVESTOR"."REAL_NAME" IS '姓名';
COMMENT ON COLUMN "CRM_INVESTOR"."MOBILE" IS '手机号码';
COMMENT ON COLUMN "CRM_INVESTOR"."DATEPOINT" IS '导入时间';
COMMENT ON COLUMN "CRM_INVESTOR"."OP_USER" IS '执行导入的后台用户';
COMMENT ON COLUMN "CRM_INVESTOR"."REMARK" IS '备注';
COMMENT ON COLUMN "CRM_INVESTOR"."PR_LEVEL" IS '客户的级别';
COMMENT ON COLUMN "CRM_INVESTOR"."ORIGIN_TYPE" IS '客户来源：0鲁班弹窗、1鲁班金融组织会议、2鲁班 BIM 会议、3中施
协,4新中大，9其他';
COMMENT ON COLUMN "CRM_INVESTOR"."COMPANY" IS '工作单位';
COMMENT ON COLUMN "CRM_INVESTOR"."POSITION" IS '职务';
COMMENT ON COLUMN "CRM_INVESTOR"."GENDER" IS '性别(1-男 2-女 0-未知)';
COMMENT ON COLUMN "CRM_INVESTOR"."BIRTH" IS '年龄';
COMMENT ON COLUMN "CRM_INVESTOR"."CITY" IS '所在城市';
COMMENT ON COLUMN "CRM_INVESTOR"."ACTION" IS '最新跟进状态';
COMMENT ON COLUMN "CRM_INVESTOR"."ACTION_USER" IS '最新跟进人';
COMMENT ON COLUMN "CRM_INVESTOR"."ACTION_DATE" IS '最新跟进时间';
COMMENT ON COLUMN "CRM_INVESTOR"."ACTION_REMARK" IS '最新跟进内容';
REM Primary key CRM_INVESTOR
ALTER TABLE "CRM_INVESTOR" ADD CONSTRAINT "CRM_INVESTOR_PK" PRIMARY KEY (CI_ID) USING INDEX;
REM Index CRM_INVESTOR
CREATE INDEX "CRM_INVESTOR_UK1" ON "CRM_INVESTOR" (MOBILE)
/

REM Create Table CRM_INVESTOR_MGR
REM Depend on table(s)
REM [CRM_INVESTOR]
CREATE TABLE "CRM_INVESTOR_MGR" (
	"CI_ID" NUMBER NOT NULL,
	"OP_USER" VARCHAR2(1280 CHAR) NOT NULL,
	"DATEPOINT" DATE NOT NULL,
	"DATEPOINT2" DATE NOT NULL,
	"U_NAME" VARCHAR2(160 CHAR) NULL
);
REM Column comments CRM_INVESTOR_MGR
COMMENT ON COLUMN "CRM_INVESTOR_MGR"."CI_ID" IS '投资人客户ID';
COMMENT ON COLUMN "CRM_INVESTOR_MGR"."OP_USER" IS '客户经理账号';
COMMENT ON COLUMN "CRM_INVESTOR_MGR"."DATEPOINT" IS '有效起始时间';
COMMENT ON COLUMN "CRM_INVESTOR_MGR"."DATEPOINT2" IS '有效结束时间';
COMMENT ON COLUMN "CRM_INVESTOR_MGR"."U_NAME" IS '客户经理账号';
REM Primary key CRM_INVESTOR_MGR
ALTER TABLE "CRM_INVESTOR_MGR" ADD CONSTRAINT "CRM_INVESTOR_MGR_PK" PRIMARY KEY (CI_ID) USING INDEX;
REM Foreign keys CRM_INVESTOR_MGR
ALTER TABLE "CRM_INVESTOR_MGR" ADD CONSTRAINT "CRM_INVESTOR_MGR_FK1" FOREIGN KEY (CI_ID) REFERENCES "CRM_INVESTOR" (CI_ID) ON DELETE CASCADE;
/

REM Create Table CRM_INVESTOR_REMARK
CREATE TABLE "CRM_INVESTOR_REMARK" (
	"CI_ID" NUMBER NOT NULL,
	"OP_USER" VARCHAR2(80 CHAR) NOT NULL,
	"DATEPOINT" DATE NOT NULL,
	"REMARK" VARCHAR2(4000 CHAR) NULL,
	"ACTION" NUMBER NULL
);
REM Column comments CRM_INVESTOR_REMARK
COMMENT ON COLUMN "CRM_INVESTOR_REMARK"."CI_ID" IS '投资人id';
COMMENT ON COLUMN "CRM_INVESTOR_REMARK"."OP_USER" IS '备注人';
COMMENT ON COLUMN "CRM_INVESTOR_REMARK"."DATEPOINT" IS '备注时间';
COMMENT ON COLUMN "CRM_INVESTOR_REMARK"."REMARK" IS '备注内容';
COMMENT ON COLUMN "CRM_INVESTOR_REMARK"."ACTION" IS '-1, 无动作; 101, 第1次发短信; 102, 第2次发短信; 103, 第3次发短信; 104, 第4次发短信; 120, 短信已回复; 
201, 第1次添加微信; 202, 第2次添加微信; 203, 第3次添加微信; 220, 微信已回复;
301, 已微信宣传; 302, 已邀请加微信群; 303, 已微信群宣传;
401, 第1次电话未接通; 402, 第2次电话未接通; 403, 第3次电话未接通;
501, 第1次电话沟通; 502, 第2次电话营销; 503, 第3次电话营销;
601, 协助投资';
REM Primary key CRM_INVESTOR_REMARK
ALTER TABLE "CRM_INVESTOR_REMARK" ADD CONSTRAINT "CRM_INVESTOR_REMARK_PK" PRIMARY KEY (CI_ID,OP_USER,DATEPOINT) USING INDEX;
/

REM Create Table CRM_MGR_REG_USER_RELATION
CREATE TABLE "CRM_MGR_REG_USER_RELATION" (
	"U_NAME" VARCHAR2(160 CHAR) NULL,
	"AU_ID" NUMBER NOT NULL,
	"DATEPOINT" DATE NOT NULL,
	"DATEPOINT2" DATE NOT NULL,
	"OP_USER" VARCHAR2(160 CHAR) NULL,
	"DEPARTMENT" VARCHAR2(160 CHAR) NULL
);
REM Column comments CRM_MGR_REG_USER_RELATION
COMMENT ON COLUMN "CRM_MGR_REG_USER_RELATION"."U_NAME" IS '客户经理名称';
COMMENT ON COLUMN "CRM_MGR_REG_USER_RELATION"."AU_ID" IS '投资人注册id';
COMMENT ON COLUMN "CRM_MGR_REG_USER_RELATION"."DATEPOINT" IS '有效开始时间';
COMMENT ON COLUMN "CRM_MGR_REG_USER_RELATION"."DATEPOINT2" IS '有效结束时间';
COMMENT ON COLUMN "CRM_MGR_REG_USER_RELATION"."OP_USER" IS '操作人(分配人)';
COMMENT ON COLUMN "CRM_MGR_REG_USER_RELATION"."DEPARTMENT" IS '客户经理所属  部门';
REM Primary key CRM_MGR_REG_USER_RELATION
ALTER TABLE "CRM_MGR_REG_USER_RELATION" ADD CONSTRAINT "CRM_MGR_REG_USER_RELATION_PK" PRIMARY KEY (AU_ID,DATEPOINT) USING INDEX;
/

REM Create Table CRM_MGR_RELATION
CREATE TABLE "CRM_MGR_RELATION" (
	"U_NAME" VARCHAR2(160 CHAR) NOT NULL,
	"P_NAME" VARCHAR2(160 CHAR) NULL,
	"POSITION" VARCHAR2(160 CHAR) NULL,
	"DEPARTMENT" VARCHAR2(160 CHAR) NULL,
	"R_CODE" VARCHAR2(44 CHAR) NULL
);
REM Column comments CRM_MGR_RELATION
COMMENT ON COLUMN "CRM_MGR_RELATION"."U_NAME" IS '后代节点';
COMMENT ON COLUMN "CRM_MGR_RELATION"."P_NAME" IS '祖先节点,为空时表示已经是最顶级';
COMMENT ON COLUMN "CRM_MGR_RELATION"."POSITION" IS '职务名称';
COMMENT ON COLUMN "CRM_MGR_RELATION"."DEPARTMENT" IS '所属部门名称';
COMMENT ON COLUMN "CRM_MGR_RELATION"."R_CODE" IS '客户经理编号';
REM Primary key CRM_MGR_RELATION
ALTER TABLE "CRM_MGR_RELATION" ADD CONSTRAINT "CRM_MGR_RELATION_PK" PRIMARY KEY (U_NAME) USING INDEX;
/

REM Create Table CRM_MGR_RELATION_PATH
CREATE TABLE "CRM_MGR_RELATION_PATH" (
	"U_NAME" VARCHAR2(160 CHAR) NOT NULL,
	"P_NAME" VARCHAR2(160 CHAR) NOT NULL,
	"DEPTH" NUMBER NULL
);
REM Column comments CRM_MGR_RELATION_PATH
COMMENT ON COLUMN "CRM_MGR_RELATION_PATH"."U_NAME" IS '祖先节点';
COMMENT ON COLUMN "CRM_MGR_RELATION_PATH"."P_NAME" IS '后代节点';
COMMENT ON COLUMN "CRM_MGR_RELATION_PATH"."DEPTH" IS '度';
REM Primary key CRM_MGR_RELATION_PATH
ALTER TABLE "CRM_MGR_RELATION_PATH" ADD CONSTRAINT "CRM_MGR_RELATION_PATH_PK" PRIMARY KEY (U_NAME,P_NAME) USING INDEX;
REM Index CRM_MGR_RELATION_PATH
CREATE INDEX "CRM_MGR_RELATION_PATH_UK1" ON "CRM_MGR_RELATION_PATH" (U_NAME,P_NAME)
/

REM Create Table FS_FILE2
CREATE TABLE "FS_FILE2" (
	"FILE_ID" NUMBER(18) NOT NULL,
	"FILE_TYPE" NUMBER(18) NOT NULL,
	"OBJECT_ID" NUMBER(18) NOT NULL,
	"FILE_NAME" VARCHAR2(800 CHAR) NOT NULL,
	"FILE_SIZE" NUMBER(18) NOT NULL,
	"LAST_MODIFIED_TIME" DATE NOT NULL,
	"DESCRIPTION" VARCHAR2(1000 CHAR) NULL,
	"BRIEF" VARCHAR2(4000 CHAR) NULL,
	"ATTRS" NUMBER(18) DEFAULT 0 NOT NULL,
	"UUID" VARCHAR2(80 CHAR) NOT NULL
);
REM Column comments FS_FILE2
REM Primary key FS_FILE2
ALTER TABLE "FS_FILE2" ADD CONSTRAINT "SYS_C0026262" PRIMARY KEY (FILE_ID) USING INDEX;
/

REM Create Table MSG_CREDIT_ASSIGN
CREATE TABLE "MSG_CREDIT_ASSIGN" (
	"M_ID" NUMBER NOT NULL,
	"MOBILE" VARCHAR2(40 CHAR) NULL,
	"V_CODE" VARCHAR2(200 CHAR) NULL,
	"DATEPOINT" DATE NULL,
	"STATUS" NUMBER DEFAULT 0 NOT NULL
);
REM Column comments MSG_CREDIT_ASSIGN
COMMENT ON COLUMN "MSG_CREDIT_ASSIGN"."M_ID" IS '主键';
COMMENT ON COLUMN "MSG_CREDIT_ASSIGN"."MOBILE" IS '手机号';
COMMENT ON COLUMN "MSG_CREDIT_ASSIGN"."V_CODE" IS '激活码';
COMMENT ON COLUMN "MSG_CREDIT_ASSIGN"."DATEPOINT" IS '创建时间';
COMMENT ON COLUMN "MSG_CREDIT_ASSIGN"."STATUS" IS '状态，0为验证，1已验证（已使用）';
REM Primary key MSG_CREDIT_ASSIGN
ALTER TABLE "MSG_CREDIT_ASSIGN" ADD CONSTRAINT "MSG_CREDIT_ASSIGN_PK" PRIMARY KEY (M_ID) USING INDEX;
/

REM Create Table MY_DICT
CREATE TABLE "MY_DICT" (
	"CATEGORY_ID" NUMBER NOT NULL,
	"KEY" VARCHAR2(800 CHAR) NULL,
	"VALUE" VARCHAR2(4000 CHAR) NULL,
	"ENABLED" NUMBER(12,2) DEFAULT 1 NOT NULL,
	"PARENT_KEY" VARCHAR2(800 CHAR) NULL,
	"LAST_WRITE_TIME" TIMESTAMP(6) NULL
);
REM Column comments MY_DICT
REM Primary key MY_DICT
ALTER TABLE "MY_DICT" ADD CONSTRAINT "MY_DICT_PK" PRIMARY KEY (CATEGORY_ID) USING INDEX;
/

REM Create Table MY_ROLE
CREATE TABLE "MY_ROLE" (
	"R_NAME" VARCHAR2(1600 CHAR) NOT NULL,
	"R_TITLE" VARCHAR2(2000 CHAR) NULL,
	"R_DESCRIPTION" VARCHAR2(2000 CHAR) NULL,
	"R_ENABLED" NUMBER DEFAULT 1 NULL
);
REM Column comments MY_ROLE
REM Primary key MY_ROLE
ALTER TABLE "MY_ROLE" ADD CONSTRAINT "MY_ROLE_PK" PRIMARY KEY (R_NAME) USING INDEX;
/

REM Create Table MY_ROLE_PERM
REM Depend on table(s)
REM [MY_ROLE]
CREATE TABLE "MY_ROLE_PERM" (
	"R_NAME" VARCHAR2(1600 CHAR) NOT NULL,
	"PERM_ID" NUMBER NOT NULL
);
REM Column comments MY_ROLE_PERM
REM Primary key MY_ROLE_PERM
ALTER TABLE "MY_ROLE_PERM" ADD CONSTRAINT "MY_ROLE_PERM_PK" PRIMARY KEY (R_NAME,PERM_ID) USING INDEX;
REM Foreign keys MY_ROLE_PERM
ALTER TABLE "MY_ROLE_PERM" ADD CONSTRAINT "MY_ROLE_PERM_MY_ROLE_FK1" FOREIGN KEY (R_NAME) REFERENCES "MY_ROLE" (R_NAME) ON DELETE CASCADE;
/

REM Create Table MY_USER
CREATE TABLE "MY_USER" (
	"U_NAME" VARCHAR2(1600 CHAR) NOT NULL,
	"U_PWD" VARCHAR2(1600 CHAR) NULL,
	"U_ENABLED" NUMBER DEFAULT 1 NULL,
	"IS_LOCKED" NUMBER DEFAULT 0 NULL,
	"U_CREATE_DATE" DATE DEFAULT SYSDATE NOT NULL,
	"U_LAST_MODIFIED_DATE" DATE DEFAULT SYSDATE NOT NULL
);
COMMENT ON TABLE "MY_USER" IS '后台用户表';
REM Column comments MY_USER
COMMENT ON COLUMN "MY_USER"."IS_LOCKED" IS '0未锁，1已锁';
REM Primary key MY_USER
ALTER TABLE "MY_USER" ADD CONSTRAINT "MY_USER_PK" PRIMARY KEY (U_NAME) USING INDEX;
/

REM Create Table MY_USER_PROP
REM Depend on table(s)
REM [MY_USER]
CREATE TABLE "MY_USER_PROP" (
	"U_NAME" VARCHAR2(1600 CHAR) NOT NULL,
	"P_KEY" VARCHAR2(1600 CHAR) NOT NULL,
	"P_VALUE" VARCHAR2(4000 CHAR) NULL,
	"P_TYPE" NUMBER DEFAULT 0 NULL
);
COMMENT ON TABLE "MY_USER_PROP" IS '后台用户属性';
REM Column comments MY_USER_PROP
REM Primary key MY_USER_PROP
ALTER TABLE "MY_USER_PROP" ADD CONSTRAINT "MY_USER_PROP_PK" PRIMARY KEY (U_NAME,P_KEY) USING INDEX;
REM Constraints MY_USER_PROP
ALTER TABLE "MY_USER_PROP" ADD CONSTRAINT "AAA" CHECK (P_TYPE <> 100);
REM Foreign keys MY_USER_PROP
ALTER TABLE "MY_USER_PROP" ADD CONSTRAINT "MY_USER_PROP_MY_USER_FK1" FOREIGN KEY (U_NAME) REFERENCES "MY_USER" (U_NAME) ON DELETE CASCADE;
REM Index MY_USER_PROP
CREATE INDEX "CCC" ON "MY_USER_PROP" (P_KEY)
/

REM Create Table MY_USER_ROLE
REM Depend on table(s)
REM [MY_ROLE]
REM [MY_USER]
CREATE TABLE "MY_USER_ROLE" (
	"U_NAME" VARCHAR2(1600 CHAR) NOT NULL,
	"R_NAME" VARCHAR2(1600 CHAR) NOT NULL
);
COMMENT ON TABLE "MY_USER_ROLE" IS '后台账户角色';
REM Column comments MY_USER_ROLE
REM Primary key MY_USER_ROLE
ALTER TABLE "MY_USER_ROLE" ADD CONSTRAINT "MY_USER_ROLE_PK" PRIMARY KEY (U_NAME,R_NAME) USING INDEX;
REM Foreign keys MY_USER_ROLE
ALTER TABLE "MY_USER_ROLE" ADD CONSTRAINT "MY_USER_ROLE_MY_ROLE_FK1" FOREIGN KEY (R_NAME) REFERENCES "MY_ROLE" (R_NAME) ON DELETE CASCADE;
ALTER TABLE "MY_USER_ROLE" ADD CONSTRAINT "MY_USER_ROLE_MY_USER_FK1" FOREIGN KEY (U_NAME) REFERENCES "MY_USER" (U_NAME) ON DELETE CASCADE;
/

REM Create Table PRJ_ACTION
CREATE TABLE "PRJ_ACTION" (
	"OP_USER" VARCHAR2(3200 CHAR) NULL,
	"FLAG" NUMBER NULL,
	"A_ORDER" NUMBER NOT NULL,
	"OP_TIME" DATE NOT NULL,
	"P_ID" NUMBER NOT NULL,
	"COMMENTS" VARCHAR2(4000 CHAR) NULL
);
COMMENT ON TABLE "PRJ_ACTION" IS '项目操作记录表';
REM Column comments PRJ_ACTION
COMMENT ON COLUMN "PRJ_ACTION"."OP_USER" IS '操作人用户名';
COMMENT ON COLUMN "PRJ_ACTION"."FLAG" IS '是否同意请求';
COMMENT ON COLUMN "PRJ_ACTION"."A_ORDER" IS '步骤顺序';
COMMENT ON COLUMN "PRJ_ACTION"."OP_TIME" IS '操作时间';
COMMENT ON COLUMN "PRJ_ACTION"."P_ID" IS '项目ID';
COMMENT ON COLUMN "PRJ_ACTION"."COMMENTS" IS '备注';
REM Primary key PRJ_ACTION
ALTER TABLE "PRJ_ACTION" ADD CONSTRAINT "PRJ_ACTION_PK" PRIMARY KEY (P_ID,OP_TIME,A_ORDER) USING INDEX;
/

REM Create Table PRJ_BONUS_DETAIL
CREATE TABLE "PRJ_BONUS_DETAIL" (
	"PBD_ID" NUMBER NOT NULL,
	"TRAN_NO" NUMBER NOT NULL,
	"AMT" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"TRAN_TYPE" NUMBER NOT NULL,
	"PAY_TYPE" NUMBER(4) NOT NULL,
	"PAID_TIME" DATE NOT NULL,
	"CREATOR" VARCHAR2(1280 CHAR) NULL,
	"CREATE_TIME" DATE NOT NULL,
	"REMARK" VARCHAR2(3200 CHAR) NULL,
	"P_ID" NUMBER DEFAULT 0 NOT NULL,
	"OVER_DUEL" NUMBER DEFAULT 0 NOT NULL,
	"UPLOAD_STATUS" NUMBER DEFAULT 0 NULL
);
COMMENT ON TABLE "PRJ_BONUS_DETAIL" IS 'HHHHH';
REM Column comments PRJ_BONUS_DETAIL
COMMENT ON COLUMN "PRJ_BONUS_DETAIL"."PBD_ID" IS '批次还款记录的ID';
COMMENT ON COLUMN "PRJ_BONUS_DETAIL"."TRAN_NO" IS '第几期还款';
COMMENT ON COLUMN "PRJ_BONUS_DETAIL"."AMT" IS '此次还款金额';
COMMENT ON COLUMN "PRJ_BONUS_DETAIL"."TRAN_TYPE" IS '0:利息 1:本金 , 2罚息';
COMMENT ON COLUMN "PRJ_BONUS_DETAIL"."PAY_TYPE" IS '还款来源类型。1 - 正常  2- 担保人 3-名义借款人 99 - 其它';
COMMENT ON COLUMN "PRJ_BONUS_DETAIL"."PAID_TIME" IS '逻辑还款时间, 不是实际还款时间';
COMMENT ON COLUMN "PRJ_BONUS_DETAIL"."CREATOR" IS '发起还款者（创建者id）';
COMMENT ON COLUMN "PRJ_BONUS_DETAIL"."CREATE_TIME" IS '创建时间，即实际还款时间';
COMMENT ON COLUMN "PRJ_BONUS_DETAIL"."REMARK" IS '备注';
COMMENT ON COLUMN "PRJ_BONUS_DETAIL"."P_ID" IS '对应的项目ID';
COMMENT ON COLUMN "PRJ_BONUS_DETAIL"."OVER_DUEL" IS '该批次是否偿还对应的逾期利息';
COMMENT ON COLUMN "PRJ_BONUS_DETAIL"."UPLOAD_STATUS" IS '还款业务数据是否已上传，0未上传，1已上传,-1已禁用';
REM Primary key PRJ_BONUS_DETAIL
ALTER TABLE "PRJ_BONUS_DETAIL" ADD CONSTRAINT "PRJ_BONUS_DETAIL_PK" PRIMARY KEY (PBD_ID) USING INDEX;
/

REM Create Table PRJ_CREDIT_ASSIGN
CREATE TABLE "PRJ_CREDIT_ASSIGN" (
	"P_ID" NUMBER NOT NULL,
	"CONTRACT_END_DATE" DATE NULL,
	"CREDIT_AMOUNT" NUMBER(18,2) NULL,
	"CURRENT_MONTH_INTEREST" NUMBER(18,2) NULL,
	"ASSIGN_RATE" NUMBER(6,2) NULL,
	"STATUS" NUMBER(4) DEFAULT 0 NULL,
	"TI_ID" NUMBER NULL,
	"ORI_RATE" NUMBER(6,2) NULL,
	"PYR_CU_ID" VARCHAR2(1280 CHAR) NULL,
	"PRIORITY" VARCHAR2(1280 CHAR) NULL,
	"ORG_ORDER_NO" VARCHAR2(1280 CHAR) NULL,
	"LOCK_ASSIGN_RATE" NUMBER(6,2) DEFAULT 0 NULL,
	"UP_TIME" DATE NULL,
	"INVOKE_TIME" DATE NULL,
	"INVOKE_RES" VARCHAR2(1280 CHAR) NULL
);
COMMENT ON TABLE "PRJ_CREDIT_ASSIGN" IS '债权转让申请表';
REM Column comments PRJ_CREDIT_ASSIGN
COMMENT ON COLUMN "PRJ_CREDIT_ASSIGN"."P_ID" IS '债权转让项目的id，并非是prj_loan的p_id，而是表prj_credit_assign的主键id（叫pca_id或许更合适）';
COMMENT ON COLUMN "PRJ_CREDIT_ASSIGN"."CONTRACT_END_DATE" IS '最后还款日';
COMMENT ON COLUMN "PRJ_CREDIT_ASSIGN"."CREDIT_AMOUNT" IS '债权本金';
COMMENT ON COLUMN "PRJ_CREDIT_ASSIGN"."CURRENT_MONTH_INTEREST" IS '当期待收利息';
COMMENT ON COLUMN "PRJ_CREDIT_ASSIGN"."ASSIGN_RATE" IS '债权转让年化利率';
COMMENT ON COLUMN "PRJ_CREDIT_ASSIGN"."STATUS" IS '0：转让中；1：已转让；2：已撤销(包括了过期和失效的债权)；';
COMMENT ON COLUMN "PRJ_CREDIT_ASSIGN"."TI_ID" IS '债权业务表-TS_INVEST的ID';
COMMENT ON COLUMN "PRJ_CREDIT_ASSIGN"."ORI_RATE" IS '原利率';
COMMENT ON COLUMN "PRJ_CREDIT_ASSIGN"."PYR_CU_ID" IS '承接人ID';
COMMENT ON COLUMN "PRJ_CREDIT_ASSIGN"."PRIORITY" IS '排序编号';
COMMENT ON COLUMN "PRJ_CREDIT_ASSIGN"."ORG_ORDER_NO" IS '迁移时用下，回头删掉';
COMMENT ON COLUMN "PRJ_CREDIT_ASSIGN"."LOCK_ASSIGN_RATE" IS '锁定转让利率';
COMMENT ON COLUMN "PRJ_CREDIT_ASSIGN"."UP_TIME" IS '每次支付时记录支付操作时间';
COMMENT ON COLUMN "PRJ_CREDIT_ASSIGN"."INVOKE_TIME" IS '撤销时间';
COMMENT ON COLUMN "PRJ_CREDIT_ASSIGN"."INVOKE_RES" IS '撤销来源';
REM Primary key PRJ_CREDIT_ASSIGN
ALTER TABLE "PRJ_CREDIT_ASSIGN" ADD CONSTRAINT "PRJ_CREDIT_ASSIGN_PK" PRIMARY KEY (P_ID) USING INDEX;
REM Index PRJ_CREDIT_ASSIGN
CREATE INDEX "PRJ_CREDIT_ASSIGN_UK1" ON "PRJ_CREDIT_ASSIGN" (TI_ID,P_ID)
/

REM Create Table PRJ_INDEX
CREATE TABLE "PRJ_INDEX" (
	"P_ID" NUMBER NOT NULL,
	"ITEM_NAME" VARCHAR2(960 CHAR) NULL,
	"ITEM_SHOW_NAME" VARCHAR2(960 CHAR) NULL,
	"ITEM_NO" VARCHAR2(960 CHAR) NULL,
	"IN_TIME" DATE NULL,
	"OUT_TIME" DATE NULL,
	"CREATOR" VARCHAR2(3200 CHAR) NULL,
	"CREATE_TIME" DATE NULL,
	"FINANCING_DAYS" NUMBER NULL,
	"VISIBLE" NUMBER(2) DEFAULT 1 NULL,
	"TYPE" NUMBER(4) NOT NULL,
	"WATER_MARK" VARCHAR2(1280 CHAR) NULL,
	"FLAGS" NUMBER(8) DEFAULT 0 NOT NULL,
	"TOP_TIME" DATE NULL,
	"BOND_AMT" NUMBER(18,2) NULL,
	"AUTO_CREDIT_DATE" DATE NULL,
	"AUTO_CREDIT_FLAG" NUMBER DEFAULT 0 NULL,
	"AMT" NUMBER(18,2) DEFAULT 0 NULL,
	"ALLOW_CREDIT_OUT" NUMBER(1) DEFAULT 1 NOT NULL,
	"LOCKED_TIME" DATE NULL
);
COMMENT ON TABLE "PRJ_INDEX" IS '项目索引表';
REM Column comments PRJ_INDEX
COMMENT ON COLUMN "PRJ_INDEX"."P_ID" IS '项目id';
COMMENT ON COLUMN "PRJ_INDEX"."ITEM_NAME" IS '项目名称';
COMMENT ON COLUMN "PRJ_INDEX"."ITEM_SHOW_NAME" IS '项目显示名';
COMMENT ON COLUMN "PRJ_INDEX"."ITEM_NO" IS '项目编号';
COMMENT ON COLUMN "PRJ_INDEX"."IN_TIME" IS '内部上线时间，或者转让起始日，或班汇宝项目预发布日';
COMMENT ON COLUMN "PRJ_INDEX"."OUT_TIME" IS '外部上线时间，或班汇宝项目开放购买日';
COMMENT ON COLUMN "PRJ_INDEX"."CREATOR" IS '创建人用户名，或者债权转让申请人用户名';
COMMENT ON COLUMN "PRJ_INDEX"."CREATE_TIME" IS '创建时间';
COMMENT ON COLUMN "PRJ_INDEX"."FINANCING_DAYS" IS '募集天数，或者转让天数';
COMMENT ON COLUMN "PRJ_INDEX"."VISIBLE" IS '投资者前台是否可见。1：可见。0：不可见。';
COMMENT ON COLUMN "PRJ_INDEX"."TYPE" IS '1，工程贷；2，银票贷；3，商票贷；4，债权转让；5，票据贷；6，班汇宝；7，供应贷；8，分销贷；9，个人贷；10，小微企业贷；';
COMMENT ON COLUMN "PRJ_INDEX"."WATER_MARK" IS '水印';
COMMENT ON COLUMN "PRJ_INDEX"."FLAGS" IS '标志位。1,新手标。8班汇宝专供，16班乐宝（工程贷），32，员工宝（工程贷）。64 保险';
COMMENT ON COLUMN "PRJ_INDEX"."TOP_TIME" IS '置顶时间，只针对投资中的项目。';
COMMENT ON COLUMN "PRJ_INDEX"."BOND_AMT" IS '保证金';
COMMENT ON COLUMN "PRJ_INDEX"."AUTO_CREDIT_DATE" IS '设置的自动债权转让时间,已废弃';
COMMENT ON COLUMN "PRJ_INDEX"."AUTO_CREDIT_FLAG" IS '1 表示自动债权转让已创建,已废弃';
COMMENT ON COLUMN "PRJ_INDEX"."AMT" IS '项目预计融资金额（或债权项目转让标价）';
COMMENT ON COLUMN "PRJ_INDEX"."ALLOW_CREDIT_OUT" IS '1 表示允许债权转让 0 表示禁止债权转让';
COMMENT ON COLUMN "PRJ_INDEX"."LOCKED_TIME" IS '项目锁定';
REM Primary key PRJ_INDEX
ALTER TABLE "PRJ_INDEX" ADD CONSTRAINT "PRJ_INDEX_PK" PRIMARY KEY (P_ID) USING INDEX;
/

REM Create Table PRJ_INDEX_CONTRACT
CREATE TABLE "PRJ_INDEX_CONTRACT" (
	"FILE_ID" NUMBER NOT NULL,
	"P_ID" NUMBER NOT NULL,
	"FILE_NAME" VARCHAR2(800 CHAR) NOT NULL,
	"FILE_TYPE" NUMBER NOT NULL,
	"FILE_HASH" VARCHAR2(240 CHAR) NOT NULL
);
REM Column comments PRJ_INDEX_CONTRACT
COMMENT ON COLUMN "PRJ_INDEX_CONTRACT"."FILE_ID" IS '来自OFS的file_id';
COMMENT ON COLUMN "PRJ_INDEX_CONTRACT"."P_ID" IS '项目id';
COMMENT ON COLUMN "PRJ_INDEX_CONTRACT"."FILE_NAME" IS '文件名称';
COMMENT ON COLUMN "PRJ_INDEX_CONTRACT"."FILE_TYPE" IS '文件类型';
COMMENT ON COLUMN "PRJ_INDEX_CONTRACT"."FILE_HASH" IS '来自OFS的hash';
REM Primary key PRJ_INDEX_CONTRACT
ALTER TABLE "PRJ_INDEX_CONTRACT" ADD CONSTRAINT "PRJ_INDEX_CONTRACT_PK" PRIMARY KEY (FILE_ID) USING INDEX;
/

REM Create Table PRJ_LOAN
REM Depend on table(s)
REM [PRJ_INDEX]
CREATE TABLE "PRJ_LOAN" (
	"P_ID" NUMBER NOT NULL,
	"FINANCIER_CU_ID" NUMBER DEFAULT 0 NULL,
	"RATE" NUMBER(6,2) NULL,
	"EXTENSION_RATE" NUMBER(6,2) NULL,
	"TIME_OUT_RATE" NUMBER(6,2) NULL,
	"PENALTY_RATION" NUMBER(6,2) DEFAULT 0 NULL,
	"EXPECTED_BORROW_TIME" DATE NULL,
	"FINANCING_END_TIME" DATE NULL,
	"CAPITAL_REPAY_TIME" DATE NULL,
	"INVEST_MAX_AMT_RATIO" NUMBER(6,2) DEFAULT 100 NOT NULL,
	"INVEST_MAX_AMT" NUMBER(18,2) NULL,
	"STATUS" NUMBER(8) DEFAULT 0 NOT NULL,
	"INVESTED_AMT" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"PER_INVEST_MIN_AMT" NUMBER(18,2) DEFAULT 1 NOT NULL,
	"BORROW_DAYS" NUMBER NULL,
	"KEY" VARCHAR2(4000 CHAR) NULL,
	"EXTENSION_DAYS" NUMBER DEFAULT 0 NOT NULL,
	"PER_INVEST_AMT" NUMBER(18,2) DEFAULT 1000 NOT NULL,
	"CONTRACT" NUMBER DEFAULT 0 NULL,
	"BONUS_PERIOD" NUMBER DEFAULT 0 NULL,
	"BONUS_DAY" NUMBER NULL,
	"PER_INVEST_MAX_AMT" NUMBER(18,2) DEFAULT 50000 NOT NULL,
	"FEE_RATE" NUMBER(6,2) DEFAULT 5 NOT NULL,
	"COST_FEE" NUMBER NULL,
	"SOLD_FEE" NUMBER NULL,
	"OUT_PROXY" VARCHAR2(640 CHAR) NULL,
	"IN_PROXY" VARCHAR2(640 CHAR) NULL,
	"NOMINAL_AU_ID" NUMBER NULL,
	"BONDSMAN_AU_ID" NUMBER NULL,
	"SRC" VARCHAR2(800 CHAR) NULL,
	"REMARK" VARCHAR2(160 CHAR) NULL,
	"FINANCIER" VARCHAR2(240 CHAR) NULL,
	"FINANCIER_SHOW_NAME" VARCHAR2(80) NULL,
	"FINANCIER_NAME" VARCHAR2(80) NULL,
	"DEPOSIT_RATIO" NUMBER(8,2) NULL,
	"LOAN_PURPOSES" VARCHAR2(1000) NULL,
	"WHITE_LIST_ENABLED" NUMBER DEFAULT 0 NOT NULL,
	"CORE_GUARA_NAME" VARCHAR2(3200) NULL,
	"PAY_SRC" VARCHAR2(1000) NULL,
	"TOTAL_INTEREST" NUMBER NULL
);
REM Column comments PRJ_LOAN
COMMENT ON COLUMN "PRJ_LOAN"."P_ID" IS '项目主键';
COMMENT ON COLUMN "PRJ_LOAN"."FINANCIER_CU_ID" IS '实际借款人（融资人）id';
COMMENT ON COLUMN "PRJ_LOAN"."RATE" IS '年化利率';
COMMENT ON COLUMN "PRJ_LOAN"."EXTENSION_RATE" IS '展期利率';
COMMENT ON COLUMN "PRJ_LOAN"."TIME_OUT_RATE" IS '逾期利率';
COMMENT ON COLUMN "PRJ_LOAN"."PENALTY_RATION" IS '违约金比例';
COMMENT ON COLUMN "PRJ_LOAN"."EXPECTED_BORROW_TIME" IS '预期放款时间';
COMMENT ON COLUMN "PRJ_LOAN"."FINANCING_END_TIME" IS '融资结束时间';
COMMENT ON COLUMN "PRJ_LOAN"."CAPITAL_REPAY_TIME" IS '还本日期（最后还款到期时间）';
COMMENT ON COLUMN "PRJ_LOAN"."INVEST_MAX_AMT_RATIO" IS '投资上限额（百分比）';
COMMENT ON COLUMN "PRJ_LOAN"."INVEST_MAX_AMT" IS '投资上限额';
COMMENT ON COLUMN "PRJ_LOAN"."STATUS" IS '状态。待项目经理审批1， 待风控审批10， 待评委会秘书审批20， 待业务副总批准上线30， 募集中40， 已募集满标50， 已确认满标60， 待业务副总批准放款70， 已放款80， 还款中90， 已结清999， 流标-1';
COMMENT ON COLUMN "PRJ_LOAN"."INVESTED_AMT" IS '已融资金额';
COMMENT ON COLUMN "PRJ_LOAN"."PER_INVEST_MIN_AMT" IS '投资下限额(单笔投资下限）';
COMMENT ON COLUMN "PRJ_LOAN"."BORROW_DAYS" IS '借款天数';
COMMENT ON COLUMN "PRJ_LOAN"."KEY" IS '内容以逗号分隔';
COMMENT ON COLUMN "PRJ_LOAN"."EXTENSION_DAYS" IS '允许展期天数';
COMMENT ON COLUMN "PRJ_LOAN"."PER_INVEST_AMT" IS '每份投资金额';
COMMENT ON COLUMN "PRJ_LOAN"."CONTRACT" IS '适用合同';
COMMENT ON COLUMN "PRJ_LOAN"."BONUS_PERIOD" IS '还款周期策略 0-未指定 1-每月固定日且指定首次还款日  2-每月固定日且放款后30天为首次还款日  3-固定周期; 4-到期一次还本付息';
COMMENT ON COLUMN "PRJ_LOAN"."BONUS_DAY" IS '当采用每月固定日还款时表示每月还款日, 当采用固定周期还款时表示周期天数';
COMMENT ON COLUMN "PRJ_LOAN"."PER_INVEST_MAX_AMT" IS '每份最大投资额度，一般用于对新手标单笔投资的最大限制';
COMMENT ON COLUMN "PRJ_LOAN"."FEE_RATE" IS '服务费率';
COMMENT ON COLUMN "PRJ_LOAN"."COST_FEE" IS '买入费率(总借款成本)';
COMMENT ON COLUMN "PRJ_LOAN"."SOLD_FEE" IS '卖出费率(和年化利率一样)';
COMMENT ON COLUMN "PRJ_LOAN"."OUT_PROXY" IS '代理';
COMMENT ON COLUMN "PRJ_LOAN"."IN_PROXY" IS '融资项目经理';
COMMENT ON COLUMN "PRJ_LOAN"."NOMINAL_AU_ID" IS '名义借款人';
COMMENT ON COLUMN "PRJ_LOAN"."BONDSMAN_AU_ID" IS '担保人';
COMMENT ON COLUMN "PRJ_LOAN"."SRC" IS '项目来源';
COMMENT ON COLUMN "PRJ_LOAN"."REMARK" IS '备注';
COMMENT ON COLUMN "PRJ_LOAN"."FINANCIER" IS '融资方';
COMMENT ON COLUMN "PRJ_LOAN"."DEPOSIT_RATIO" IS '保证金比例';
COMMENT ON COLUMN "PRJ_LOAN"."LOAN_PURPOSES" IS '借款用途';
COMMENT ON COLUMN "PRJ_LOAN"."WHITE_LIST_ENABLED" IS '是否已设置白名单';
COMMENT ON COLUMN "PRJ_LOAN"."CORE_GUARA_NAME" IS '核心担保人';
COMMENT ON COLUMN "PRJ_LOAN"."PAY_SRC" IS '还款来源';
COMMENT ON COLUMN "PRJ_LOAN"."TOTAL_INTEREST" IS '总利息';
REM Primary key PRJ_LOAN
ALTER TABLE "PRJ_LOAN" ADD CONSTRAINT "PRJ_LOAN_PK" PRIMARY KEY (P_ID) USING INDEX;
REM Constraints PRJ_LOAN
ALTER TABLE "PRJ_LOAN" ADD CONSTRAINT "PRJ_LOAN_BONUS_DAY_CHECK" CHECK (BONUS_DAY >= 0 AND BONUS_DAY <=31);
ALTER TABLE "PRJ_LOAN" ADD CONSTRAINT "PRJ_LOAN_FEE_RATE_CHECK" CHECK (FEE_RATE >= 0 AND FEE_RATE <= 100);
REM Foreign keys PRJ_LOAN
ALTER TABLE "PRJ_LOAN" ADD CONSTRAINT "PRJ_LOAN_PRJ_INDEX_FK1" FOREIGN KEY (P_ID) REFERENCES "PRJ_INDEX" (P_ID) ON DELETE CASCADE;
/

REM Create Table PRJ_MGR_ORG
CREATE TABLE "PRJ_MGR_ORG" (
	"P_ID" NUMBER NOT NULL,
	"ORG_NAME" VARCHAR2(1280 CHAR) NULL,
	"LOAN_PURPOSES" VARCHAR2(320 CHAR) NULL,
	"LOAN_BAL" NUMBER NULL,
	"OTHER_LOAN_BAL" NUMBER NULL,
	"SHOW_ORG_NAME" VARCHAR2(1280 CHAR) NULL,
	"REGISTERED_FUND" NUMBER NULL,
	"REGISTERED_DATE" DATE NULL,
	"LEGAL_ID_CARD" VARCHAR2(2000 CHAR) NULL,
	"LEGAL_PERSON_NAME" VARCHAR2(2000 CHAR) NULL,
	"LEGAL_PERSON_SHOW_NAME" VARCHAR2(80 CHAR) NULL,
	"MOBILE" VARCHAR2(2000 CHAR) NULL,
	"EMAIL" VARCHAR2(2000 CHAR) NULL,
	"ADDRESS" VARCHAR2(2000 CHAR) NULL,
	"INTRO" VARCHAR2(4000 CHAR) NULL,
	"BPMO_ID" NUMBER NOT NULL,
	"LOAN_INTRO" VARCHAR2(1600 CHAR) NULL,
	"SHOW_ADDRESS" VARCHAR2(4000 CHAR) NULL,
	"OVERDUE_NUM" NUMBER NULL,
	"OVERDUE_AMT" NUMBER NULL,
	"VISIBLE" NUMBER DEFAULT 1 NULL,
	"OTHER_OVERDUE_NUM" NUMBER NULL,
	"OTHER_OVERDUE_AMT" NUMBER NULL,
	"ORDER_NO" NUMBER NULL,
	"LINKMAN_NAME" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_ID_CARD" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_MOBILE" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_FAX" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_EMAIL" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_WCHAT" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_ADDRESS" VARCHAR2(2000 CHAR) NULL,
	"FAX" VARCHAR2(2000 CHAR) NULL,
	"WCHAT" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_SHOW_ADDRESS" VARCHAR2(400 CHAR) NULL,
	"LINKMAN_SHOW_NAME" VARCHAR2(240 CHAR) NULL,
	"SOCIAL_CREDIT_CODE" VARCHAR2(1000) NULL,
	"SHOW_SOCIAL_CREDIT_CODE" VARCHAR2(60) NULL,
	"REGISTERED_SHOW_FUND1" NUMBER NULL,
	"REGISTERED_SHOW_FUND" VARCHAR2(160 CHAR) NULL,
	"INDUSTRY" VARCHAR2(200 CHAR) NULL,
	"WORK_ADDRESS" VARCHAR2(2000 CHAR) NULL,
	"SHOW_WORK_ADDRESS" VARCHAR2(400 CHAR) NULL,
	"SHAREHOLDER_INFO" VARCHAR2(800 CHAR) NULL,
	"SHOW_SHAREHOLDER_INFO" VARCHAR2(800 CHAR) NULL,
	"OPERATE_AREA" VARCHAR2(200 CHAR) NULL,
	"OTHER_INFO" VARCHAR2(4000 CHAR) NULL,
	"LINKMAN_QQ" VARCHAR2(2000 CHAR) NULL,
	"BORROWER_GUARANTOR_RELATIVE" NUMBER NULL,
	"BORROWER_AREA" NUMBER NULL,
	"QQ" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_RELATION" VARCHAR2(2000 CHAR) NULL
);
COMMENT ON TABLE "PRJ_MGR_ORG" IS '借款机构-快照表';
REM Column comments PRJ_MGR_ORG
COMMENT ON COLUMN "PRJ_MGR_ORG"."P_ID" IS 'id';
COMMENT ON COLUMN "PRJ_MGR_ORG"."ORG_NAME" IS '机构名';
COMMENT ON COLUMN "PRJ_MGR_ORG"."LOAN_PURPOSES" IS '借款用途';
COMMENT ON COLUMN "PRJ_MGR_ORG"."LOAN_BAL" IS '平台借款余额';
COMMENT ON COLUMN "PRJ_MGR_ORG"."OTHER_LOAN_BAL" IS '其他平台借款余额';
COMMENT ON COLUMN "PRJ_MGR_ORG"."SHOW_ORG_NAME" IS '展示名';
COMMENT ON COLUMN "PRJ_MGR_ORG"."REGISTERED_FUND" IS '注册资金';
COMMENT ON COLUMN "PRJ_MGR_ORG"."REGISTERED_DATE" IS '注册时间（成立时间）';
COMMENT ON COLUMN "PRJ_MGR_ORG"."LEGAL_ID_CARD" IS '法定代表人身份证号';
COMMENT ON COLUMN "PRJ_MGR_ORG"."LEGAL_PERSON_NAME" IS '法定代表人姓名';
COMMENT ON COLUMN "PRJ_MGR_ORG"."LEGAL_PERSON_SHOW_NAME" IS '法定代表人展示姓名';
COMMENT ON COLUMN "PRJ_MGR_ORG"."MOBILE" IS '手机号';
COMMENT ON COLUMN "PRJ_MGR_ORG"."EMAIL" IS '邮箱';
COMMENT ON COLUMN "PRJ_MGR_ORG"."ADDRESS" IS '现住址';
COMMENT ON COLUMN "PRJ_MGR_ORG"."INTRO" IS '介绍';
COMMENT ON COLUMN "PRJ_MGR_ORG"."BPMO_ID" IS '基础数据表id';
COMMENT ON COLUMN "PRJ_MGR_ORG"."LOAN_INTRO" IS '借款概况';
COMMENT ON COLUMN "PRJ_MGR_ORG"."SHOW_ADDRESS" IS '注册显示地址';
COMMENT ON COLUMN "PRJ_MGR_ORG"."OVERDUE_NUM" IS '在本平台的逾期次数';
COMMENT ON COLUMN "PRJ_MGR_ORG"."OVERDUE_AMT" IS '在本平台的逾期金额';
COMMENT ON COLUMN "PRJ_MGR_ORG"."VISIBLE" IS '前台是否可见，1可见；0不可见';
COMMENT ON COLUMN "PRJ_MGR_ORG"."OTHER_OVERDUE_NUM" IS '在其他平台的逾期次数';
COMMENT ON COLUMN "PRJ_MGR_ORG"."OTHER_OVERDUE_AMT" IS '在其他平台的逾期金额';
COMMENT ON COLUMN "PRJ_MGR_ORG"."ORDER_NO" IS '序号（合同借款人的排序规则）';
COMMENT ON COLUMN "PRJ_MGR_ORG"."LINKMAN_NAME" IS '联系人姓名';
COMMENT ON COLUMN "PRJ_MGR_ORG"."LINKMAN_ID_CARD" IS '联系人身份证号';
COMMENT ON COLUMN "PRJ_MGR_ORG"."LINKMAN_MOBILE" IS '联系人手机号';
COMMENT ON COLUMN "PRJ_MGR_ORG"."LINKMAN_FAX" IS '联系人传真';
COMMENT ON COLUMN "PRJ_MGR_ORG"."LINKMAN_EMAIL" IS '联系人电子邮箱';
COMMENT ON COLUMN "PRJ_MGR_ORG"."LINKMAN_WCHAT" IS '联系人微信号';
COMMENT ON COLUMN "PRJ_MGR_ORG"."LINKMAN_ADDRESS" IS '联系人送达地址';
COMMENT ON COLUMN "PRJ_MGR_ORG"."FAX" IS '传真';
COMMENT ON COLUMN "PRJ_MGR_ORG"."WCHAT" IS '微信号';
COMMENT ON COLUMN "PRJ_MGR_ORG"."LINKMAN_SHOW_ADDRESS" IS '展示联系人地址';
COMMENT ON COLUMN "PRJ_MGR_ORG"."LINKMAN_SHOW_NAME" IS '展示联系人姓名';
COMMENT ON COLUMN "PRJ_MGR_ORG"."SOCIAL_CREDIT_CODE" IS '统一社会信用代码';
COMMENT ON COLUMN "PRJ_MGR_ORG"."SHOW_SOCIAL_CREDIT_CODE" IS '展示统一社会信用代码';
COMMENT ON COLUMN "PRJ_MGR_ORG"."WORK_ADDRESS" IS '工作地址';
COMMENT ON COLUMN "PRJ_MGR_ORG"."SHOW_WORK_ADDRESS" IS '展示工作地址';
COMMENT ON COLUMN "PRJ_MGR_ORG"."SHAREHOLDER_INFO" IS '股东信息';
COMMENT ON COLUMN "PRJ_MGR_ORG"."SHOW_SHAREHOLDER_INFO" IS '展示股东信息';
COMMENT ON COLUMN "PRJ_MGR_ORG"."OTHER_INFO" IS '其他信息';
COMMENT ON COLUMN "PRJ_MGR_ORG"."LINKMAN_QQ" IS '联系人QQ号';
COMMENT ON COLUMN "PRJ_MGR_ORG"."BORROWER_GUARANTOR_RELATIVE" IS '借款人与核心担保人是否有关联关系：（1-是/0-否）';
COMMENT ON COLUMN "PRJ_MGR_ORG"."BORROWER_AREA" IS '借款人所在地区（1-华北、2-东北、3-华南、4-华中、5-西部）';
COMMENT ON COLUMN "PRJ_MGR_ORG"."QQ" IS '借款人QQ';
COMMENT ON COLUMN "PRJ_MGR_ORG"."LINKMAN_RELATION" IS '借款人和联系人的关系';
REM Primary key PRJ_MGR_ORG
ALTER TABLE "PRJ_MGR_ORG" ADD CONSTRAINT "PRJ_MGR_ORG_PK" PRIMARY KEY (P_ID) USING INDEX;
REM Index PRJ_MGR_ORG
CREATE INDEX "PRJ_MGR_ORG_PK1" ON "PRJ_MGR_ORG" (P_ID)
/

REM Create Table PRJ_MGR_PERSON
REM Depend on table(s)
REM [PRJ_INDEX]
CREATE TABLE "PRJ_MGR_PERSON" (
	"P_ID" NUMBER NOT NULL,
	"BPMP_ID" NUMBER NOT NULL,
	"SHOW_NAME" VARCHAR2(1280 CHAR) NULL,
	"SHOW_AGE" VARCHAR2(1280 CHAR) NULL,
	"ID_CARD_ADDRESS_PROV" VARCHAR2(4000 CHAR) NULL,
	"ID_CARD_ADDRESS_CITY" VARCHAR2(4000 CHAR) NULL,
	"QUALIFICATION" VARCHAR2(1280 CHAR) NULL,
	"WORK_YEARS" NUMBER(4) NULL,
	"AREA" NUMBER(18,2) NULL,
	"GRM_YEARS" NUMBER(4) NULL,
	"GRM_AREA" NUMBER(18,2) NULL,
	"INTRO" VARCHAR2(4000 CHAR) NULL,
	"NAME" VARCHAR2(1280 CHAR) NULL,
	"AGE" NUMBER NULL,
	"ID_CARD" VARCHAR2(2000 CHAR) NULL,
	"MOBILE" VARCHAR2(2000 CHAR) NULL,
	"EMAIL" VARCHAR2(2000 CHAR) NULL,
	"ADDRESS" VARCHAR2(2000 CHAR) NULL,
	"COMPANY" VARCHAR2(2000 CHAR) NULL,
	"POSITION" VARCHAR2(2000 CHAR) NULL,
	"LOAN_PURPOSES" VARCHAR2(320 CHAR) NULL,
	"LOAN_BAL" NUMBER NULL,
	"OTHER_LOAN_BAL" NUMBER NULL,
	"LOAN_INTRO" VARCHAR2(800 CHAR) NULL,
	"OVERDUE_NUM" NUMBER NULL,
	"OVERDUE_AMT" NUMBER NULL,
	"GENDER" VARCHAR2(1280 CHAR) NULL,
	"VISIBLE" NUMBER DEFAULT 1 NULL,
	"OTHER_OVERDUE_NUM" NUMBER NULL,
	"OTHER_OVERDUE_AMT" NUMBER NULL,
	"ORDER_NO" NUMBER NULL,
	"FAX" VARCHAR2(2000 CHAR) NULL,
	"WCHAT" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_NAME" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_ID_CARD" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_MOBILE" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_FAX" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_EMAIL" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_WCHAT" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_ADDRESS" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_SHOW_ADDRESS" VARCHAR2(400 CHAR) NULL,
	"LINKMAN_SHOW_NAME" VARCHAR2(240 CHAR) NULL,
	"SHOW_ADDRESS" VARCHAR2(640 CHAR) NULL,
	"INDUSTRY" VARCHAR2(200 CHAR) NULL,
	"WORK_NATURE" VARCHAR2(2000 CHAR) NULL,
	"OTHER_INFO" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_QQ" VARCHAR2(2000 CHAR) NULL,
	"BORROWER_GUARANTOR_RELATIVE" NUMBER NULL,
	"BORROWER_AREA" NUMBER NULL,
	"QQ" VARCHAR2(2000 CHAR) NULL,
	"LINKMAN_RELATION" VARCHAR2(2000 CHAR) NULL
);
COMMENT ON TABLE "PRJ_MGR_PERSON" IS '借款人-个人-快照表';
REM Column comments PRJ_MGR_PERSON
COMMENT ON COLUMN "PRJ_MGR_PERSON"."P_ID" IS '项目经理快照，与项目一一对应';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."BPMP_ID" IS '关联基础数据库表';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."SHOW_NAME" IS '展示姓名';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."SHOW_AGE" IS '年龄';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."ID_CARD_ADDRESS_PROV" IS '身份证所在地省份';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."ID_CARD_ADDRESS_CITY" IS '身份证所在城市';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."QUALIFICATION" IS '从业资质（删，但为兼容老数据表中暂不删）';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."WORK_YEARS" IS '从业经历';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."AREA" IS '参建建筑面积（删，但为兼容老数据表中暂不删）';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."GRM_YEARS" IS '担任项目经理年限（删，但为兼容老数据表中暂不删）';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."GRM_AREA" IS '担任项目经理实施面积（删，但为兼容老数据表中暂不删）';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."INTRO" IS '介绍';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."NAME" IS '真实姓名';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."AGE" IS '年龄';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."ID_CARD" IS '身份证号';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."MOBILE" IS '手机号码';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."EMAIL" IS '邮箱';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."ADDRESS" IS '地址';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."COMPANY" IS '工作单位';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."POSITION" IS '现任职务';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."LOAN_PURPOSES" IS '借款用途';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."LOAN_BAL" IS '平台借款余额';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."OTHER_LOAN_BAL" IS '其他平台借款余额';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."LOAN_INTRO" IS '借款概况';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."OVERDUE_NUM" IS '在本平台的逾期次数';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."OVERDUE_AMT" IS '在本平台的逾期金额';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."GENDER" IS '性别';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."VISIBLE" IS '前台是否可见，1可见；0不可见';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."OTHER_OVERDUE_NUM" IS '在其他平台的逾期次数';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."OTHER_OVERDUE_AMT" IS '在其他平台的逾期金额';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."ORDER_NO" IS '序号（合同借款人的排序规则）';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."FAX" IS '传真';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."WCHAT" IS '微信号';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."LINKMAN_NAME" IS '联系人姓名';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."LINKMAN_ID_CARD" IS '联系人身份证号';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."LINKMAN_MOBILE" IS '联系人手机号';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."LINKMAN_FAX" IS '联系人传真';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."LINKMAN_EMAIL" IS '联系人电子邮箱';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."LINKMAN_WCHAT" IS '联系人微信号';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."LINKMAN_ADDRESS" IS '联系人送达地址';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."LINKMAN_SHOW_ADDRESS" IS '展示联系人地址';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."LINKMAN_SHOW_NAME" IS '展示联系人姓名';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."SHOW_ADDRESS" IS '展示地址';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."LINKMAN_QQ" IS '联系人QQ号';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."BORROWER_GUARANTOR_RELATIVE" IS '借款人与核心担保人是否有关联关系：（1-是/0-否）';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."BORROWER_AREA" IS '借款人所在地区（1-华北、2-东北、3-华南、4-华中、5-西部）';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."QQ" IS '借款人QQ';
COMMENT ON COLUMN "PRJ_MGR_PERSON"."LINKMAN_RELATION" IS '借款人和联系人的关系';
REM Primary key PRJ_MGR_PERSON
ALTER TABLE "PRJ_MGR_PERSON" ADD CONSTRAINT "PRJ_MGR_PERSON_PK" PRIMARY KEY (P_ID,BPMP_ID) USING INDEX;
REM Foreign keys PRJ_MGR_PERSON
ALTER TABLE "PRJ_MGR_PERSON" ADD CONSTRAINT "PRJ_MGR_PERSON_PRJ_INDEX_FK1" FOREIGN KEY (P_ID) REFERENCES "PRJ_INDEX" (P_ID) ON DELETE CASCADE;
/

REM Create Table PRJ_MORTGAGE
CREATE TABLE "PRJ_MORTGAGE" (
	"PM_ID" NUMBER NOT NULL,
	"P_ID" NUMBER NOT NULL,
	"BPM_ID" NUMBER NULL,
	"M_TYPE" NUMBER DEFAULT 2 NOT NULL,
	"CONTENT" <Unknown> NOT NULL,
	"EVALUATION" NUMBER NOT NULL,
	"OWNER_NAME" <Unknown> NOT NULL,
	"OWNER_SHOW_NAME" <Unknown> NOT NULL,
	"OWNER_ID_NO" <Unknown> NULL,
	"LINK_MAN" <Unknown> NULL,
	"LINK_MOBILE" <Unknown> NULL,
	"LINK_ADDRESS" <Unknown> NULL,
	"GUARA_HIGH_CREDIT_AMT" NUMBER(18) NULL,
	"ORDER_NO" NUMBER NULL,
	"VISIBLE" NUMBER NULL,
	"REMARK" <Unknown> NULL
);
COMMENT ON TABLE "PRJ_MORTGAGE" IS '抵押物-快照表';
REM Column comments PRJ_MORTGAGE
COMMENT ON COLUMN "PRJ_MORTGAGE"."PM_ID" IS '抵押物快照表id';
COMMENT ON COLUMN "PRJ_MORTGAGE"."P_ID" IS '项目id';
COMMENT ON COLUMN "PRJ_MORTGAGE"."BPM_ID" IS '抵押物基础表id';
COMMENT ON COLUMN "PRJ_MORTGAGE"."M_TYPE" IS '抵押方式 1-抵押，2-质押';
COMMENT ON COLUMN "PRJ_MORTGAGE"."CONTENT" IS '抵押物内容';
COMMENT ON COLUMN "PRJ_MORTGAGE"."EVALUATION" IS '抵押物估值';
COMMENT ON COLUMN "PRJ_MORTGAGE"."OWNER_NAME" IS '抵押人姓名或者机构名称';
COMMENT ON COLUMN "PRJ_MORTGAGE"."OWNER_SHOW_NAME" IS '抵押人展示名称';
COMMENT ON COLUMN "PRJ_MORTGAGE"."OWNER_ID_NO" IS '抵押人证件号（身份证号或社会信用代码证号）';
COMMENT ON COLUMN "PRJ_MORTGAGE"."LINK_MAN" IS '联系人姓名';
COMMENT ON COLUMN "PRJ_MORTGAGE"."LINK_MOBILE" IS '联系人手机号码';
COMMENT ON COLUMN "PRJ_MORTGAGE"."LINK_ADDRESS" IS '联系人地址';
COMMENT ON COLUMN "PRJ_MORTGAGE"."GUARA_HIGH_CREDIT_AMT" IS '担保的最高债权额';
COMMENT ON COLUMN "PRJ_MORTGAGE"."ORDER_NO" IS '排列顺序';
COMMENT ON COLUMN "PRJ_MORTGAGE"."VISIBLE" IS '前台是否可见';
COMMENT ON COLUMN "PRJ_MORTGAGE"."REMARK" IS '备注';
REM Primary key PRJ_MORTGAGE
ALTER TABLE "PRJ_MORTGAGE" ADD CONSTRAINT "SYS_C0026131" PRIMARY KEY (PM_ID) USING INDEX;
/

REM Create Table PRJ_OWNER
REM Depend on table(s)
REM [PRJ_INDEX]
CREATE TABLE "PRJ_OWNER" (
	"P_ID" NUMBER NOT NULL,
	"BO_ID" NUMBER NULL,
	"OWNER_SHOW_NAME" VARCHAR2(4000 CHAR) NULL,
	"SHOW_REG_FUNDS" VARCHAR2(1280 CHAR) NULL,
	"ENT_INDUSTRY" VARCHAR2(1280 CHAR) NULL,
	"INTRO" VARCHAR2(4000 CHAR) NULL,
	"OWNER_NAME" VARCHAR2(1280 CHAR) NULL,
	"REG_FUNDS" NUMBER(18,2) NULL,
	"OWNER_QUALITY" VARCHAR2(1280 CHAR) NULL,
	"OWNER_STRENGTH" VARCHAR2(1280 CHAR) NULL,
	"OWNER_NATURE" VARCHAR2(1280 CHAR) NULL,
	"REGISTERED_DATE" DATE NULL,
	"REG_YEARS" NUMBER NULL
);
COMMENT ON TABLE "PRJ_OWNER" IS '项目业主信息表';
REM Column comments PRJ_OWNER
COMMENT ON COLUMN "PRJ_OWNER"."P_ID" IS '项目业主快照。与项目一一对应。';
COMMENT ON COLUMN "PRJ_OWNER"."BO_ID" IS '关联基础数据库项目业主表';
COMMENT ON COLUMN "PRJ_OWNER"."OWNER_SHOW_NAME" IS '项目业主展示名';
COMMENT ON COLUMN "PRJ_OWNER"."SHOW_REG_FUNDS" IS '注册展示资金';
COMMENT ON COLUMN "PRJ_OWNER"."ENT_INDUSTRY" IS '所属行业';
COMMENT ON COLUMN "PRJ_OWNER"."INTRO" IS '企业介绍';
COMMENT ON COLUMN "PRJ_OWNER"."OWNER_NAME" IS '业主名称';
COMMENT ON COLUMN "PRJ_OWNER"."REG_FUNDS" IS '注册资金';
COMMENT ON COLUMN "PRJ_OWNER"."OWNER_QUALITY" IS '企业质量';
COMMENT ON COLUMN "PRJ_OWNER"."OWNER_STRENGTH" IS '企业实力';
COMMENT ON COLUMN "PRJ_OWNER"."OWNER_NATURE" IS '企业性质';
COMMENT ON COLUMN "PRJ_OWNER"."REGISTERED_DATE" IS '注册时间（成立时间）';
COMMENT ON COLUMN "PRJ_OWNER"."REG_YEARS" IS '注册年限';
REM Primary key PRJ_OWNER
ALTER TABLE "PRJ_OWNER" ADD CONSTRAINT "PRJ_OWNER_PK" PRIMARY KEY (P_ID) USING INDEX;
REM Foreign keys PRJ_OWNER
ALTER TABLE "PRJ_OWNER" ADD CONSTRAINT "PRJ_OWNER_PRJ_INDEX_FK1" FOREIGN KEY (P_ID) REFERENCES "PRJ_INDEX" (P_ID) ON DELETE CASCADE;
REM Index PRJ_OWNER
CREATE INDEX "PRJ_OWNER_P_ID_BO_ID" ON "PRJ_OWNER" (P_ID,BO_ID)
/

REM Create Table PRJ_PERMISSIBLE_INVESTORS
REM Depend on table(s)
REM [PRJ_INDEX]
CREATE TABLE "PRJ_PERMISSIBLE_INVESTORS" (
	"P_ID" NUMBER NOT NULL,
	"AU_ID" NUMBER NOT NULL,
	"I_ROLE" NUMBER DEFAULT 1 NOT NULL
);
COMMENT ON TABLE "PRJ_PERMISSIBLE_INVESTORS" IS '白名单表';
REM Column comments PRJ_PERMISSIBLE_INVESTORS
COMMENT ON COLUMN "PRJ_PERMISSIBLE_INVESTORS"."P_ID" IS '项目白名单用户';
COMMENT ON COLUMN "PRJ_PERMISSIBLE_INVESTORS"."AU_ID" IS '用户id';
COMMENT ON COLUMN "PRJ_PERMISSIBLE_INVESTORS"."I_ROLE" IS '1-普通投资 2-第三
方担保';
REM Primary key PRJ_PERMISSIBLE_INVESTORS
ALTER TABLE "PRJ_PERMISSIBLE_INVESTORS" ADD CONSTRAINT "PRJ_PERMISSIBLE_INVESTORS_PK" PRIMARY KEY (P_ID,AU_ID,I_ROLE) USING INDEX;
REM Constraints PRJ_PERMISSIBLE_INVESTORS
ALTER TABLE "PRJ_PERMISSIBLE_INVESTORS" ADD CONSTRAINT "PRJ_PERMISSIBLE_INVESTOR_CHK1" CHECK ("I_ROLE"=1 OR "I_ROLE"=2);
REM Foreign keys PRJ_PERMISSIBLE_INVESTORS
ALTER TABLE "PRJ_PERMISSIBLE_INVESTORS" ADD CONSTRAINT "PRJ_PERMISSIBLE_INVESTORS_FK1" FOREIGN KEY (P_ID) REFERENCES "PRJ_INDEX" (P_ID) ON DELETE CASCADE;
/

REM Create Table PRJ_PROGRESS
CREATE TABLE "PRJ_PROGRESS" (
	"P_ID" NUMBER NOT NULL,
	"DATE_POINT" VARCHAR2(50) NULL,
	"APPLICATION_OF_FUNDS" VARCHAR2(200) NULL,
	"FINANCE_STATUS" VARCHAR2(200) NULL,
	"REPAY_ABILITY_STATUS" VARCHAR2(200) NULL,
	"OVERDUE_STATUS" VARCHAR2(200) NULL,
	"LAWSUIT_INVOLVED_STATUS" VARCHAR2(200) NULL,
	"PUNISH_STATUS" VARCHAR2(200) NULL,
	"OTHERS" VARCHAR2(200) NULL
);
COMMENT ON TABLE "PRJ_PROGRESS" IS '借款人贷后信息维护表';
REM Column comments PRJ_PROGRESS
COMMENT ON COLUMN "PRJ_PROGRESS"."P_ID" IS '项目id';
COMMENT ON COLUMN "PRJ_PROGRESS"."DATE_POINT" IS '创建时间';
COMMENT ON COLUMN "PRJ_PROGRESS"."APPLICATION_OF_FUNDS" IS '借款人资金运用情况';
COMMENT ON COLUMN "PRJ_PROGRESS"."FINANCE_STATUS" IS '借款人经营状况及财务状况';
COMMENT ON COLUMN "PRJ_PROGRESS"."REPAY_ABILITY_STATUS" IS '借款人还款能力变化情况';
COMMENT ON COLUMN "PRJ_PROGRESS"."OVERDUE_STATUS" IS '借款人逾期情况';
COMMENT ON COLUMN "PRJ_PROGRESS"."LAWSUIT_INVOLVED_STATUS" IS '借款人涉诉情况';
COMMENT ON COLUMN "PRJ_PROGRESS"."PUNISH_STATUS" IS '借款人受行政处罚情况';
COMMENT ON COLUMN "PRJ_PROGRESS"."OTHERS" IS '其他情况';
REM Primary key PRJ_PROGRESS
ALTER TABLE "PRJ_PROGRESS" ADD CONSTRAINT "" PRIMARY KEY () USING INDEX;
/

REM Create Table PRJ_RATING
REM Depend on table(s)
REM [PRJ_INDEX]
CREATE TABLE "PRJ_RATING" (
	"P_ID" NUMBER NOT NULL,
	"PRJ_RATING" VARCHAR2(1280 CHAR) DEFAULT 0 NOT NULL,
	"S_ENGINEERING" NUMBER(6,2) DEFAULT 0 NOT NULL,
	"S_PROJ_MGR" NUMBER(6,2) DEFAULT 0 NOT NULL,
	"S_CTOR" NUMBER(6,2) DEFAULT 0 NOT NULL,
	"S_OWNER" NUMBER(6,2) DEFAULT 0 NOT NULL,
	"S_GUARANTEE" NUMBER(6,2) DEFAULT 0 NOT NULL,
	"S_ALL" NUMBER(6,2) DEFAULT 0 NOT NULL,
	"PRJ_RISK_ASSESS" VARCHAR2(4000 CHAR) DEFAULT 0 NULL
);
COMMENT ON TABLE "PRJ_RATING" IS '项目评级快照表';
REM Column comments PRJ_RATING
COMMENT ON COLUMN "PRJ_RATING"."P_ID" IS '项目评级。与项目表一一对应。';
COMMENT ON COLUMN "PRJ_RATING"."PRJ_RATING" IS '融资项目评级';
COMMENT ON COLUMN "PRJ_RATING"."S_ENGINEERING" IS '工程概括得分';
COMMENT ON COLUMN "PRJ_RATING"."S_PROJ_MGR" IS '项目经理得分';
COMMENT ON COLUMN "PRJ_RATING"."S_CTOR" IS '施工单位得分';
COMMENT ON COLUMN "PRJ_RATING"."S_OWNER" IS '项目业主得分';
COMMENT ON COLUMN "PRJ_RATING"."S_GUARANTEE" IS '借款担保得分';
COMMENT ON COLUMN "PRJ_RATING"."S_ALL" IS '项目总得分';
COMMENT ON COLUMN "PRJ_RATING"."PRJ_RISK_ASSESS" IS '项目风险评估';
REM Primary key PRJ_RATING
ALTER TABLE "PRJ_RATING" ADD CONSTRAINT "PRJ_RATING_PK" PRIMARY KEY (P_ID) USING INDEX;
REM Foreign keys PRJ_RATING
ALTER TABLE "PRJ_RATING" ADD CONSTRAINT "PRJ_RATING_PRJ_INDEX_FK1" FOREIGN KEY (P_ID) REFERENCES "PRJ_INDEX" (P_ID) ON DELETE CASCADE;
/

REM Create Table PRJ_REMARKS
REM Depend on table(s)
REM [PRJ_INDEX]
CREATE TABLE "PRJ_REMARKS" (
	"P_ID" NUMBER NOT NULL,
	"CONTENT" CLOB NULL,
	"LAST_TIME" DATE NULL,
	"LAST_UNAME" VARCHAR2(3200 CHAR) NULL,
	"TYPE" NUMBER DEFAULT 1 NOT NULL
);
REM Column comments PRJ_REMARKS
COMMENT ON COLUMN "PRJ_REMARKS"."P_ID" IS '项目ID';
COMMENT ON COLUMN "PRJ_REMARKS"."CONTENT" IS '内容';
COMMENT ON COLUMN "PRJ_REMARKS"."LAST_TIME" IS '最后修改时间';
COMMENT ON COLUMN "PRJ_REMARKS"."LAST_UNAME" IS '最后操作人用户名';
COMMENT ON COLUMN "PRJ_REMARKS"."TYPE" IS '1-推荐导语 2-项目担保机构备注 3-项目评级备注 4-还款计划备注 5-资金结构信息 6-担保条例信息 7-收益分配信息 8-投资组合信息 9-风险提示信息 10-个人借款概况 11- 企业借款概况 12 -项目个人备注';
REM Primary key PRJ_REMARKS
ALTER TABLE "PRJ_REMARKS" ADD CONSTRAINT "PRJ_REMARKS_PK" PRIMARY KEY (P_ID,TYPE) USING INDEX;
REM Foreign keys PRJ_REMARKS
ALTER TABLE "PRJ_REMARKS" ADD CONSTRAINT "PRJ_REMARKS_PRJ_INDEX_FK1" FOREIGN KEY (P_ID) REFERENCES "PRJ_INDEX" (P_ID) ON DELETE CASCADE;
/

REM Create Table SHCA_DOC_SIGN
CREATE TABLE "SHCA_DOC_SIGN" (
	"SDS_ID" NUMBER NOT NULL,
	"STATUS" NUMBER NOT NULL,
	"CREATOR" VARCHAR2(400 CHAR) NOT NULL,
	"CREATE_TIME" DATE NOT NULL,
	"UPDATER" VARCHAR2(400 CHAR) NULL,
	"UPDATE_TIME" DATE NULL,
	"SIGN_TIME" DATE NULL,
	"CA_ID" VARCHAR2(400 CHAR) NOT NULL,
	"EXPIRY_TIME" DATE NOT NULL
);
REM Column comments SHCA_DOC_SIGN
COMMENT ON COLUMN "SHCA_DOC_SIGN"."SDS_ID" IS '签署实例id';
COMMENT ON COLUMN "SHCA_DOC_SIGN"."STATUS" IS '签署状态（0已上传但未完成签署，1部分签署，2签署完成并已下载）';
COMMENT ON COLUMN "SHCA_DOC_SIGN"."CREATOR" IS '创建者';
COMMENT ON COLUMN "SHCA_DOC_SIGN"."CREATE_TIME" IS '创建时间（签章文件上传时间）';
COMMENT ON COLUMN "SHCA_DOC_SIGN"."UPDATER" IS '更新者';
COMMENT ON COLUMN "SHCA_DOC_SIGN"."UPDATE_TIME" IS '更新时间';
COMMENT ON COLUMN "SHCA_DOC_SIGN"."SIGN_TIME" IS '最后签署完成时间';
COMMENT ON COLUMN "SHCA_DOC_SIGN"."CA_ID" IS '上海CA返回的  ID';
COMMENT ON COLUMN "SHCA_DOC_SIGN"."EXPIRY_TIME" IS '过期时间';
REM Primary key SHCA_DOC_SIGN
ALTER TABLE "SHCA_DOC_SIGN" ADD CONSTRAINT "SHCA_DOC_SIGN_PK" PRIMARY KEY (SDS_ID) USING INDEX;
/

REM Create Table SHCA_SIGN_USER
REM Depend on table(s)
REM [SHCA_DOC_SIGN]
CREATE TABLE "SHCA_SIGN_USER" (
	"SDS_ID" NUMBER NOT NULL,
	"S_ID_NO" VARCHAR2(160 CHAR) NOT NULL,
	"S_LINK" VARCHAR2(800 CHAR) NOT NULL,
	"STATUS" NUMBER NOT NULL,
	"S_TYPE" NUMBER DEFAULT 0 NOT NULL,
	"S_NAME" VARCHAR2(80 CHAR) NULL,
	"S_MOBILE" VARCHAR2(40 CHAR) NULL,
	"S_ID_TYPE" VARCHAR2(16 CHAR) DEFAULT 'BK' NOT NULL
);
REM Column comments SHCA_SIGN_USER
COMMENT ON COLUMN "SHCA_SIGN_USER"."SDS_ID" IS '所属的签署实例ID';
COMMENT ON COLUMN "SHCA_SIGN_USER"."S_ID_NO" IS '需要签署的帐户证件号';
COMMENT ON COLUMN "SHCA_SIGN_USER"."S_LINK" IS '签署链接';
COMMENT ON COLUMN "SHCA_SIGN_USER"."STATUS" IS '签署状态 -1表示已上传但是状态未知,0拒签，1已签。';
COMMENT ON COLUMN "SHCA_SIGN_USER"."S_TYPE" IS '1个人；2机构；';
COMMENT ON COLUMN "SHCA_SIGN_USER"."S_NAME" IS '签署方的名字。';
COMMENT ON COLUMN "SHCA_SIGN_USER"."S_MOBILE" IS '签署方的手机号码';
COMMENT ON COLUMN "SHCA_SIGN_USER"."S_ID_TYPE" IS '需要签署的帐户证件类型';
REM Primary key SHCA_SIGN_USER
ALTER TABLE "SHCA_SIGN_USER" ADD CONSTRAINT "SHCA_SIGN_USER_PK" PRIMARY KEY (SDS_ID,S_ID_TYPE,S_ID_NO) USING INDEX;
REM Foreign keys SHCA_SIGN_USER
ALTER TABLE "SHCA_SIGN_USER" ADD CONSTRAINT "SHCA_SIGN_USER_FK1" FOREIGN KEY (SDS_ID) REFERENCES "SHCA_DOC_SIGN" (SDS_ID) ON DELETE CASCADE;
/

REM Create Table SYS_ACTION_LOG
CREATE TABLE "SYS_ACTION_LOG" (
	"SAL_ID" NUMBER NOT NULL,
	"U_NAME" VARCHAR2(160 CHAR) NULL,
	"IP" VARCHAR2(160 CHAR) NULL,
	"DATEPOINT" DATE NULL,
	"CATEGORY" NUMBER NULL,
	"ACTION" NUMBER NULL,
	"REMARK" VARCHAR2(4000 CHAR) NULL
);
REM Column comments SYS_ACTION_LOG
COMMENT ON COLUMN "SYS_ACTION_LOG"."SAL_ID" IS '主键';
COMMENT ON COLUMN "SYS_ACTION_LOG"."U_NAME" IS '操作用户名';
COMMENT ON COLUMN "SYS_ACTION_LOG"."IP" IS '操作机器ip';
COMMENT ON COLUMN "SYS_ACTION_LOG"."DATEPOINT" IS '操作时间';
COMMENT ON COLUMN "SYS_ACTION_LOG"."CATEGORY" IS '类别（1 后台维护，2 基础数据，3 项目，4 CRM）';
COMMENT ON COLUMN "SYS_ACTION_LOG"."ACTION" IS '操作项：11 创建运维帐户';
COMMENT ON COLUMN "SYS_ACTION_LOG"."REMARK" IS '备注';
REM Primary key SYS_ACTION_LOG
ALTER TABLE "SYS_ACTION_LOG" ADD CONSTRAINT "SYS_ACTION_LOG_PK" PRIMARY KEY (SAL_ID) USING INDEX;
/

REM Create Table SYS_ACTION_LOG_KEYWORDS
CREATE TABLE "SYS_ACTION_LOG_KEYWORDS" (
	"SAL_ID" NUMBER NOT NULL,
	"VALUE" VARCHAR2(800 CHAR) NOT NULL
);
REM Column comments SYS_ACTION_LOG_KEYWORDS
COMMENT ON COLUMN "SYS_ACTION_LOG_KEYWORDS"."SAL_ID" IS '外键';
COMMENT ON COLUMN "SYS_ACTION_LOG_KEYWORDS"."VALUE" IS '关键字';
REM Primary key SYS_ACTION_LOG_KEYWORDS
ALTER TABLE "SYS_ACTION_LOG_KEYWORDS" ADD CONSTRAINT "SYS_ACTION_LOG_KEYWORDS_PK" PRIMARY KEY (SAL_ID,VALUE) USING INDEX;
/

REM Create Table TS_AUTO_BID_AUTH
CREATE TABLE "TS_AUTO_BID_AUTH" (
	"TBA_ID" NUMBER NOT NULL,
	"AU_ID" NUMBER NULL,
	"AMT" NUMBER NULL,
	"TOT_AMT" NUMBER NULL,
	"DEADLINE" DATE NULL,
	"LAST_SRV_AUTH_CODE" VARCHAR2(100) NULL,
	"SMS_CODE" VARCHAR2(20) NULL,
	"DATEPOINT" DATE NULL,
	"STATUS" NUMBER NULL,
	"ORDER_ID" VARCHAR2(100) NULL,
	"AVAILABLE" NUMBER DEFAULT 0 NULL
);
COMMENT ON TABLE "TS_AUTO_BID_AUTH" IS '自动投标签约业务表';
REM Column comments TS_AUTO_BID_AUTH
COMMENT ON COLUMN "TS_AUTO_BID_AUTH"."TBA_ID" IS '自动投标签约业务id';
COMMENT ON COLUMN "TS_AUTO_BID_AUTH"."AU_ID" IS '用户id';
COMMENT ON COLUMN "TS_AUTO_BID_AUTH"."AMT" IS '单笔投标金额的上限';
COMMENT ON COLUMN "TS_AUTO_BID_AUTH"."TOT_AMT" IS '自动投标总金额上限（不算已还金额）';
COMMENT ON COLUMN "TS_AUTO_BID_AUTH"."DEADLINE" IS '签约到期日';
COMMENT ON COLUMN "TS_AUTO_BID_AUTH"."LAST_SRV_AUTH_CODE" IS '前导业务授权码';
COMMENT ON COLUMN "TS_AUTO_BID_AUTH"."SMS_CODE" IS '验证码';
COMMENT ON COLUMN "TS_AUTO_BID_AUTH"."DATEPOINT" IS '交易完成时间';
COMMENT ON COLUMN "TS_AUTO_BID_AUTH"."STATUS" IS '交易状态：0-未成功 1-已成功';
COMMENT ON COLUMN "TS_AUTO_BID_AUTH"."ORDER_ID" IS '订单号';
COMMENT ON COLUMN "TS_AUTO_BID_AUTH"."AVAILABLE" IS '0-无效， 1-有效';
REM Primary key TS_AUTO_BID_AUTH
ALTER TABLE "TS_AUTO_BID_AUTH" ADD CONSTRAINT "TS_AUTO_BID_AUTH_PK" PRIMARY KEY (TBA_ID) USING INDEX;
REM Index TS_AUTO_BID_AUTH
CREATE INDEX "TS_AUTO_BID_AUTH_AU_ID" ON "TS_AUTO_BID_AUTH" (AU_ID)
/

REM Create Table TS_AUTO_TENDER_LOG
CREATE TABLE "TS_AUTO_TENDER_LOG" (
	"TTL_ID" NUMBER NOT NULL,
	"AU_ID" NUMBER NOT NULL,
	"TT_ID" NUMBER NULL,
	"TYPE" NUMBER NULL,
	"REMARK" VARCHAR2(2000) NULL,
	"DATEPOINT" TIMESTAMP(6) NULL,
	"P_ID" NUMBER NULL
);
COMMENT ON TABLE "TS_AUTO_TENDER_LOG" IS '自动出借日志表';
REM Column comments TS_AUTO_TENDER_LOG
COMMENT ON COLUMN "TS_AUTO_TENDER_LOG"."TTL_ID" IS '自动投标过程记录表id';
COMMENT ON COLUMN "TS_AUTO_TENDER_LOG"."AU_ID" IS '用户id';
COMMENT ON COLUMN "TS_AUTO_TENDER_LOG"."TT_ID" IS '投标成功的业务（ts_tender）id';
COMMENT ON COLUMN "TS_AUTO_TENDER_LOG"."TYPE" IS '记录类型：0.投标成功1. 项目风险级别不匹配
2. 借款天数不匹配
3. 单笔最大出借额不匹配
4. 用户投资等级不匹配
5. 项目基本信息不配（项目锁定或融资人为投资人或项目状态为非募集中）
6. 白名单验证不匹配
7. 新手标验证不匹配
8. 账户余额不足
9. 对项目实际可投资上限小于起投金额
10. 投标执行失败
11. 自动投标用户和项目信息
 11. 自动投标用户和项目信息';
COMMENT ON COLUMN "TS_AUTO_TENDER_LOG"."REMARK" IS '记录详情描述';
COMMENT ON COLUMN "TS_AUTO_TENDER_LOG"."DATEPOINT" IS '记录时间';
COMMENT ON COLUMN "TS_AUTO_TENDER_LOG"."P_ID" IS '项目id';
REM Primary key TS_AUTO_TENDER_LOG
ALTER TABLE "TS_AUTO_TENDER_LOG" ADD CONSTRAINT "TS_AUTO_TENDER_LOG_PK" PRIMARY KEY (TTL_ID) USING INDEX;
/

REM Create Table TS_B2C_DETAIL
CREATE TABLE "TS_B2C_DETAIL" (
	"TBD_ID" NUMBER NOT NULL,
	"CREATOR" VARCHAR2(1280 CHAR) NOT NULL,
	"CREATE_TIME" DATE NOT NULL,
	"REMARK" VARCHAR2(4000 CHAR) NULL
);
COMMENT ON TABLE "TS_B2C_DETAIL" IS '商户转帐明细';
REM Column comments TS_B2C_DETAIL
COMMENT ON COLUMN "TS_B2C_DETAIL"."TBD_ID" IS 'ID';
COMMENT ON COLUMN "TS_B2C_DETAIL"."CREATOR" IS '创建人';
COMMENT ON COLUMN "TS_B2C_DETAIL"."CREATE_TIME" IS '创建时间';
COMMENT ON COLUMN "TS_B2C_DETAIL"."REMARK" IS '备注';
REM Primary key TS_B2C_DETAIL
ALTER TABLE "TS_B2C_DETAIL" ADD CONSTRAINT "TS_B2C_DETAIL_PK" PRIMARY KEY (TBD_ID) USING INDEX;
/

REM Create Table TS_BAIL_ID_MODIFY
CREATE TABLE "TS_BAIL_ID_MODIFY" (
	"TBM_ID" NUMBER NOT NULL,
	"P_ID" NUMBER NULL,
	"NEW_BAIL_AU_ID" NUMBER NULL,
	"DATEPOINT" DATE NULL,
	"STATUS" NUMBER NULL
);
REM Column comments TS_BAIL_ID_MODIFY
COMMENT ON COLUMN "TS_BAIL_ID_MODIFY"."TBM_ID" IS '修改担保账户业务id';
COMMENT ON COLUMN "TS_BAIL_ID_MODIFY"."P_ID" IS '项目id';
COMMENT ON COLUMN "TS_BAIL_ID_MODIFY"."NEW_BAIL_AU_ID" IS '新担保人id';
COMMENT ON COLUMN "TS_BAIL_ID_MODIFY"."DATEPOINT" IS '交易时间';
COMMENT ON COLUMN "TS_BAIL_ID_MODIFY"."STATUS" IS '状态。0未成功，1已成功。';
REM Primary key TS_BAIL_ID_MODIFY
ALTER TABLE "TS_BAIL_ID_MODIFY" ADD CONSTRAINT "" PRIMARY KEY () USING INDEX;
/

REM Create Table TS_CANCEL_TENDER
CREATE TABLE "TS_CANCEL_TENDER" (
	"TCT_ID" NUMBER NOT NULL,
	"TT_ID" NUMBER NULL,
	"AMT" NUMBER(18,2) DEFAULT 0 NULL,
	"DATEPOINT" DATE NULL,
	"REMARK" VARCHAR2(4000 CHAR) NULL,
	"STATUS" NUMBER DEFAULT 0 NULL
);
REM Column comments TS_CANCEL_TENDER
COMMENT ON COLUMN "TS_CANCEL_TENDER"."TCT_ID" IS '主键，业务id';
COMMENT ON COLUMN "TS_CANCEL_TENDER"."TT_ID" IS '投资id';
COMMENT ON COLUMN "TS_CANCEL_TENDER"."AMT" IS '投资金额（流标金额）';
COMMENT ON COLUMN "TS_CANCEL_TENDER"."DATEPOINT" IS '交易完成的时间点。此字段是 确认交易完成的时间 ，而不是交易发起的时间。';
COMMENT ON COLUMN "TS_CANCEL_TENDER"."REMARK" IS '备注';
COMMENT ON COLUMN "TS_CANCEL_TENDER"."STATUS" IS '状态。0未成功，1已成功。';
REM Primary key TS_CANCEL_TENDER
ALTER TABLE "TS_CANCEL_TENDER" ADD CONSTRAINT "TS_CANCEL_TENDER_PK" PRIMARY KEY (TCT_ID) USING INDEX;
REM Index TS_CANCEL_TENDER
CREATE INDEX "TS_CANCEL_TENDER_TT_ID" ON "TS_CANCEL_TENDER" (TT_ID)
/

REM Create Table TS_COLLECTION
CREATE TABLE "TS_COLLECTION" (
	"TI_ID" NUMBER NOT NULL,
	"PAID_AMT" NUMBER(18,2) NULL,
	"AMT" NUMBER(18,2) NULL,
	"CREATE_DATE" DATE NULL,
	"CREATOR" VARCHAR2(480 CHAR) NULL,
	"DELETED" NUMBER NULL,
	"TRAN_NO" NUMBER NOT NULL,
	"TRAN_TYPE" NUMBER NOT NULL,
	"OVERDUE_AMT" NUMBER(18,2) NULL,
	"PAID_OVERDUE_AMT" NUMBER(18,2) NULL,
	"FEE_RATE" NUMBER(8,3) NULL,
	"PAID_TIME" DATE NULL
);
REM Column comments TS_COLLECTION
COMMENT ON COLUMN "TS_COLLECTION"."TI_ID" IS 'ts_invest表id';
COMMENT ON COLUMN "TS_COLLECTION"."PAID_AMT" IS '已收金额';
COMMENT ON COLUMN "TS_COLLECTION"."AMT" IS '应收金额';
COMMENT ON COLUMN "TS_COLLECTION"."CREATE_DATE" IS '创建时间';
COMMENT ON COLUMN "TS_COLLECTION"."CREATOR" IS '创建人';
COMMENT ON COLUMN "TS_COLLECTION"."DELETED" IS '记录是否有效(0:有效，1:无效)';
COMMENT ON COLUMN "TS_COLLECTION"."TRAN_NO" IS '期数';
COMMENT ON COLUMN "TS_COLLECTION"."TRAN_TYPE" IS '0:利息1:本金, 2： 罚息';
COMMENT ON COLUMN "TS_COLLECTION"."OVERDUE_AMT" IS '应收逾期金额';
COMMENT ON COLUMN "TS_COLLECTION"."PAID_OVERDUE_AMT" IS '已收逾期金额';
COMMENT ON COLUMN "TS_COLLECTION"."FEE_RATE" IS '服务费率';
COMMENT ON COLUMN "TS_COLLECTION"."PAID_TIME" IS '还款时间(在还款后更新该字段,如果某一期分成多次来还,更新paid_amt的同时要更新该字段)';
REM Primary key TS_COLLECTION
ALTER TABLE "TS_COLLECTION" ADD CONSTRAINT "TS_COLLECTION_PK" PRIMARY KEY (TI_ID,TRAN_NO,TRAN_TYPE) USING INDEX;
REM Constraints TS_COLLECTION
ALTER TABLE "TS_COLLECTION" ADD CONSTRAINT "TS_COLLECTION_AMT" CHECK (AMT >= 0);
/

REM Create Table TS_CREDIT_ASSIGN
CREATE TABLE "TS_CREDIT_ASSIGN" (
	"TCA_ID" NUMBER NOT NULL,
	"P_ID" NUMBER NULL,
	"TI_ID" NUMBER NULL,
	"AU_ID" NUMBER NULL,
	"AMT" NUMBER(18,2) DEFAULT 0 NULL,
	"FEE" NUMBER(18,2) NULL,
	"DATEPOINT" DATE NULL,
	"REMARK" VARCHAR2(4000 CHAR) NULL,
	"STATUS" NUMBER DEFAULT 0 NULL,
	"ORDER_NO" VARCHAR2(640 CHAR) NULL,
	"ORG_ORDER_NO" VARCHAR2(1280 CHAR) NULL,
	"AUTH_CODE" VARCHAR2(50) NULL,
	"NOTIFY_URL" VARCHAR2(200 CHAR) NULL,
	"CREDIT_ASSIGN_URL" VARCHAR2(200 CHAR) NULL
);
COMMENT ON TABLE "TS_CREDIT_ASSIGN" IS '债权业务表';
REM Column comments TS_CREDIT_ASSIGN
COMMENT ON COLUMN "TS_CREDIT_ASSIGN"."TCA_ID" IS '主键，业务id';
COMMENT ON COLUMN "TS_CREDIT_ASSIGN"."P_ID" IS '债权转让项目表PRJ_CREDIT_ASSIGN的P_ID，或是0，不是原始投资项目的P_ID';
COMMENT ON COLUMN "TS_CREDIT_ASSIGN"."TI_ID" IS '买入的债权(投资表TS_INVEST)的ID';
COMMENT ON COLUMN "TS_CREDIT_ASSIGN"."AU_ID" IS '关联的ACC_USER表的ID 买入债权的用户ID';
COMMENT ON COLUMN "TS_CREDIT_ASSIGN"."AMT" IS '成交金额';
COMMENT ON COLUMN "TS_CREDIT_ASSIGN"."FEE" IS '服务费';
COMMENT ON COLUMN "TS_CREDIT_ASSIGN"."DATEPOINT" IS '交易完成的时间点。此字段是 确认交易完成的时间 ，而不是交易发起的时间。';
COMMENT ON COLUMN "TS_CREDIT_ASSIGN"."REMARK" IS '备注';
COMMENT ON COLUMN "TS_CREDIT_ASSIGN"."STATUS" IS '状态。0未成功，1已成功。';
COMMENT ON COLUMN "TS_CREDIT_ASSIGN"."ORDER_NO" IS '订单号（本平台生成）';
COMMENT ON COLUMN "TS_CREDIT_ASSIGN"."ORG_ORDER_NO" IS '上家原订单号（并非最开始的原订单号）';
COMMENT ON COLUMN "TS_CREDIT_ASSIGN"."AUTH_CODE" IS '授权码';
COMMENT ON COLUMN "TS_CREDIT_ASSIGN"."NOTIFY_URL" IS '债权转让通知书url';
COMMENT ON COLUMN "TS_CREDIT_ASSIGN"."CREDIT_ASSIGN_URL" IS '债权转让协议url';
REM Primary key TS_CREDIT_ASSIGN
ALTER TABLE "TS_CREDIT_ASSIGN" ADD CONSTRAINT "TS_CREDIT_ASSIGN_PK" PRIMARY KEY (TCA_ID) USING INDEX;
REM Index TS_CREDIT_ASSIGN
CREATE INDEX "TS_CREDIT_ASSIGN_AU_ID" ON "TS_CREDIT_ASSIGN" (AU_ID)
CREATE INDEX "TS_CREDIT_ASSIGN_TI_ID" ON "TS_CREDIT_ASSIGN" (TI_ID)
/

REM Create Table TS_CREDIT_END
CREATE TABLE "TS_CREDIT_END" (
	"TCE_ID" NUMBER NOT NULL,
	"TI_ID" NUMBER NOT NULL,
	"STATUS" NUMBER DEFAULT 0 NULL,
	"DATEPOINT" DATE NULL,
	"ORDER_NO" VARCHAR2(100) NULL
);
REM Column comments TS_CREDIT_END
REM Primary key TS_CREDIT_END
ALTER TABLE "TS_CREDIT_END" ADD CONSTRAINT "TS_CREDIT_END_PK" PRIMARY KEY (TCE_ID) USING INDEX;
REM Index TS_CREDIT_END
CREATE INDEX "TS_CREDIT_END_TI_ID" ON "TS_CREDIT_END" (TI_ID)
/

REM Create Table TS_CREDIT_END_HISTORY
CREATE TABLE "TS_CREDIT_END_HISTORY" (
	"TCEH_ID" NUMBER NOT NULL,
	"DATEPOINT" DATE NOT NULL,
	"OP_USER" VARCHAR2(640 CHAR) NULL,
	"BATCH" NUMBER NOT NULL,
	"STATUS" NUMBER DEFAULT -1 NOT NULL,
	"DATEPOINT2" DATE NULL,
	"SEQNO" VARCHAR2(50) NOT NULL,
	"REL_COUNTS" NUMBER NULL,
	"RETCODE1" VARCHAR2(50) NULL,
	"RETMSG1" VARCHAR2(2000) NULL,
	"RETCODE2" VARCHAR2(50) NULL,
	"RETMSG2" VARCHAR2(2000) NULL,
	"SUC_COUNTS" NUMBER NULL,
	"FAIL_COUNTS" NUMBER NULL,
	"FAIL_MSG" VARCHAR2(2000) NULL,
	"ACQRES" VARCHAR2(2000) NULL
);
REM Column comments TS_CREDIT_END_HISTORY
COMMENT ON COLUMN "TS_CREDIT_END_HISTORY"."TCEH_ID" IS '执行结束债权操放';
COMMENT ON COLUMN "TS_CREDIT_END_HISTORY"."DATEPOINT" IS '操作时间';
COMMENT ON COLUMN "TS_CREDIT_END_HISTORY"."OP_USER" IS '操作人，待废弃';
COMMENT ON COLUMN "TS_CREDIT_END_HISTORY"."BATCH" IS '批次号';
COMMENT ON COLUMN "TS_CREDIT_END_HISTORY"."STATUS" IS '-1初创，0已上传，1批次处理失败,2批次处理结束';
COMMENT ON COLUMN "TS_CREDIT_END_HISTORY"."SEQNO" IS '交易流水号';
COMMENT ON COLUMN "TS_CREDIT_END_HISTORY"."REL_COUNTS" IS '本批次总请求笔数';
COMMENT ON COLUMN "TS_CREDIT_END_HISTORY"."RETCODE1" IS '查询批次状态接口的响应代码';
COMMENT ON COLUMN "TS_CREDIT_END_HISTORY"."RETMSG1" IS '查询批次状态接口的响应描述';
COMMENT ON COLUMN "TS_CREDIT_END_HISTORY"."RETCODE2" IS '查询批次交易明细状态接口的响应代码';
COMMENT ON COLUMN "TS_CREDIT_END_HISTORY"."RETMSG2" IS '查询批次交易明细状态接口的响应描述';
COMMENT ON COLUMN "TS_CREDIT_END_HISTORY"."SUC_COUNTS" IS '成功笔数';
COMMENT ON COLUMN "TS_CREDIT_END_HISTORY"."FAIL_COUNTS" IS '失败笔数';
COMMENT ON COLUMN "TS_CREDIT_END_HISTORY"."FAIL_MSG" IS '批次处理失败时的失败描述';
COMMENT ON COLUMN "TS_CREDIT_END_HISTORY"."ACQRES" IS '保留域';
REM Primary key TS_CREDIT_END_HISTORY
ALTER TABLE "TS_CREDIT_END_HISTORY" ADD CONSTRAINT "TS_CREDIT_END_HISTORY_PK" PRIMARY KEY (TCEH_ID) USING INDEX;
/

REM Create Table TS_DEBT_REGISTER
CREATE TABLE "TS_DEBT_REGISTER" (
	"TDR_ID" NUMBER NOT NULL,
	"P_ID" NUMBER NULL,
	"STATUS" NUMBER DEFAULT 0 NULL,
	"DATEPOINT" DATE NULL,
	"RAISE_DATE" DATE NULL
);
REM Column comments TS_DEBT_REGISTER
COMMENT ON COLUMN "TS_DEBT_REGISTER"."TDR_ID" IS '立项业务id';
COMMENT ON COLUMN "TS_DEBT_REGISTER"."P_ID" IS '项目id';
COMMENT ON COLUMN "TS_DEBT_REGISTER"."STATUS" IS '状态：0-未成功 1-已成功';
COMMENT ON COLUMN "TS_DEBT_REGISTER"."DATEPOINT" IS '交易完成时间';
COMMENT ON COLUMN "TS_DEBT_REGISTER"."RAISE_DATE" IS '募集日期';
REM Primary key TS_DEBT_REGISTER
ALTER TABLE "TS_DEBT_REGISTER" ADD CONSTRAINT "TS_DEBT_REGISTER_PK" PRIMARY KEY (TDR_ID) USING INDEX;
REM Index TS_DEBT_REGISTER
CREATE INDEX "TS_DEBT_REGISTER_P_ID" ON "TS_DEBT_REGISTER" (P_ID)
/

REM Create Table TS_DEBT_REGISTER_CANCEL
CREATE TABLE "TS_DEBT_REGISTER_CANCEL" (
	"TDRC_ID" NUMBER NOT NULL,
	"TDR_ID" NUMBER NULL,
	"STATUS" NUMBER DEFAULT 0 NULL,
	"DATEPOINT" DATE NULL,
	"P_ID" NUMBER NULL
);
REM Column comments TS_DEBT_REGISTER_CANCEL
COMMENT ON COLUMN "TS_DEBT_REGISTER_CANCEL"."TDRC_ID" IS '撤销立项业务id';
COMMENT ON COLUMN "TS_DEBT_REGISTER_CANCEL"."TDR_ID" IS 'TS_DEBT_REGISTER的TDR_ID';
COMMENT ON COLUMN "TS_DEBT_REGISTER_CANCEL"."STATUS" IS '状态：0-未成功 1-已成功';
COMMENT ON COLUMN "TS_DEBT_REGISTER_CANCEL"."DATEPOINT" IS '交易完成时间';
COMMENT ON COLUMN "TS_DEBT_REGISTER_CANCEL"."P_ID" IS '项目id';
REM Primary key TS_DEBT_REGISTER_CANCEL
ALTER TABLE "TS_DEBT_REGISTER_CANCEL" ADD CONSTRAINT "TS_DEBT_REGISTER_CANCEL_PK" PRIMARY KEY (TDRC_ID) USING INDEX;
REM Index TS_DEBT_REGISTER_CANCEL
CREATE INDEX "TS_DEBT_REGISTER_CANCEL_P_ID" ON "TS_DEBT_REGISTER_CANCEL" (P_ID)
CREATE INDEX "TS_DEBT_REGISTER_CANCEL_TDR_ID" ON "TS_DEBT_REGISTER_CANCEL" (TDR_ID)
/

REM Create Table TS_DETAIL_HISTORY
CREATE TABLE "TS_DETAIL_HISTORY" (
	"DATEPOINT" VARCHAR2(32 CHAR) NOT NULL,
	"RETRY_COUNT" NUMBER DEFAULT 0 NOT NULL,
	"RETCODE" VARCHAR2(320 CHAR) NULL,
	"RETMSG" VARCHAR2(320 CHAR) NULL,
	"DONE" NUMBER DEFAULT 0 NOT NULL
);
REM Column comments TS_DETAIL_HISTORY
REM Primary key TS_DETAIL_HISTORY
ALTER TABLE "TS_DETAIL_HISTORY" ADD CONSTRAINT "TS_DETAIL_HISTORY_PK" PRIMARY KEY (DATEPOINT) USING INDEX;
/

REM Create Table TS_INVEST
CREATE TABLE "TS_INVEST" (
	"TI_ID" NUMBER NOT NULL,
	"P_TYPE" NUMBER DEFAULT 1 NOT NULL,
	"P_ID" NUMBER NOT NULL,
	"AU_ID" NUMBER NOT NULL,
	"AMT" NUMBER DEFAULT 0 NOT NULL,
	"DATEPOINT" DATE NOT NULL,
	"DATEPOINT2" DATE NOT NULL,
	"S_TYPE" NUMBER DEFAULT 1 NOT NULL,
	"S_ID" NUMBER DEFAULT 0 NULL,
	"S_ID2" NUMBER DEFAULT 0 NULL,
	"RATE" NUMBER(8,3) NOT NULL,
	"FINISHED" NUMBER(1) DEFAULT 0 NOT NULL,
	"AUTH_CODE" VARCHAR2(50) NOT NULL,
	"ORDER_ID" VARCHAR2(50) NULL,
	"T_COUNT" NUMBER DEFAULT 0 NULL,
	"AUTO_FLAG" NUMBER DEFAULT 0 NULL
);
REM Column comments TS_INVEST
COMMENT ON COLUMN "TS_INVEST"."TI_ID" IS '主键';
COMMENT ON COLUMN "TS_INVEST"."P_TYPE" IS '投资的项目的类型，1-工程贷 2-票据贷,3-优先班汇宝,4-劣后班汇宝';
COMMENT ON COLUMN "TS_INVEST"."P_ID" IS '投资的项目的ID';
COMMENT ON COLUMN "TS_INVEST"."AU_ID" IS '关联的ACC_USER_REG_INVEST表的ID';
COMMENT ON COLUMN "TS_INVEST"."AMT" IS '债权本金';
COMMENT ON COLUMN "TS_INVEST"."DATEPOINT" IS '起始有效日期';
COMMENT ON COLUMN "TS_INVEST"."DATEPOINT2" IS '终止有效日期';
COMMENT ON COLUMN "TS_INVEST"."S_TYPE" IS '债权来源 1-通过投资获取债权， 2-通过债权转让获取债权';
COMMENT ON COLUMN "TS_INVEST"."S_ID" IS 'TS_TENDER表的ID或者TS_CREDIT_ASSIGN表的ID';
COMMENT ON COLUMN "TS_INVEST"."S_ID2" IS 'TS_TENDER表的ID，表示最初的投资的ID，如果S_TYPE=1，那么S_ID和S_ID2的值应当相同';
COMMENT ON COLUMN "TS_INVEST"."RATE" IS '利率';
COMMENT ON COLUMN "TS_INVEST"."FINISHED" IS '是否已结清';
COMMENT ON COLUMN "TS_INVEST"."AUTH_CODE" IS '获得债权授权码(原投标的授权码或购买债权的授权码,从order_no迁移数据)';
COMMENT ON COLUMN "TS_INVEST"."ORDER_ID" IS '获取债权的订单号(原投标订单号或购买债权的订单号,从seq_no迁移数据)';
COMMENT ON COLUMN "TS_INVEST"."T_COUNT" IS '到手时，债权经过的转让次数';
COMMENT ON COLUMN "TS_INVEST"."AUTO_FLAG" IS '自动出借标志位；1-自动投标 0-非自动投标';
REM Primary key TS_INVEST
ALTER TABLE "TS_INVEST" ADD CONSTRAINT "TS_INVEST_PK" PRIMARY KEY (TI_ID) USING INDEX;
REM Index TS_INVEST
CREATE INDEX "TS_INVEST_AU_ID" ON "TS_INVEST" (AU_ID)
CREATE INDEX "TS_INVEST_P_ID" ON "TS_INVEST" (P_ID)
CREATE INDEX "TS_INVEST_S_ID" ON "TS_INVEST" (S_ID)
CREATE INDEX "TS_INVEST_S_ID2" ON "TS_INVEST" (S_ID2)
CREATE INDEX "TS_INVEST_UK1" ON "TS_INVEST" (AUTH_CODE)
/

REM Create Table TS_LOAN
CREATE TABLE "TS_LOAN" (
	"TL_ID" NUMBER NOT NULL,
	"TT_ID" NUMBER NOT NULL,
	"AMT" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"FEE" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"DATEPOINT" DATE NOT NULL,
	"REMARK" VARCHAR2(4000 CHAR) NULL,
	"STATUS" NUMBER DEFAULT 0 NOT NULL,
	"ORDER_NO" VARCHAR2(100) NULL
);
COMMENT ON TABLE "TS_LOAN" IS '放款业务操作表';
REM Column comments TS_LOAN
COMMENT ON COLUMN "TS_LOAN"."TL_ID" IS '主键，业务id';
COMMENT ON COLUMN "TS_LOAN"."TT_ID" IS '关联的主动投标TS-TENDER的记录ID';
COMMENT ON COLUMN "TS_LOAN"."AMT" IS '需放款的总额';
COMMENT ON COLUMN "TS_LOAN"."FEE" IS '需收取的手续费';
COMMENT ON COLUMN "TS_LOAN"."DATEPOINT" IS '交易完成的时间点。此字段是 确认交易完成的时间 ，而不是交易发起的时间。';
COMMENT ON COLUMN "TS_LOAN"."REMARK" IS '备注';
COMMENT ON COLUMN "TS_LOAN"."STATUS" IS '状态，0-未完成 1-已完成';
COMMENT ON COLUMN "TS_LOAN"."ORDER_NO" IS '订单号';
REM Primary key TS_LOAN
ALTER TABLE "TS_LOAN" ADD CONSTRAINT "TS_LOAN_PK" PRIMARY KEY (TL_ID) USING INDEX;
REM Index TS_LOAN
CREATE INDEX "TS_LOAN_TT_ID" ON "TS_LOAN" (TT_ID)
/

REM Create Table TS_LOAN_HISTORY
CREATE TABLE "TS_LOAN_HISTORY" (
	"TLH_ID" NUMBER NOT NULL,
	"DATEPOINT" DATE NOT NULL,
	"BATCH" NUMBER NOT NULL,
	"STATUS" NUMBER DEFAULT -1 NOT NULL,
	"DATEPOINT2" DATE NULL,
	"SEQNO" VARCHAR2(50) NOT NULL,
	"REL_AMOUNT" NUMBER(12,2) NULL,
	"REL_COUNTS" NUMBER NULL,
	"RETCODE1" VARCHAR2(50) NULL,
	"RETMSG1" VARCHAR2(2000) NULL,
	"RETCODE2" VARCHAR2(50) NULL,
	"RETMSG2" VARCHAR2(2000) NULL,
	"SUC_AMOUNT" NUMBER(12,2) NULL,
	"SUC_COUNTS" NUMBER NULL,
	"FAIL_AMOUNT" NUMBER(12,2) NULL,
	"FAIL_COUNTS" NUMBER NULL,
	"FAIL_MSG" VARCHAR2(2000) NULL,
	"ACQRES" VARCHAR2(2000) NULL
);
REM Column comments TS_LOAN_HISTORY
COMMENT ON COLUMN "TS_LOAN_HISTORY"."TLH_ID" IS '执行f款操放';
COMMENT ON COLUMN "TS_LOAN_HISTORY"."DATEPOINT" IS '操作时间';
COMMENT ON COLUMN "TS_LOAN_HISTORY"."BATCH" IS '批次号';
COMMENT ON COLUMN "TS_LOAN_HISTORY"."STATUS" IS '-1初创，0已上传，1批次处理失败,2批次处理结束';
COMMENT ON COLUMN "TS_LOAN_HISTORY"."SEQNO" IS '交易流水号';
COMMENT ON COLUMN "TS_LOAN_HISTORY"."REL_AMOUNT" IS '本批次请求总金额';
COMMENT ON COLUMN "TS_LOAN_HISTORY"."REL_COUNTS" IS '本批次总请求笔数';
COMMENT ON COLUMN "TS_LOAN_HISTORY"."RETCODE1" IS '查询批次状态接口的响应代码';
COMMENT ON COLUMN "TS_LOAN_HISTORY"."RETMSG1" IS '查询批次状态接口的响应描述';
COMMENT ON COLUMN "TS_LOAN_HISTORY"."RETCODE2" IS '查询批次交易明细状态接口的响应代码';
COMMENT ON COLUMN "TS_LOAN_HISTORY"."RETMSG2" IS '查询批次交易明细状态接口的响应描述';
COMMENT ON COLUMN "TS_LOAN_HISTORY"."SUC_AMOUNT" IS '成功金额汇总';
COMMENT ON COLUMN "TS_LOAN_HISTORY"."SUC_COUNTS" IS '成功笔数';
COMMENT ON COLUMN "TS_LOAN_HISTORY"."FAIL_AMOUNT" IS '失败金额汇总';
COMMENT ON COLUMN "TS_LOAN_HISTORY"."FAIL_COUNTS" IS '失败笔数';
COMMENT ON COLUMN "TS_LOAN_HISTORY"."FAIL_MSG" IS '批次处理失败时的失败描述';
COMMENT ON COLUMN "TS_LOAN_HISTORY"."ACQRES" IS '保留域';
REM Primary key TS_LOAN_HISTORY
ALTER TABLE "TS_LOAN_HISTORY" ADD CONSTRAINT "TS_LOAN_ACTION_PK1" PRIMARY KEY (TLH_ID) USING INDEX;
REM Index TS_LOAN_HISTORY
CREATE INDEX "TS_LOAN_HISTORY_UK1" ON "TS_LOAN_HISTORY" (DATEPOINT,BATCH)
/

REM Create Table TS_REPAY
REM Depend on table(s)
REM [PRJ_BONUS_DETAIL]
CREATE TABLE "TS_REPAY" (
	"TR_ID" NUMBER NOT NULL,
	"R_DATEPOINT" DATE NULL,
	"AMT" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"FEE" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"DATEPOINT" DATE NOT NULL,
	"REMARK" VARCHAR2(4000 CHAR) NULL,
	"STATUS" NUMBER DEFAULT 0 NOT NULL,
	"PBD_ID" NUMBER NULL,
	"TI_ID" NUMBER DEFAULT 0 NOT NULL,
	"ORDER_NO" VARCHAR2(100) NULL,
	"SRC" NUMBER DEFAULT 0 NULL
);
REM Column comments TS_REPAY
COMMENT ON COLUMN "TS_REPAY"."TR_ID" IS '主键，业务id';
COMMENT ON COLUMN "TS_REPAY"."R_DATEPOINT" IS '还款时间。表示此笔还款生效的时间，和创建时间不一定相同。需要根据此列计算是否逾期。';
COMMENT ON COLUMN "TS_REPAY"."AMT" IS '成交金额';
COMMENT ON COLUMN "TS_REPAY"."FEE" IS '服务费';
COMMENT ON COLUMN "TS_REPAY"."DATEPOINT" IS '交易完成的时间点。此字段是 确认交易完成的时间 ，而不是交易发起的时间。';
COMMENT ON COLUMN "TS_REPAY"."REMARK" IS '备注';
COMMENT ON COLUMN "TS_REPAY"."STATUS" IS '状态。0未成功，1已成功';
COMMENT ON COLUMN "TS_REPAY"."PBD_ID" IS '还款明细ID';
COMMENT ON COLUMN "TS_REPAY"."TI_ID" IS '债权id（ts_invest）';
COMMENT ON COLUMN "TS_REPAY"."ORDER_NO" IS '订单号';
COMMENT ON COLUMN "TS_REPAY"."SRC" IS '还款来源：0-融资人还款，1-担保人还款';
REM Primary key TS_REPAY
ALTER TABLE "TS_REPAY" ADD CONSTRAINT "TS_REPAY_PK" PRIMARY KEY (TR_ID) USING INDEX;
REM Constraints TS_REPAY
ALTER TABLE "TS_REPAY" ADD CONSTRAINT "TS_REPAY_CK2" CHECK (FEE >=0);
ALTER TABLE "TS_REPAY" ADD CONSTRAINT "TS_REPAY_CK1" CHECK (AMT >=0);
REM Foreign keys TS_REPAY
ALTER TABLE "TS_REPAY" ADD CONSTRAINT "TS_REPAY_FK1" FOREIGN KEY (PBD_ID) REFERENCES "PRJ_BONUS_DETAIL" (PBD_ID) ON DELETE CASCADE;
REM Index TS_REPAY
CREATE INDEX "TS_REPAY_TI_ID" ON "TS_REPAY" (TI_ID)
/

REM Create Table TS_REPAY_FRZ
CREATE TABLE "TS_REPAY_FRZ" (
	"TRF_ID" NUMBER NOT NULL,
	"AU_ID" NUMBER NOT NULL,
	"AMT" NUMBER NOT NULL,
	"P_ID" NUMBER NOT NULL,
	"ORDER_NO" VARCHAR2(200 CHAR) NULL,
	"DATEPOINT" DATE NULL,
	"STATUS" NUMBER(6) DEFAULT 0 NOT NULL
);
COMMENT ON TABLE "TS_REPAY_FRZ" IS '还款冻结业务表';
REM Column comments TS_REPAY_FRZ
COMMENT ON COLUMN "TS_REPAY_FRZ"."TRF_ID" IS '还款冻结';
COMMENT ON COLUMN "TS_REPAY_FRZ"."AU_ID" IS '用户id';
COMMENT ON COLUMN "TS_REPAY_FRZ"."AMT" IS '冻结金额';
COMMENT ON COLUMN "TS_REPAY_FRZ"."P_ID" IS '项目id';
COMMENT ON COLUMN "TS_REPAY_FRZ"."ORDER_NO" IS '订单号：本平台生成';
COMMENT ON COLUMN "TS_REPAY_FRZ"."DATEPOINT" IS '交易完成时间';
COMMENT ON COLUMN "TS_REPAY_FRZ"."STATUS" IS '状态。0未完成，1已完成';
REM Primary key TS_REPAY_FRZ
ALTER TABLE "TS_REPAY_FRZ" ADD CONSTRAINT "TS_REPAY_FRZ_PK" PRIMARY KEY (TRF_ID) USING INDEX;
REM Index TS_REPAY_FRZ
CREATE INDEX "TS_REPAY_FRZ_AU_ID" ON "TS_REPAY_FRZ" (AU_ID)
CREATE INDEX "TS_REPAY_FRZ_P_ID" ON "TS_REPAY_FRZ" (P_ID)
/

REM Create Table TS_REPAY_HISTORY
CREATE TABLE "TS_REPAY_HISTORY" (
	"TRH_ID" NUMBER NOT NULL,
	"DATEPOINT" DATE NOT NULL,
	"BATCH" NUMBER NOT NULL,
	"STATUS" NUMBER DEFAULT -1 NOT NULL,
	"DATEPOINT2" DATE NULL,
	"SEQNO" VARCHAR2(50) NOT NULL,
	"REL_AMOUNT" NUMBER(12,2) NULL,
	"REL_COUNTS" NUMBER NULL,
	"RETCODE1" VARCHAR2(50) NULL,
	"RETMSG1" VARCHAR2(2000) NULL,
	"RETCODE2" VARCHAR2(50) NULL,
	"RETMSG2" VARCHAR2(2000) NULL,
	"SUC_AMOUNT" NUMBER(12,2) NULL,
	"SUC_COUNTS" NUMBER NULL,
	"FAIL_AMOUNT" NUMBER(12,2) NULL,
	"FAIL_COUNTS" NUMBER NULL,
	"FAIL_MSG" VARCHAR2(2000) NULL,
	"ACQRES" VARCHAR2(2000) NULL
);
REM Column comments TS_REPAY_HISTORY
COMMENT ON COLUMN "TS_REPAY_HISTORY"."TRH_ID" IS '执行还款操放';
COMMENT ON COLUMN "TS_REPAY_HISTORY"."DATEPOINT" IS '操作时间';
COMMENT ON COLUMN "TS_REPAY_HISTORY"."BATCH" IS '批次号';
COMMENT ON COLUMN "TS_REPAY_HISTORY"."STATUS" IS '-1初创，0已上传，1批次处理失败,2批次处理结束';
COMMENT ON COLUMN "TS_REPAY_HISTORY"."SEQNO" IS '交易流水号';
COMMENT ON COLUMN "TS_REPAY_HISTORY"."REL_AMOUNT" IS '本批次请求总金额';
COMMENT ON COLUMN "TS_REPAY_HISTORY"."REL_COUNTS" IS '本批次总请求笔数';
COMMENT ON COLUMN "TS_REPAY_HISTORY"."RETCODE1" IS '查询批次状态接口的响应代码';
COMMENT ON COLUMN "TS_REPAY_HISTORY"."RETMSG1" IS '查询批次状态接口的响应描述';
COMMENT ON COLUMN "TS_REPAY_HISTORY"."RETCODE2" IS '查询批次交易明细状态接口的响应代码';
COMMENT ON COLUMN "TS_REPAY_HISTORY"."RETMSG2" IS '查询批次交易明细状态接口的响应描述';
COMMENT ON COLUMN "TS_REPAY_HISTORY"."SUC_AMOUNT" IS '成功金额汇总';
COMMENT ON COLUMN "TS_REPAY_HISTORY"."SUC_COUNTS" IS '成功笔数';
COMMENT ON COLUMN "TS_REPAY_HISTORY"."FAIL_AMOUNT" IS '失败金额汇总';
COMMENT ON COLUMN "TS_REPAY_HISTORY"."FAIL_COUNTS" IS '失败笔数';
COMMENT ON COLUMN "TS_REPAY_HISTORY"."FAIL_MSG" IS '批次处理失败时的失败描述';
COMMENT ON COLUMN "TS_REPAY_HISTORY"."ACQRES" IS '保留域';
REM Primary key TS_REPAY_HISTORY
ALTER TABLE "TS_REPAY_HISTORY" ADD CONSTRAINT "TS_REPAY_HISTORY_PK" PRIMARY KEY (TRH_ID) USING INDEX;
/

REM Create Table TS_REPAY_INTEREST
REM Depend on table(s)
REM [PRJ_BONUS_DETAIL]
CREATE TABLE "TS_REPAY_INTEREST" (
	"TRI_ID" NUMBER NOT NULL,
	"PBD_ID" NUMBER NOT NULL,
	"AMT" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"R_DATEPOINT" DATE NOT NULL,
	"FEE" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"DATEPOINT" DATE NOT NULL,
	"REMARK" VARCHAR2(4000 CHAR) NULL,
	"STATUS" NUMBER DEFAULT 0 NOT NULL,
	"TI_ID" NUMBER NOT NULL,
	"ORDER_NO" VARCHAR2(100) NULL,
	"SRC" NUMBER DEFAULT 0 NULL
);
COMMENT ON TABLE "TS_REPAY_INTEREST" IS '利息还款明细';
REM Column comments TS_REPAY_INTEREST
COMMENT ON COLUMN "TS_REPAY_INTEREST"."TRI_ID" IS '主键，业务表id';
COMMENT ON COLUMN "TS_REPAY_INTEREST"."PBD_ID" IS '还款明细ID';
COMMENT ON COLUMN "TS_REPAY_INTEREST"."AMT" IS '还款金额';
COMMENT ON COLUMN "TS_REPAY_INTEREST"."R_DATEPOINT" IS '还款时间。表示此笔还款生效的时间，和创建时间不一定相同。需要根据此列计算是否逾期。';
COMMENT ON COLUMN "TS_REPAY_INTEREST"."FEE" IS '服务费';
COMMENT ON COLUMN "TS_REPAY_INTEREST"."DATEPOINT" IS '交易完成的时间点。此字段是 确认交易完成的时间 ，而不是交易发起的时间。';
COMMENT ON COLUMN "TS_REPAY_INTEREST"."REMARK" IS '备注';
COMMENT ON COLUMN "TS_REPAY_INTEREST"."STATUS" IS '状态。0未成功，1已成功';
COMMENT ON COLUMN "TS_REPAY_INTEREST"."TI_ID" IS '对应的有效投资ID';
COMMENT ON COLUMN "TS_REPAY_INTEREST"."ORDER_NO" IS '订单号';
COMMENT ON COLUMN "TS_REPAY_INTEREST"."SRC" IS '还款来源：0-融资人还款，1-担保人还款';
REM Primary key TS_REPAY_INTEREST
ALTER TABLE "TS_REPAY_INTEREST" ADD CONSTRAINT "TS_REPAY_INTEREST_PK" PRIMARY KEY (TRI_ID) USING INDEX;
REM Constraints TS_REPAY_INTEREST
ALTER TABLE "TS_REPAY_INTEREST" ADD CONSTRAINT "TS_REPAY_INTEREST_CK2" CHECK (FEE >=0);
ALTER TABLE "TS_REPAY_INTEREST" ADD CONSTRAINT "TS_REPAY_INTEREST_CK1" CHECK (AMT >=0);
REM Foreign keys TS_REPAY_INTEREST
ALTER TABLE "TS_REPAY_INTEREST" ADD CONSTRAINT "TS_REPAY_INTEREST_FK1" FOREIGN KEY (PBD_ID) REFERENCES "PRJ_BONUS_DETAIL" (PBD_ID) ON DELETE CASCADE;
REM Index TS_REPAY_INTEREST
CREATE INDEX "TS_REPAY_INTEREST_TI_ID" ON "TS_REPAY_INTEREST" (TI_ID)
/

REM Create Table TS_REPAY_UNFRZ
CREATE TABLE "TS_REPAY_UNFRZ" (
	"TRU_ID" NUMBER NOT NULL,
	"DATEPOINT" DATE NULL,
	"STATUS" NUMBER DEFAULT 0 NULL,
	"TRF_ID" NUMBER NULL,
	"ORDER_NO" VARCHAR2(200 CHAR) NULL
);
REM Column comments TS_REPAY_UNFRZ
COMMENT ON COLUMN "TS_REPAY_UNFRZ"."TRU_ID" IS '还款解冻';
COMMENT ON COLUMN "TS_REPAY_UNFRZ"."DATEPOINT" IS '交易完成时间';
COMMENT ON COLUMN "TS_REPAY_UNFRZ"."STATUS" IS '状态';
COMMENT ON COLUMN "TS_REPAY_UNFRZ"."TRF_ID" IS '冻结表id';
COMMENT ON COLUMN "TS_REPAY_UNFRZ"."ORDER_NO" IS '解冻流水号';
REM Primary key TS_REPAY_UNFRZ
ALTER TABLE "TS_REPAY_UNFRZ" ADD CONSTRAINT "TS_REPAY_UNFRZ_PK" PRIMARY KEY (TRU_ID) USING INDEX;
REM Index TS_REPAY_UNFRZ
CREATE INDEX "TS_REPAY_UNFRZ_TRF_ID" ON "TS_REPAY_UNFRZ" (TRF_ID)
/

REM Create Table TS_TENDER
CREATE TABLE "TS_TENDER" (
	"TT_ID" NUMBER NOT NULL,
	"P_TYPE" NUMBER DEFAULT 1 NOT NULL,
	"P_ID" NUMBER NOT NULL,
	"AU_ID" NUMBER NOT NULL,
	"AMT" NUMBER(18,2) DEFAULT 0 NOT NULL,
	"DATEPOINT" DATE NULL,
	"REMARK" VARCHAR2(4000 CHAR) NULL,
	"STATUS" NUMBER DEFAULT 0 NOT NULL,
	"ORDER_NO" VARCHAR2(4000 CHAR) NULL,
	"RATE" NUMBER(8,3) NOT NULL,
	"AUTH_CODE" VARCHAR2(50) NULL,
	"AUTO_FLAG" NUMBER DEFAULT 0 NULL
);
REM Column comments TS_TENDER
COMMENT ON COLUMN "TS_TENDER"."TT_ID" IS '主键。业务id';
COMMENT ON COLUMN "TS_TENDER"."P_TYPE" IS '投资的项目的类型，1-工程贷 2-票据贷';
COMMENT ON COLUMN "TS_TENDER"."P_ID" IS 'prj_index的p_id';
COMMENT ON COLUMN "TS_TENDER"."AU_ID" IS '关联的ACC_USER_REG_INVEST(或p_type为3时ACC_TRADER)表的ID';
COMMENT ON COLUMN "TS_TENDER"."AMT" IS '投资额';
COMMENT ON COLUMN "TS_TENDER"."DATEPOINT" IS '交易完成的时间点。此字段是 确认交易完成的时间 ，而不是交易发起的时间。';
COMMENT ON COLUMN "TS_TENDER"."REMARK" IS '备注';
COMMENT ON COLUMN "TS_TENDER"."STATUS" IS '状态。0未成功，1已成功';
COMMENT ON COLUMN "TS_TENDER"."ORDER_NO" IS '订单号（本平台生成）';
COMMENT ON COLUMN "TS_TENDER"."RATE" IS '利率';
COMMENT ON COLUMN "TS_TENDER"."AUTH_CODE" IS '授权码';
COMMENT ON COLUMN "TS_TENDER"."AUTO_FLAG" IS '是否自动投标：1-自动投标 0-非自动投标';
REM Primary key TS_TENDER
ALTER TABLE "TS_TENDER" ADD CONSTRAINT "TS_TENDER_PK" PRIMARY KEY (TT_ID) USING INDEX;
REM Index TS_TENDER
CREATE INDEX "TS_TENDER_AU_ID" ON "TS_TENDER" (AU_ID)
CREATE INDEX "TS_TENDER_P_ID" ON "TS_TENDER" (P_ID)
/

REM Create Table TS_VOUCHER
CREATE TABLE "TS_VOUCHER" (
	"TV_ID" NUMBER NOT NULL,
	"AU_ID" NUMBER NOT NULL,
	"AMT" NUMBER NULL,
	"STATUS" NUMBER DEFAULT 0 NULL,
	"TBD_ID" NUMBER NULL,
	"DATEPOINT" DATE NULL
);
REM Column comments TS_VOUCHER
COMMENT ON COLUMN "TS_VOUCHER"."TV_ID" IS '发放红包业务';
COMMENT ON COLUMN "TS_VOUCHER"."AU_ID" IS '接收红包用户id';
COMMENT ON COLUMN "TS_VOUCHER"."AMT" IS '红包金额';
COMMENT ON COLUMN "TS_VOUCHER"."STATUS" IS '状态： 1-已成功  0-未成功';
COMMENT ON COLUMN "TS_VOUCHER"."TBD_ID" IS '商户转账批次id';
COMMENT ON COLUMN "TS_VOUCHER"."DATEPOINT" IS '交易完成时间';
REM Primary key TS_VOUCHER
ALTER TABLE "TS_VOUCHER" ADD CONSTRAINT "TS_VOUCHER_PK" PRIMARY KEY (TV_ID) USING INDEX;
REM Index TS_VOUCHER
CREATE INDEX "TS_VOUCHER_AU_ID" ON "TS_VOUCHER" (AU_ID)
CREATE INDEX "TS_VOUCHER_TBD_ID" ON "TS_VOUCHER" (TBD_ID)
/

REM Create Table CA_DOC
REM Depend on table(s)
REM [CA_DOC_SIGN]
CREATE TABLE "CA_DOC" (
	"DOC_ID" NUMBER NOT NULL,
	"DOC_SIGN_ID" NUMBER NOT NULL,
	"FILE_NAME" VARCHAR2(1000 CHAR) NOT NULL,
	"FILE_TYPE" VARCHAR2(40 CHAR) NOT NULL,
	"PAGE_COUNT" NUMBER NOT NULL,
	"CA_UUID" VARCHAR2(80 CHAR) NOT NULL,
	"CA_DOC_ID" VARCHAR2(80 CHAR) NULL
);
REM Column comments CA_DOC
COMMENT ON COLUMN "CA_DOC"."DOC_ID" IS '主键ID';
COMMENT ON COLUMN "CA_DOC"."DOC_SIGN_ID" IS '关联的实例ID';
COMMENT ON COLUMN "CA_DOC"."FILE_NAME" IS '文件名';
COMMENT ON COLUMN "CA_DOC"."FILE_TYPE" IS '文件类型';
COMMENT ON COLUMN "CA_DOC"."PAGE_COUNT" IS '文件页数';
COMMENT ON COLUMN "CA_DOC"."CA_UUID" IS '上传得到的唯一ID';
COMMENT ON COLUMN "CA_DOC"."CA_DOC_ID" IS '签署成功后得到的ID';
REM Primary key CA_DOC
ALTER TABLE "CA_DOC" ADD CONSTRAINT "CA_DOC_PK" PRIMARY KEY (DOC_ID) USING INDEX;
REM Foreign keys CA_DOC
ALTER TABLE "CA_DOC" ADD CONSTRAINT "CA_DOC_FK1" FOREIGN KEY (DOC_SIGN_ID) REFERENCES "CA_DOC_SIGN" (DOC_SIGN_ID) ON DELETE CASCADE;
/

REM Create Table PRJ_BONUS
REM Depend on table(s)
REM [PRJ_INDEX]
CREATE TABLE "PRJ_BONUS" (
	"P_ID" NUMBER NOT NULL,
	"TRAN_NO" NUMBER(4) NOT NULL,
	"TRAN_TYPE" NUMBER(3) NOT NULL,
	"AMT" NUMBER(18,2) NULL,
	"DUE_TIME" DATE NULL,
	"OVERDUEL_AMT" NUMBER(18,2) DEFAULT 0 NOT NULL
);
COMMENT ON TABLE "PRJ_BONUS" IS '借款人还款记录';
REM Column comments PRJ_BONUS
COMMENT ON COLUMN "PRJ_BONUS"."P_ID" IS '项目ID';
COMMENT ON COLUMN "PRJ_BONUS"."TRAN_NO" IS '还款计划序号（第几期）';
COMMENT ON COLUMN "PRJ_BONUS"."TRAN_TYPE" IS '0:利息1:本金,2:罚息';
COMMENT ON COLUMN "PRJ_BONUS"."AMT" IS '还款计划中的还款金额';
COMMENT ON COLUMN "PRJ_BONUS"."DUE_TIME" IS '预计还款时间';
COMMENT ON COLUMN "PRJ_BONUS"."OVERDUEL_AMT" IS '逾期的还款金额';
REM Primary key PRJ_BONUS
ALTER TABLE "PRJ_BONUS" ADD CONSTRAINT "PRJ_BONUS_PK" PRIMARY KEY (P_ID,TRAN_NO,TRAN_TYPE) USING INDEX;
REM Foreign keys PRJ_BONUS
ALTER TABLE "PRJ_BONUS" ADD CONSTRAINT "PRJ_BONUS_PRJ_INDEX_FK1" FOREIGN KEY (P_ID) REFERENCES "PRJ_INDEX" (P_ID) ON DELETE CASCADE;
/

REM Create Table PRJ_CTOR_ORG
REM Depend on table(s)
REM [PRJ_INDEX]
CREATE TABLE "PRJ_CTOR_ORG" (
	"P_ID" NUMBER NOT NULL,
	"BCO_ID" NUMBER NULL,
	"SHOW_NAME" VARCHAR2(4000 CHAR) NULL,
	"SHOW_REG_YEAR" VARCHAR2(4000 CHAR) NULL,
	"SHOW_REG_FUNDS" VARCHAR2(1280 CHAR) NULL,
	"QUALIFICATION" VARCHAR2(1280 CHAR) NULL,
	"LASTED_AREA" NUMBER(18,2) NULL,
	"LASTED_OUTPUT" NUMBER(18,2) NULL,
	"NATION_PRIZE_COUNT" NUMBER(4) NULL,
	"PROVIN_PRIZE_COUNT" NUMBER(4) NULL,
	"INTRO" VARCHAR2(4000 CHAR) NULL,
	"NAME" VARCHAR2(4000 CHAR) NULL,
	"ENT_NATURE" VARCHAR2(1280 CHAR) NULL,
	"ENT_STRENGTH" VARCHAR2(1280 CHAR) NULL,
	"ENT_QUALITY" VARCHAR2(1280 CHAR) NULL,
	"REG_FUNDS" NUMBER(18,2) NULL,
	"REGISTERED_DATE" DATE NULL,
	"REG_YEARS" NUMBER(4) NULL
);
COMMENT ON TABLE "PRJ_CTOR_ORG" IS '施工单位-快照表';
REM Column comments PRJ_CTOR_ORG
COMMENT ON COLUMN "PRJ_CTOR_ORG"."P_ID" IS '施工单位快照表，一一对应于项目id';
COMMENT ON COLUMN "PRJ_CTOR_ORG"."BCO_ID" IS '基础数据库外键';
COMMENT ON COLUMN "PRJ_CTOR_ORG"."SHOW_NAME" IS '单位展示名称';
COMMENT ON COLUMN "PRJ_CTOR_ORG"."SHOW_REG_YEAR" IS '展示注册年限';
COMMENT ON COLUMN "PRJ_CTOR_ORG"."SHOW_REG_FUNDS" IS '展示注册资金';
COMMENT ON COLUMN "PRJ_CTOR_ORG"."QUALIFICATION" IS '行业资质';
COMMENT ON COLUMN "PRJ_CTOR_ORG"."LASTED_AREA" IS '上一年建设面积上一年度施工面积（平方）';
COMMENT ON COLUMN "PRJ_CTOR_ORG"."LASTED_OUTPUT" IS '上一年度产值(亿元)';
COMMENT ON COLUMN "PRJ_CTOR_ORG"."NATION_PRIZE_COUNT" IS '全国奖励获得次数';
COMMENT ON COLUMN "PRJ_CTOR_ORG"."PROVIN_PRIZE_COUNT" IS '省级奖励获得次数';
COMMENT ON COLUMN "PRJ_CTOR_ORG"."INTRO" IS '施工单位介绍';
COMMENT ON COLUMN "PRJ_CTOR_ORG"."NAME" IS '单位名称';
COMMENT ON COLUMN "PRJ_CTOR_ORG"."ENT_NATURE" IS '项目类型';
COMMENT ON COLUMN "PRJ_CTOR_ORG"."ENT_STRENGTH" IS '项目优点';
COMMENT ON COLUMN "PRJ_CTOR_ORG"."ENT_QUALITY" IS '项目品质';
COMMENT ON COLUMN "PRJ_CTOR_ORG"."REG_FUNDS" IS '注册资金';
COMMENT ON COLUMN "PRJ_CTOR_ORG"."REGISTERED_DATE" IS '注册时间（成立时间）';
COMMENT ON COLUMN "PRJ_CTOR_ORG"."REG_YEARS" IS '注册年限';
REM Primary key PRJ_CTOR_ORG
ALTER TABLE "PRJ_CTOR_ORG" ADD CONSTRAINT "PRJ_CTOR_ORG_PK" PRIMARY KEY (P_ID) USING INDEX;
REM Foreign keys PRJ_CTOR_ORG
ALTER TABLE "PRJ_CTOR_ORG" ADD CONSTRAINT "PRJ_CTOR_ORG_PRJ_INDEX_FK1" FOREIGN KEY (P_ID) REFERENCES "PRJ_INDEX" (P_ID) ON DELETE CASCADE;
REM Index PRJ_CTOR_ORG
CREATE INDEX "PRJ_CTOR_ORG_P_ID_BCO_ID" ON "PRJ_CTOR_ORG" (P_ID,BCO_ID)
/

REM Create Table PRJ_ENGINEER
REM Depend on table(s)
REM [PRJ_INDEX]
CREATE TABLE "PRJ_ENGINEER" (
	"P_ID" NUMBER NOT NULL,
	"BPE_ID" NUMBER NULL,
	"ENG_SHOW_NAME" VARCHAR2(4000 CHAR) NULL,
	"ENG_SHOW_ADDRESS" VARCHAR2(4000 CHAR) NULL,
	"SHOW_MGR_ORG" VARCHAR2(4000 CHAR) NULL,
	"SHOW_ALL_ORG" VARCHAR2(4000 CHAR) NULL,
	"SHOW_DESIGN_ORG" VARCHAR2(4000 CHAR) NULL,
	"ENG_TYPE" VARCHAR2(1280 CHAR) NULL,
	"SHOW_AREA" VARCHAR2(1600 CHAR) NULL,
	"PRJ_START_TIME" DATE NULL,
	"PRJ_END_TIME" DATE NULL,
	"NAME" VARCHAR2(4000 CHAR) NULL,
	"ADDRESS" VARCHAR2(4000 CHAR) NULL,
	"AREA" NUMBER(18,2) NULL,
	"PRO_INTRO" VARCHAR2(4000 CHAR) NULL,
	"DESIGN_ORG_LEVEL" VARCHAR2(1280 CHAR) NULL,
	"MGR_ORG_LEVEL" VARCHAR2(1280 CHAR) NULL,
	"DESIGN_ORG" VARCHAR2(1280 CHAR) NULL,
	"MGR_ORG" VARCHAR2(1280 CHAR) NULL,
	"ALL_ORG" VARCHAR2(1280 CHAR) NULL,
	"MGR_REAL_NAME" VARCHAR2(320 CHAR) NULL,
	"MGR_SHOW_NAME" VARCHAR2(320 CHAR) NULL,
	"QUALIFICATION" VARCHAR2(1280 CHAR) NULL,
	"MGR_INTRO" VARCHAR2(4000 CHAR) NULL,
	"MGR_GENDER" VARCHAR2(80 CHAR) NULL,
	"MGR_AGE" NUMBER NULL,
	"MGR_SHOW_AGE" VARCHAR2(80 CHAR) NULL
);
COMMENT ON TABLE "PRJ_ENGINEER" IS '工程项目-快照表';
REM Column comments PRJ_ENGINEER
COMMENT ON COLUMN "PRJ_ENGINEER"."P_ID" IS '工程快照，与项目一一对应';
COMMENT ON COLUMN "PRJ_ENGINEER"."BPE_ID" IS '工程基础数据库外键';
COMMENT ON COLUMN "PRJ_ENGINEER"."ENG_SHOW_NAME" IS '工程显示名称';
COMMENT ON COLUMN "PRJ_ENGINEER"."ENG_SHOW_ADDRESS" IS '建设显示地址';
COMMENT ON COLUMN "PRJ_ENGINEER"."SHOW_MGR_ORG" IS '展示监理单位';
COMMENT ON COLUMN "PRJ_ENGINEER"."SHOW_ALL_ORG" IS '展示总包单位';
COMMENT ON COLUMN "PRJ_ENGINEER"."SHOW_DESIGN_ORG" IS '展示设计单位';
COMMENT ON COLUMN "PRJ_ENGINEER"."ENG_TYPE" IS '工程类别';
COMMENT ON COLUMN "PRJ_ENGINEER"."SHOW_AREA" IS '显示建筑面积';
COMMENT ON COLUMN "PRJ_ENGINEER"."PRJ_START_TIME" IS '开工日期';
COMMENT ON COLUMN "PRJ_ENGINEER"."PRJ_END_TIME" IS '竣工日期';
COMMENT ON COLUMN "PRJ_ENGINEER"."NAME" IS '姓名';
COMMENT ON COLUMN "PRJ_ENGINEER"."ADDRESS" IS '地址';
COMMENT ON COLUMN "PRJ_ENGINEER"."AREA" IS '面积';
COMMENT ON COLUMN "PRJ_ENGINEER"."PRO_INTRO" IS '项目介绍';
COMMENT ON COLUMN "PRJ_ENGINEER"."DESIGN_ORG_LEVEL" IS '设计单位级别';
COMMENT ON COLUMN "PRJ_ENGINEER"."MGR_ORG_LEVEL" IS '监理单位级别';
COMMENT ON COLUMN "PRJ_ENGINEER"."DESIGN_ORG" IS '设计单位';
COMMENT ON COLUMN "PRJ_ENGINEER"."MGR_ORG" IS '监理单位';
COMMENT ON COLUMN "PRJ_ENGINEER"."ALL_ORG" IS '总包单位';
COMMENT ON COLUMN "PRJ_ENGINEER"."MGR_REAL_NAME" IS '项目经理真实姓名';
COMMENT ON COLUMN "PRJ_ENGINEER"."MGR_SHOW_NAME" IS '项目经理展示名';
COMMENT ON COLUMN "PRJ_ENGINEER"."QUALIFICATION" IS '从业资质';
COMMENT ON COLUMN "PRJ_ENGINEER"."MGR_INTRO" IS '项目经理介绍';
COMMENT ON COLUMN "PRJ_ENGINEER"."MGR_GENDER" IS '项目经理性别';
COMMENT ON COLUMN "PRJ_ENGINEER"."MGR_AGE" IS '项目经理年龄';
COMMENT ON COLUMN "PRJ_ENGINEER"."MGR_SHOW_AGE" IS '项目经理展示年龄';
REM Primary key PRJ_ENGINEER
ALTER TABLE "PRJ_ENGINEER" ADD CONSTRAINT "PRJ_ENGINEER_PK" PRIMARY KEY (P_ID) USING INDEX;
REM Foreign keys PRJ_ENGINEER
ALTER TABLE "PRJ_ENGINEER" ADD CONSTRAINT "PRJ_ENGINEER_PRJ_INDEX_FK1" FOREIGN KEY (P_ID) REFERENCES "PRJ_INDEX" (P_ID) ON DELETE CASCADE;
REM Index PRJ_ENGINEER
CREATE INDEX "PRJ_ENGINEER_P_ID_BPE_ID" ON "PRJ_ENGINEER" (P_ID,BPE_ID)
/

REM Create Table PRJ_ENT_PROGRESS
REM Depend on table(s)
REM [PRJ_INDEX]
CREATE TABLE "PRJ_ENT_PROGRESS" (
	"PEP_ID" NUMBER NOT NULL,
	"P_ID" NUMBER NULL,
	"INTRO" VARCHAR2(4000 CHAR) NULL,
	"CREATOR" VARCHAR2(1280 CHAR) NULL,
	"CREATE_TIME" DATE NULL,
	"UPDATER" VARCHAR2(1280 CHAR) NULL,
	"UPDATE_TIME" DATE NULL,
	"IMG_TIME" DATE NULL
);
COMMENT ON TABLE "PRJ_ENT_PROGRESS" IS '项目进程信息表';
REM Column comments PRJ_ENT_PROGRESS
COMMENT ON COLUMN "PRJ_ENT_PROGRESS"."PEP_ID" IS 'id';
COMMENT ON COLUMN "PRJ_ENT_PROGRESS"."P_ID" IS '项目id';
COMMENT ON COLUMN "PRJ_ENT_PROGRESS"."INTRO" IS '内容';
COMMENT ON COLUMN "PRJ_ENT_PROGRESS"."CREATOR" IS '创建人';
COMMENT ON COLUMN "PRJ_ENT_PROGRESS"."CREATE_TIME" IS '创建时间';
COMMENT ON COLUMN "PRJ_ENT_PROGRESS"."UPDATER" IS '更新人';
COMMENT ON COLUMN "PRJ_ENT_PROGRESS"."UPDATE_TIME" IS '更新时间';
COMMENT ON COLUMN "PRJ_ENT_PROGRESS"."IMG_TIME" IS '照片拍摄时间';
REM Primary key PRJ_ENT_PROGRESS
ALTER TABLE "PRJ_ENT_PROGRESS" ADD CONSTRAINT "PRJ_ENT_PROGRESS_PK" PRIMARY KEY (PEP_ID) USING INDEX;
REM Foreign keys PRJ_ENT_PROGRESS
ALTER TABLE "PRJ_ENT_PROGRESS" ADD CONSTRAINT "PRJ_ENT_PROGRESS_PRJ_INDE_FK1" FOREIGN KEY (P_ID) REFERENCES "PRJ_INDEX" (P_ID) ON DELETE CASCADE;
/

REM Create Table PRJ_GUARANTEE_ORG
REM Depend on table(s)
REM [PRJ_INDEX]
CREATE TABLE "PRJ_GUARANTEE_ORG" (
	"PGO_ID" NUMBER NOT NULL,
	"P_ID" NUMBER NOT NULL,
	"BGO_ID" NUMBER NULL,
	"NAME" VARCHAR2(4000 CHAR) NULL,
	"FORM" VARCHAR2(3200 CHAR) NULL,
	"RANGE" VARCHAR2(3200 CHAR) NULL,
	"LIMIT" VARCHAR2(3200 CHAR) NULL,
	"RELATIONSHIP" VARCHAR2(3200 CHAR) NULL,
	"REG_YEARS" NUMBER(4) NULL,
	"REG_FUNDS" NUMBER(18,2) NULL,
	"INTRO" VARCHAR2(4000 CHAR) NULL,
	"REG_ADDRESS" VARCHAR2(2000 CHAR) NULL,
	"POSTCODE" VARCHAR2(1280 CHAR) NULL,
	"LINKMAN" VARCHAR2(2000 CHAR) NULL,
	"MOBILE" VARCHAR2(2000 CHAR) NULL,
	"RANKING" NUMBER NULL,
	"GET_PRIZE" VARCHAR2(4000 CHAR) NULL,
	"ORG_WEB_SITE" VARCHAR2(2000 CHAR) NULL,
	"SHOW_NAME" VARCHAR2(4000 CHAR) NULL,
	"REGISTERED_DATE" DATE NULL,
	"QUALIFICATION" VARCHAR2(240 CHAR) NULL,
	"LAST_YEAR_INCOME" NUMBER NULL,
	"SHOW_REG_ADDRESS" VARCHAR2(4000 CHAR) NULL,
	"LEGAL_ID_CARD" VARCHAR2(2000 CHAR) NULL,
	"LEGAL_PERSON_NAME" VARCHAR2(2000 CHAR) NULL,
	"LEGAL_PERSON_SHOW_NAME" VARCHAR2(160 CHAR) NULL,
	"GUARANTEE_RIGHT_MAN" VARCHAR2(2000 CHAR) NULL,
	"GUARANTEE_RIGHT_MAN_NO" VARCHAR2(2000 CHAR) NULL,
	"ORDER_NO" NUMBER NULL,
	"VISIBLE" NUMBER NULL,
	"SOCIAL_CREDIT_CODE" VARCHAR2(2000 CHAR) NULL,
	"SHOW_SOCIAL_CREDIT_CODE" VARCHAR2(240 CHAR) NULL,
	"GUARA_HIGH_CREDIT_AMT" NUMBER(18) NULL,
	"MAIN_CREDIT_AMT" NUMBER(18) NULL
);
COMMENT ON TABLE "PRJ_GUARANTEE_ORG" IS '担保机构-快照表';
REM Column comments PRJ_GUARANTEE_ORG
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."PGO_ID" IS '担保id。（机构担保，个人担保）';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."P_ID" IS '项目担保快照。与项目是多对一关系。';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."BGO_ID" IS '关联担保机构数据库表';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."NAME" IS '担保人姓名或名称';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."FORM" IS '担保形式';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."RANGE" IS '担保范围';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."LIMIT" IS '担保期限';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."RELATIONSHIP" IS '与借款人的关系';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."REG_YEARS" IS '注册年限';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."REG_FUNDS" IS '注册资金';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."INTRO" IS '介绍';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."REG_ADDRESS" IS '注册地址';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."POSTCODE" IS '邮编';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."LINKMAN" IS '联系人';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."MOBILE" IS '联系人电话';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."RANKING" IS '行业排名';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."GET_PRIZE" IS '获得奖项';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."ORG_WEB_SITE" IS '公司官网';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."SHOW_NAME" IS '担保企业展示名称';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."REGISTERED_DATE" IS '公司注册时间（成立时间）';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."QUALIFICATION" IS '行业资质';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."LAST_YEAR_INCOME" IS '上一年度主营业务收入';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."SHOW_REG_ADDRESS" IS '展示注册地址';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."LEGAL_ID_CARD" IS '法人身份证号';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."LEGAL_PERSON_NAME" IS '法定代表人姓名';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."LEGAL_PERSON_SHOW_NAME" IS '展示法定代表人姓名';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."GUARANTEE_RIGHT_MAN" IS '担保权人名称';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."GUARANTEE_RIGHT_MAN_NO" IS '担保权人身份证号或者统一一社会信用代码';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."ORDER_NO" IS '排列顺序';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."VISIBLE" IS '前台是否可见';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."SOCIAL_CREDIT_CODE" IS '统一社会信用代码';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."SHOW_SOCIAL_CREDIT_CODE" IS '展示统一社会信用代码';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."GUARA_HIGH_CREDIT_AMT" IS '担保的最高债权额';
COMMENT ON COLUMN "PRJ_GUARANTEE_ORG"."MAIN_CREDIT_AMT" IS '主债权余额';
REM Primary key PRJ_GUARANTEE_ORG
ALTER TABLE "PRJ_GUARANTEE_ORG" ADD CONSTRAINT "PRJ_GUARANTEE_ORG_PK" PRIMARY KEY (PGO_ID) USING INDEX;
REM Foreign keys PRJ_GUARANTEE_ORG
ALTER TABLE "PRJ_GUARANTEE_ORG" ADD CONSTRAINT "PRJ_GUARANTEE_ORG_PRJ_INDEX_F" FOREIGN KEY (P_ID) REFERENCES "PRJ_INDEX" (P_ID) ON DELETE CASCADE;
/

REM Create Table PRJ_GUARANTEE_PERSON
REM Depend on table(s)
REM [PRJ_INDEX]
CREATE TABLE "PRJ_GUARANTEE_PERSON" (
	"PGP_ID" NUMBER NOT NULL,
	"P_ID" NUMBER NOT NULL,
	"BGP_ID" NUMBER NULL,
	"NAME" VARCHAR2(4000 CHAR) NULL,
	"FORM" VARCHAR2(3200 CHAR) NULL,
	"RANGE" VARCHAR2(3200 CHAR) NULL,
	"LIMIT" VARCHAR2(3200 CHAR) NULL,
	"RELATIONSHIP" VARCHAR2(3200 CHAR) NULL,
	"INTRO" VARCHAR2(4000 CHAR) NULL,
	"ADDRESS" VARCHAR2(2000 CHAR) NULL,
	"SHOW_ADDRESS" VARCHAR2(260) NULL,
	"POSTCODE" VARCHAR2(1280 CHAR) NULL,
	"SHOW_NAME" VARCHAR2(1280 CHAR) NULL,
	"LAST_YEAR_INCOME" NUMBER NULL,
	"GUARANTEE_RIGHT_MAN" VARCHAR2(2000 CHAR) NULL,
	"GUARANTEE_RIGHT_MAN_NO" VARCHAR2(2000 CHAR) NULL,
	"AGE" NUMBER NULL,
	"SHOW_AGE" VARCHAR2(80 CHAR) NULL,
	"GENDER" VARCHAR2(1280 CHAR) NULL,
	"ID_CARD" VARCHAR2(2000 CHAR) NULL,
	"MOBILE" VARCHAR2(2000 CHAR) NULL,
	"ORDER_NO" NUMBER NULL,
	"VISIBLE" NUMBER NULL,
	"GUARA_HIGH_CREDIT_AMT" NUMBER(18) NULL,
	"MAIN_CREDIT_AMT" NUMBER(18) NULL
);
COMMENT ON TABLE "PRJ_GUARANTEE_PERSON" IS '担保个人-快照表';
REM Column comments PRJ_GUARANTEE_PERSON
COMMENT ON COLUMN "PRJ_GUARANTEE_PERSON"."PGP_ID" IS '担保id。（个人担保）';
COMMENT ON COLUMN "PRJ_GUARANTEE_PERSON"."P_ID" IS '项目担保快照。与项目是多对一关系。';
COMMENT ON COLUMN "PRJ_GUARANTEE_PERSON"."BGP_ID" IS '关联担保个人数据库表';
COMMENT ON COLUMN "PRJ_GUARANTEE_PERSON"."NAME" IS '担保人姓名';
COMMENT ON COLUMN "PRJ_GUARANTEE_PERSON"."FORM" IS '担保形式';
COMMENT ON COLUMN "PRJ_GUARANTEE_PERSON"."RANGE" IS '担保范围';
COMMENT ON COLUMN "PRJ_GUARANTEE_PERSON"."LIMIT" IS '担保期限';
COMMENT ON COLUMN "PRJ_GUARANTEE_PERSON"."RELATIONSHIP" IS '与借款人的关系';
COMMENT ON COLUMN "PRJ_GUARANTEE_PERSON"."INTRO" IS '介绍';
COMMENT ON COLUMN "PRJ_GUARANTEE_PERSON"."ADDRESS" IS '地址';
COMMENT ON COLUMN "PRJ_GUARANTEE_PERSON"."SHOW_ADDRESS" IS '展示地址';
COMMENT ON COLUMN "PRJ_GUARANTEE_PERSON"."POSTCODE" IS '邮编';
COMMENT ON COLUMN "PRJ_GUARANTEE_PERSON"."SHOW_NAME" IS '担保个人展示名称';
COMMENT ON COLUMN "PRJ_GUARANTEE_PERSON"."LAST_YEAR_INCOME" IS '上一年度主营业务收入';
COMMENT ON COLUMN "PRJ_GUARANTEE_PERSON"."GUARANTEE_RIGHT_MAN" IS '担保权人名称';
COMMENT ON COLUMN "PRJ_GUARANTEE_PERSON"."GUARANTEE_RIGHT_MAN_NO" IS '担保权人身份证号或者统一一社会信用代码';
COMMENT ON COLUMN "PRJ_GUARANTEE_PERSON"."AGE" IS '年龄';
COMMENT ON COLUMN "PRJ_GUARANTEE_PERSON"."SHOW_AGE" IS '展示年龄';
COMMENT ON COLUMN "PRJ_GUARANTEE_PERSON"."GENDER" IS '性别，0女，1男';
COMMENT ON COLUMN "PRJ_GUARANTEE_PERSON"."ID_CARD" IS '担保人身份证号';
COMMENT ON COLUMN "PRJ_GUARANTEE_PERSON"."MOBILE" IS '担保人联系电话';
COMMENT ON COLUMN "PRJ_GUARANTEE_PERSON"."ORDER_NO" IS '排列顺序';
COMMENT ON COLUMN "PRJ_GUARANTEE_PERSON"."VISIBLE" IS '前台是否可见';
COMMENT ON COLUMN "PRJ_GUARANTEE_PERSON"."GUARA_HIGH_CREDIT_AMT" IS '担保的最高债权额';
COMMENT ON COLUMN "PRJ_GUARANTEE_PERSON"."MAIN_CREDIT_AMT" IS '主债权余额';
REM Primary key PRJ_GUARANTEE_PERSON
ALTER TABLE "PRJ_GUARANTEE_PERSON" ADD CONSTRAINT "PRJ_GUARANTEE_PERSON_PK" PRIMARY KEY (PGP_ID) USING INDEX;
REM Foreign keys PRJ_GUARANTEE_PERSON
ALTER TABLE "PRJ_GUARANTEE_PERSON" ADD CONSTRAINT "PRJ_GUARANTEE_PERSON_PRJ_INDE" FOREIGN KEY (P_ID) REFERENCES "PRJ_INDEX" (P_ID) ON DELETE CASCADE;
/

REM Create Table SHCA_DOC_FILE
REM Depend on table(s)
REM [SHCA_DOC_SIGN]
CREATE TABLE "SHCA_DOC_FILE" (
	"SDS_ID" NUMBER NULL,
	"FILE_ID" VARCHAR2(160 CHAR) NULL,
	"FILE_NAME" VARCHAR2(800 CHAR) NOT NULL,
	"OBJECT_ID" NUMBER NOT NULL,
	"DOC_ID" NUMBER NULL,
	"DOWNLOAD_TIME" DATE NULL,
	"PAGE_COUNT" NUMBER NULL,
	"CATEGORY" NUMBER DEFAULT 0 NOT NULL
);
COMMENT ON TABLE "SHCA_DOC_FILE" IS '签章文件相关信息';
REM Column comments SHCA_DOC_FILE
COMMENT ON COLUMN "SHCA_DOC_FILE"."SDS_ID" IS '所属的签署实例ID';
COMMENT ON COLUMN "SHCA_DOC_FILE"."FILE_ID" IS 'shca返回的文件ID';
COMMENT ON COLUMN "SHCA_DOC_FILE"."FILE_NAME" IS '参与签署的文件名';
COMMENT ON COLUMN "SHCA_DOC_FILE"."OBJECT_ID" IS '关联的对象的ID';
COMMENT ON COLUMN "SHCA_DOC_FILE"."DOC_ID" IS 'shca返回的docId，空表示尚不能下载';
COMMENT ON COLUMN "SHCA_DOC_FILE"."DOWNLOAD_TIME" IS '下载签署文件  的时间，空表示尚未下载。';
COMMENT ON COLUMN "SHCA_DOC_FILE"."PAGE_COUNT" IS '上传文档页数';
COMMENT ON COLUMN "SHCA_DOC_FILE"."CATEGORY" IS '1-平台自动签署 2-多方签署';
REM Primary key SHCA_DOC_FILE
ALTER TABLE "SHCA_DOC_FILE" ADD CONSTRAINT "SHCA_DOC_FILE_PK" PRIMARY KEY (OBJECT_ID,FILE_NAME) USING INDEX;
REM Foreign keys SHCA_DOC_FILE
ALTER TABLE "SHCA_DOC_FILE" ADD CONSTRAINT "SHCA_DOC_FILE_FK1" FOREIGN KEY (SDS_ID) REFERENCES "SHCA_DOC_SIGN" (SDS_ID) ON DELETE CASCADE;
/

REM Drop sequences
CALL DROP_SEQUENCE_IF_EXISTS('WHITE_LIST_ID');
CALL DROP_SEQUENCE_IF_EXISTS('SYS_ID');
CALL DROP_SEQUENCE_IF_EXISTS('SDS_ID');
CALL DROP_SEQUENCE_IF_EXISTS('PRJ_ID');
CALL DROP_SEQUENCE_IF_EXISTS('PRJ_GUARANTEE_ID');
CALL DROP_SEQUENCE_IF_EXISTS('PM_ID');
CALL DROP_SEQUENCE_IF_EXISTS('PBD_ID');
CALL DROP_SEQUENCE_IF_EXISTS('ORDER_ID');
CALL DROP_SEQUENCE_IF_EXISTS('ITL_ID');
CALL DROP_SEQUENCE_IF_EXISTS('FS_FILE_ID');
CALL DROP_SEQUENCE_IF_EXISTS('FINACIER_ID');
CALL DROP_SEQUENCE_IF_EXISTS('CRM_INVESTOR_ID');
CALL DROP_SEQUENCE_IF_EXISTS('CN_ID');
CALL DROP_SEQUENCE_IF_EXISTS('CA_ID');
CALL DROP_SEQUENCE_IF_EXISTS('BA_ID');
CALL DROP_SEQUENCE_IF_EXISTS('BATCH_ID');
CALL DROP_SEQUENCE_IF_EXISTS('BANNER_ID_SEQ');
CALL DROP_SEQUENCE_IF_EXISTS('ASO_ID');
CALL DROP_SEQUENCE_IF_EXISTS('ASD_ID');
CALL DROP_SEQUENCE_IF_EXISTS('AR_ID');
CALL DROP_SEQUENCE_IF_EXISTS('APP_ID');
/

REM Create sequence APP_ID
CREATE SEQUENCE "APP_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 ORDER;
/

REM Create sequence AR_ID
CREATE SEQUENCE "AR_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 ORDER;
/

REM Create sequence ASD_ID
CREATE SEQUENCE "ASD_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 ORDER;
/

REM Create sequence ASO_ID
CREATE SEQUENCE "ASO_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 ORDER;
/

REM Create sequence BANNER_ID_SEQ
CREATE SEQUENCE "BANNER_ID_SEQ" MINVALUE 1 MAXVALUE 999999999999999999 INCREMENT BY 1 ORDER;
/

REM Create sequence BATCH_ID
CREATE SEQUENCE "BATCH_ID" MINVALUE 1 MAXVALUE 999999 INCREMENT BY 1 ORDER;
/

REM Create sequence BA_ID
CREATE SEQUENCE "BA_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 2 ORDER;
/

REM Create sequence CA_ID
CREATE SEQUENCE "CA_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 ORDER;
/

REM Create sequence CN_ID
CREATE SEQUENCE "CN_ID" MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 ORDER;
/

REM Create sequence CRM_INVESTOR_ID
CREATE SEQUENCE "CRM_INVESTOR_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 ORDER;
/

REM Create sequence FINACIER_ID
CREATE SEQUENCE "FINACIER_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 ORDER;
/

REM Create sequence FS_FILE_ID
CREATE SEQUENCE "FS_FILE_ID" MINVALUE 2 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 ORDER;
/

REM Create sequence ITL_ID
CREATE SEQUENCE "ITL_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 ORDER;
/

REM Create sequence ORDER_ID
CREATE SEQUENCE "ORDER_ID" MINVALUE 100 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 ORDER;
/

REM Create sequence PBD_ID
CREATE SEQUENCE "PBD_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 ORDER;
/

REM Create sequence PM_ID
CREATE SEQUENCE "PM_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 ORDER;
/

REM Create sequence PRJ_GUARANTEE_ID
CREATE SEQUENCE "PRJ_GUARANTEE_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 ORDER;
/

REM Create sequence PRJ_ID
CREATE SEQUENCE "PRJ_ID" MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 ORDER;
/

REM Create sequence SDS_ID
CREATE SEQUENCE "SDS_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 ORDER;
/

REM Create sequence SYS_ID
CREATE SEQUENCE "SYS_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 ORDER;
/

REM Create sequence WHITE_LIST_ID
CREATE SEQUENCE "WHITE_LIST_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 ORDER;
/

REM Create view VIEW1
CREATE OR REPLACE VIEW "VIEW1" AS
SELECT AU_ID FROM ACC_JX_USER;
/

REM Create view V_ACC_RUNNING
CREATE OR REPLACE VIEW "V_ACC_RUNNING" AS
SELECT
  NULL SEQ_ID,
  AR.AR_ID,
  AR.AR_TYPE,
  AR.AU_ID,
  AR.TS_ID,
  AR.DATEPOINT,
  AR.CREDIT_AMT,
  AR.DEBIT_AMT,
  AR.FRZ_AMT,
  AR.UNFRZ_AMT,
  AR.REMARK,
  P_ID,
  P.TYPE
FROM ACC_RUNNING AR
LEFT JOIN PRJ_INDEX P USING(P_ID);
/

REM Create view V_MGR_REG_USER
CREATE OR REPLACE VIEW "V_MGR_REG_USER" AS
SELECT U2.AU_ID A_ID, U1.AU_ID D_ID 
FROM ACC2.ACC_USER_REG U1
INNER JOIN ACC2.ACC_USER_REG U2 ON U1.RECOMMEND_MOBILE = U2.MOBILE
WHERE U2.AU_ID <> U1.AU_ID
AND NOT EXISTS(SELECT 1 FROM CRM_MGR_REG_USER_RELATION CMRUR WHERE CMRUR.AU_ID = U1.AU_ID);
/

REM Create view V_PRJ_BONUS
CREATE OR REPLACE VIEW "V_PRJ_BONUS" AS
SELECT PB.P_ID,
  PB.TRAN_NO,
  PB.TRAN_TYPE,
  MIN(PI.AMT) CAPITAL,
  MIN(PB.AMT)  AMT,
 NVL(SUM(PBD.paid_AMT), 0)   PAID_AMT,
  MIN(PB.AMT) - NVL(SUM(PBD.paid_AMT), 0)  UNPAID_AMT,
  MIN(PB.OVERDUEL_AMT) OVERDUEL_AMT,
  NVL(SUM(PBD2.paid_AMT), 0) PAID_OVERDUEL_AMT,
  MIN(PB.OVERDUEL_AMT) - NVL(SUM(PBD2.paid_AMT), 0) UNPAID_OVERDUEL_AMT,
  MIN(PB.DUE_TIME) DUE_TIME,
  CASE
    WHEN SUM(PBD.paid_AMT) >= MIN(PB.AMT) THEN 1
    ELSE 0
  END STATUS,
 CASE WHEN MAX(PBD.PBD_ID) > 0 THEN MAX(PBD.PAID_TIME) ELSE NULL END PAID_TIME
FROM PRJ_BONUS PB
INNER JOIN PRJ_INDEX PI ON PI.P_ID = PB.P_ID
LEFT JOIN V_PRJ_BONUS_DETAIL PBD
ON PBD.P_ID        = PB.P_ID
AND PBD.TRAN_NO    = PB.TRAN_NO
AND PBD.TRAN_TYPE  = PB.TRAN_TYPE
AND PBD.OVER_DUEL <> 1
LEFT JOIN V_PRJ_BONUS_DETAIL PBD2
ON PBD2.P_ID        = PB.P_ID
AND PBD2.TRAN_NO    = PB.TRAN_NO
AND PBD2.TRAN_TYPE  = PB.TRAN_TYPE
AND PBD2.OVER_DUEL = 1
GROUP BY PB.P_ID,
  PB.TRAN_NO,
  PB.TRAN_TYPE,
  PBD.P_ID,
  PBD.TRAN_NO,
  PBD.TRAN_TYPE;
/

REM Create view V_PRJ_BONUS_DETAIL
CREATE OR REPLACE VIEW "V_PRJ_BONUS_DETAIL" AS
SELECT
       PBD.PBD_ID,
       PBD.P_ID,
       PBD.TRAN_NO,
       PBD.TRAN_TYPE,
       PBD.OVER_DUEL,
       PBD.AMT,
       NVL(TR.AMT, 0) + NVL(TRI.AMT, 0) PAID_AMT,
       PBD.PAY_TYPE,
       PBD.PAID_TIME,
       PBD.CREATOR,
       PBD.CREATE_TIME,
       PBD.REMARK,
       pbd.UPLOAD_STATUS
    FROM
       PRJ_BONUS_DETAIL PBD
    LEFT JOIN
       (SELECT TR.PBD_ID,SUM(TR.AMT) AMT FROM  TS_REPAY TR WHERE TR.STATUS =1
          GROUP BY TR.PBD_ID) TR ON TR.PBD_ID = PBD.PBD_ID
    LEFT JOIN
      (SELECT TRI.PBD_ID,SUM(TRI.AMT) AMT FROM  TS_REPAY_INTEREST  TRI WHERE TRI.STATUS =1
          GROUP BY TRI.PBD_ID) TRI ON TRI.PBD_ID = PBD.PBD_ID
    INNER JOIN PRJ_INDEX PI ON PI.P_ID = PBD.P_ID AND PI.TYPE <> 6;
/

REM Create view V_REPAID_CAPITAL_AMT
CREATE OR REPLACE VIEW "V_REPAID_CAPITAL_AMT" AS
SELECT 
        SUM(TR.AMT) REPAID_CAPITAL_AMT, AJU.AU_ID, TRUNC(TR.DATEPOINT) DATEPOINT
  FROM  ACC_JX_USER AJU
  JOIN  TS_INVEST TI ON TI.AU_ID = AJU.AU_ID
  JOIN  TS_REPAY TR ON TR.TI_ID = TI.TI_ID AND TR.STATUS = 1 --AND TRUNC(TR.DATEPOINT) >= TRUNC(START_DATE) AND TRUNC(TR.DATEPOINT) <= TRUNC(END_DATE)
  WHERE EXISTS(SELECT 1 FROM ACC_USER_DAY_STATISTICS WHERE AU_ID = AJU.AU_ID AND DATEPOINT = TO_CHAR(TR.DATEPOINT, 'YYYYMMDD'))
  GROUP BY AJU.AU_ID, TRUNC(TR.DATEPOINT);
/

REM Create view V_TS_COLLECTION
CREATE OR REPLACE VIEW "V_TS_COLLECTION" AS
SELECT TC.TI_ID, TI.P_ID, TC.TRAN_NO, TC.TRAN_TYPE, TI.AU_ID,
  TC.AMT, TC.PAID_AMT, case when (TC.AMT - TC.PAID_AMT)>0 then TC.AMT - TC.PAID_AMT else 0 end  UNPAID_AMT,
  TC.OVERDUE_AMT, TC.PAID_OVERDUE_AMT, TC.OVERDUE_AMT - TC.PAID_OVERDUE_AMT UNPAID_OVERDUE_AMT,
  TC.CREATE_DATE, TC.CREATOR,TC.DELETED
FROM TS_COLLECTION TC
INNER JOIN TS_INVEST TI ON TI.TI_ID = TC.TI_ID
WHERE DELETED <>1;
/

REM Create view V_TS_COLLECTION2
CREATE OR REPLACE VIEW "V_TS_COLLECTION2" AS
SELECT
   NULL TC_ID, NULL PB_ID, DELETED,

   TI_ID, P_ID, TRAN_NO, TRAN_TYPE, AU_ID,
CASE
    WHEN TRAN_TYPE IN (1) THEN AMT
    ELSE 0
  END CAPITAL_AMT,
CASE
    WHEN TRAN_TYPE IN (1) THEN PAID_AMT
    ELSE 0
  END PAID_CAPITAL_AMT,
CASE
    WHEN TRAN_TYPE IN (1) THEN UNPAID_AMT
    ELSE 0
  END UNPAID_CAPITAL_AMT,
CASE
    WHEN TRAN_TYPE NOT IN (1) THEN AMT
    ELSE 0
  END INTEREST_AMT,
CASE
    WHEN TRAN_TYPE NOT IN (1) THEN PAID_AMT
    ELSE 0
  END PAID_INTEREST_AMT,
CASE
    WHEN TRAN_TYPE NOT IN (1) THEN UNPAID_AMT
    ELSE 0
  END UNPAID_INTEREST_AMT,
CREATE_DATE,
CREATOR
FROM V_TS_COLLECTION;
/

REM Create function FS_CONTENT_LENGTH
CREATE OR REPLACE FUNCTION FS_CONTENT_LENGTH(

    V_FILE_ID IN NUMBER )

  RETURN NUMBER

AS

  V_CB BLOB;

  V_LEN INTEGER;

BEGIN

  SELECT CONTENT INTO V_CB FROM FS_FILE_CONTENT WHERE FILE_ID = V_FILE_ID;

  DBMS_LOB.OPEN(V_CB, DBMS_LOB.LOB_READONLY);

  V_LEN := DBMS_LOB.GETLENGTH(V_CB);

  DBMS_LOB.CLOSE(V_CB);

  IF V_LEN IS NULL THEN

    V_LEN  :=0;

  END IF;

RETURN V_LEN;

EXCEPTION

WHEN NO_DATA_FOUND THEN

  DBMS_LOB.CLOSE(V_CB);

  RETURN 0;

END FS_CONTENT_LENGTH;
/

REM Create procedure ACC_ADD_SCORE_DATAIL
CREATE OR REPLACE PROCEDURE ACC_ADD_SCORE_DATAIL(

    V_RET OUT SYS_REFCURSOR,

    V_AU_ID     IN     NUMBER, -- 积分所属用户ID

    V_DATEPOINT IN     DATE, -- 积分的有效开始日期

    V_ORIGIN    IN     NUMBER, -- 积分的来源

    V_GAINED    IN     NUMBER -- 积分的值

  )

IS

  V_ASD_ID NUMBER;

  V_COUNT  NUMBER;

  V_RET_CODE NUMBER;

  V_TOTAL_SCORE NUMBER;

  

BEGIN

  V_RET_CODE := 0;

  --插入积分详情记录

  SELECT

    ASD_ID.NEXTVAL

  INTO

    V_ASD_ID

  FROM

    DUAL;

    

  SELECT

    COUNT(AU_ID)

  INTO

    V_COUNT

  FROM

    ACC_SCORE

  WHERE

    AU_ID    = V_AU_ID;

    

  IF V_COUNT > 0 THEN

    SELECT SCORE INTO V_TOTAL_SCORE FROM ACC_SCORE WHERE AU_ID = V_AU_ID;

  ELSE

    V_TOTAL_SCORE := 0;

  END IF;

    

  INSERT

  INTO

    ACC_SCORE_DETAIL

    (

      ASD_ID,

      AU_ID,

      DATE_POINT,

      ORIGIN,

      GAINED,

      SPENT,

      BALANCE

    )

    VALUES

    (

      V_ASD_ID,

      V_AU_ID,

      V_DATEPOINT,

      V_ORIGIN,

      V_GAINED,

      0,

      V_GAINED + V_TOTAL_SCORE

    );

  --更新积分表，记录总积分。

  SELECT

    COUNT(AU_ID)

  INTO

    V_COUNT

  FROM

    ACC_SCORE

  WHERE

    AU_ID    = V_AU_ID;

    

  IF V_COUNT > 0 THEN

    UPDATE

      ACC_SCORE

    SET

      SCORE =SCORE + V_GAINED

    WHERE

      AU_ID = V_AU_ID;

  ELSE

    INSERT

    INTO

      ACC_SCORE

      (

        AU_ID,

        SCORE

      )

    SELECT

      V_AU_ID,

      V_GAINED

    FROM

      DUAL;

  END IF;

  V_RET_CODE := 2;

  OPEN V_RET FOR SELECT V_RET_CODE FROM DUAL;

END ACC_ADD_SCORE_DATAIL;
/

REM Create procedure ACC_AUTO_TENDER_STRATEGY_SAVE
CREATE OR REPLACE PROCEDURE     ACC_AUTO_TENDER_STRATEGY_SAVE(

  V_RET OUT SYS_REFCURSOR,

  V_AU_ID                IN NUMBER,

  V_CREATE_TIME          IN DATE  ,

  V_UPDATE_TIME          IN DATE  ,

  V_STATUS               IN NUMBER,

  V_MAX_RATE             IN NUMBER,

  V_MIN_RATE             IN NUMBER,

  V_MAX_BORR_DAYS        IN NUMBER,

  V_MIN_BORR_DAYS        IN NUMBER,

  V_PER_INVEST_MAX_AMT   IN NUMBER,

  V_FIXED_BAL            IN NUMBER,

  V_ALLOW_RISK_ASSESS    IN VARCHAR2)

AS

BEGIN

  UPDATE ACC_AUTO_TENDER_STRATEGY

     SET UPDATE_TIME          = V_UPDATE_TIME,

         STATUS               = V_STATUS,

         MAX_RATE             = V_MAX_RATE,

         MIN_RATE             = V_MIN_RATE,

         MAX_BORR_DAYS        = V_MAX_BORR_DAYS,

         MIN_BORR_DAYS        = V_MIN_BORR_DAYS,

         PER_INVEST_MAX_AMT   = V_PER_INVEST_MAX_AMT,

         FIXED_BAL            = V_FIXED_BAL,

         ALLOW_RISK_ASSESS    = V_ALLOW_RISK_ASSESS

   WHERE AU_ID                = V_AU_ID ; 

  IF SQL%NOTFOUND THEN

    INSERT INTO ACC_AUTO_TENDER_STRATEGY(

      AU_ID,

      CREATE_TIME,

      UPDATE_TIME,

      STATUS,

      MAX_RATE,

      MIN_RATE,

      MAX_BORR_DAYS,

      MIN_BORR_DAYS,

      PER_INVEST_MAX_AMT,

      FIXED_BAL,

      ALLOW_RISK_ASSESS)

    VALUES (

      V_AU_ID,

      V_CREATE_TIME,

      NULL,

      V_STATUS,

      V_MAX_RATE,

      V_MIN_RATE,

      V_MAX_BORR_DAYS,

      V_MIN_BORR_DAYS,

      V_PER_INVEST_MAX_AMT,

      V_FIXED_BAL,

      V_ALLOW_RISK_ASSESS);

  END IF;

  OPEN V_RET FOR

  SELECT

    AU_ID,

    CREATE_TIME,

    UPDATE_TIME,

    STATUS,

    MAX_RATE,

    MIN_RATE,

    MAX_BORR_DAYS,

    MIN_BORR_DAYS,

    PER_INVEST_MAX_AMT,

    FIXED_BAL,

    ALLOW_RISK_ASSESS

  FROM ACC_AUTO_TENDER_STRATEGY

 WHERE AU_ID = V_AU_ID ; 

END ACC_AUTO_TENDER_STRATEGY_SAVE;
/

REM Create procedure ACC_LEVEL_SCORE_SAVE
CREATE OR REPLACE PROCEDURE "ACC_LEVEL_SCORE_SAVE"(

    V_RET OUT SYS_REFCURSOR,

    V_AU_ID    IN NUMBER,

    V_SCORE    IN NUMBER )

AS

BEGIN

  UPDATE ACC_LEVEL_SCORE

	 SET AU_ID = V_AU_ID,

		 SCORE = V_SCORE

   WHERE AU_ID = V_AU_ID;

  IF SQL%NOTFOUND THEN

    INSERT INTO ACC_LEVEL_SCORE 

	  (

		AU_ID, 

		SCORE 

	  )

    VALUES

      (

        V_AU_ID,

        V_SCORE

      );

  END IF;

  OPEN V_RET 

   FOR 

	   SELECT 

			  AU_ID, SCORE 

		 FROM ACC_LEVEL_SCORE WHERE AU_ID = V_AU_ID;

END ACC_LEVEL_SCORE_SAVE;
/

REM Create procedure ACC_REDUCE_SCORE_DETAIL
CREATE OR REPLACE PROCEDURE acc_reduce_score_detail (

    v_ret         OUT           SYS_REFCURSOR,

    v_au_id       IN            NUMBER, --传入参数：待消耗积分的用户主键

    v_datepoint   IN            DATE, -- 积分的消耗日期

    v_origin      IN            NUMBER, -- 来源，兑换时此值为12

    v_spent       IN            NUMBER  --传入参数：待消耗积分。

) IS

    v_count                NUMBER; --总积分表是否有用户的积分余额记录

    v_total_score          NUMBER; --总分表中的用户余额

    v_detail_total_score   NUMBER; --明细表中的用户余额（最新一条记录中的余额）正常情况下该余额等于上一个字段的值（总分表中的用户余额）

    v_asd_id               NUMBER; --新建兑换明细记录的主键值

    v_ret_code             NUMBER; -- 返回信息类型，0-余额积分不够；1-原数据余额不一致；2，积分扣除正常。  

BEGIN

    v_ret_code := 0;

    SELECT

        COUNT(au_id)

    INTO v_count

    FROM

        acc_score

    WHERE

        au_id = v_au_id;



    IF v_count > 0 THEN

        SELECT

            score

        INTO v_total_score

        FROM

            acc_score

        WHERE

            au_id = v_au_id;



        SELECT

            balance

        INTO v_detail_total_score

        FROM

            acc_score_detail

        WHERE

            asd_id = (

                SELECT

                    MAX(asd_id)

                FROM

                    acc_score_detail

                WHERE

                    au_id = v_au_id

            );



        IF v_detail_total_score <> v_total_score THEN

            v_ret_code := 1; --原数据余额不一致

        ELSE

            IF v_total_score > v_spent THEN

                SELECT

                    asd_id.NEXTVAL

                INTO v_asd_id

                FROM

                    dual;



                INSERT INTO acc_score_detail (

                    asd_id,

                    au_id,

                    date_point,

                    origin,

                    gained,

                    spent,

                    balance

                ) VALUES (

                    v_asd_id,

                    v_au_id,

                    v_datepoint,

                    v_origin,

                    0,

                    v_spent,

                    v_total_score - v_spent

                );



                UPDATE acc_score

                SET

                    score = score - v_spent

                WHERE

                    au_id = v_au_id;



                v_ret_code := 2;

            END IF;

        END IF;



    END IF;



    OPEN v_ret FOR SELECT

                      v_ret_code

                  FROM

                      dual;



END acc_reduce_score_detail;

/

REM Create procedure ACC_SAVE_ACC_JX_USER
CREATE OR REPLACE PROCEDURE "ACC_SAVE_ACC_JX_USER" (

    V_RET OUT SYS_REFCURSOR ,

    V_AU_ID      IN NUMBER ,

    V_USER_ID    IN VARCHAR2 ,

    V_RE_CARD    IN VARCHAR2 ,

    V_NAME       IN VARCHAR2 ,

    V_ID_TYPE    IN VARCHAR2 ,

    V_ID_CARD    IN VARCHAR2 ,

    V_MOBILE     IN VARCHAR2 ,

    V_DATE_POINT IN TIMESTAMP ,

    V_PWD_SET    IN NUMBER ,

    V_IDENTITY   IN NUMBER)

AS

BEGIN

  UPDATE ACC_JX_USER

  SET AU_ID   = V_AU_ID,

    USER_ID   = V_USER_ID,

    RECARD    = V_RE_CARD,

    NAME      = V_NAME,

    ID_TYPE   = V_ID_TYPE,

    ID_CARD   = V_ID_CARD,

    MOBILE    = V_MOBILE,

    DATEPOINT = V_DATE_POINT,

    PWD_SET   = V_PWD_SET,

    IDENTITY  = V_IDENTITY

  WHERE AU_ID = V_AU_ID;

  IF SQL%NOTFOUND THEN

    INSERT

    INTO ACC_JX_USER

      (

        AU_ID,

        USER_ID,

        RECARD,

        NAME,

        ID_TYPE,

        ID_CARD,

        MOBILE,

        DATEPOINT,

        PWD_SET,

        IDENTITY

      )

      VALUES

      (

        V_AU_ID,

        V_USER_ID,

        V_RE_CARD,

        V_NAME,

        V_ID_TYPE,

        V_ID_CARD,

        V_MOBILE,

        V_DATE_POINT,

        V_PWD_SET,

        V_IDENTITY

      );

  END IF;

  OPEN V_RET FOR SELECT AU_ID,

  USER_ID,

  RECARD,

  NAME,

  ID_TYPE,

  ID_CARD,

  MOBILE,

  DATEPOINT,

  PWD_SET,

  IDENTITY FROM ACC_JX_USER WHERE AU_ID = V_AU_ID;

END ACC_SAVE_ACC_JX_USER;

/

REM Create procedure ACC_UPDATE_ACC_JX_USER
CREATE OR REPLACE PROCEDURE       "ACC_UPDATE_ACC_JX_USER" (

    V_RET OUT SYS_REFCURSOR ,

    V_AU_ID      IN NUMBER ,

    V_USER_ID    IN VARCHAR2 ,

    V_RE_CARD    IN VARCHAR2 ,

    V_NAME       IN VARCHAR2 ,

    V_ID_TYPE    IN VARCHAR2 ,

    V_ID_CARD    IN VARCHAR2 ,

    V_MOBILE     IN VARCHAR2 ,

    V_DATE_POINT IN TIMESTAMP ,

    V_PWD_SET    IN NUMBER ,

    V_IDENTITY   IN NUMBER)

AS

BEGIN

  UPDATE ACC_JX_USER

  SET AU_ID   = V_AU_ID,

    USER_ID   = V_USER_ID,

    RECARD    = V_RE_CARD,

    NAME      = V_NAME,

    ID_TYPE   = V_ID_TYPE,

    ID_CARD   = V_ID_CARD,

    MOBILE    = V_MOBILE,

    DATEPOINT = V_DATE_POINT,

    PWD_SET   = V_PWD_SET,

    IDENTITY  = V_IDENTITY

  WHERE AU_ID = V_AU_ID;

  IF SQL%NOTFOUND THEN

    INSERT

    INTO ACC_JX_USER

      (

        AU_ID,

        USER_ID,

        RECARD,

        NAME,

        ID_TYPE,

        ID_CARD,

        MOBILE,

        DATEPOINT,

        PWD_SET,

        IDENTITY

      )

      VALUES

      (

        V_AU_ID,

        V_USER_ID,

        V_RE_CARD,

        V_NAME,

        V_ID_TYPE,

        V_ID_CARD,

        V_MOBILE,

        V_DATE_POINT,

        V_PWD_SET,

        V_IDENTITY

      );

  END IF;

  OPEN V_RET FOR SELECT AU_ID,

  USER_ID,

  RECARD,

  NAME,

  ID_TYPE,

  ID_CARD,

  MOBILE,

  DATEPOINT,

  PWD_SET,

  IDENTITY FROM ACC_JX_USER WHERE AU_ID = V_AU_ID;

END ACC_UPDATE_ACC_JX_USER;
/

REM Create procedure ADJUST_PRJ_BONUS
CREATE OR REPLACE PROCEDURE "ADJUST_PRJ_BONUS"(

    V_RET OUT SYS_REFCURSOR,

    V_P_ID IN INTEGER)

IS

  V_P_TYPE     NUMBER;

BEGIN

  --1，工程贷；2，银票贷；3，商票贷；4，债权转让；6，班汇宝；7，供应贷；8，分销贷；9，个人贷

  SELECT TYPE

  INTO V_P_TYPE

  FROM PRJ_INDEX

  WHERE P_ID = V_P_ID;

  UPDATE PRJ_LOAN SET STATUS = 999 WHERE STATUS = 90 AND P_ID = V_P_ID;

  -- Update PRJ_BONUS.AMT = PAID_AMT

  UPDATE PRJ_BONUS PB

  SET AMT =

    (SELECT PAID_AMT

    FROM V_PRJ_BONUS

    WHERE P_ID    = PB.P_ID

    AND TRAN_NO   = PB.TRAN_NO

    AND TRAN_TYPE = PB.TRAN_TYPE

    )

  WHERE PB.P_ID    = V_P_ID

  AND PB.TRAN_TYPE = 0

  AND EXISTS

    (SELECT 1

    FROM V_PRJ_BONUS

    WHERE P_ID    = PB.P_ID

    AND TRAN_NO   = PB.TRAN_NO

    AND TRAN_TYPE = PB.TRAN_TYPE

    AND AMT       > PAID_AMT

    );

  -- Update TS_COLLECTION.AMT = PAID_AMT

  UPDATE TS_COLLECTION TC

  SET AMT = PAID_AMT

  WHERE EXISTS

    (SELECT 1 FROM TS_INVEST WHERE TI_ID = TC.TI_ID AND P_ID = V_P_ID AND DATEPOINT2 > SYSDATE

    )

  AND AMT > PAID_AMT;

  

  -- create ts_credit_end

  INSERT INTO TS_CREDIT_END(TCE_ID, TI_ID, STATUS, DATEPOINT) 

  SELECT TS_ID.NEXTVAL, TI.TI_ID, 0, SYSDATE FROM TS_INVEST TI

  WHERE P_ID  = V_P_ID AND DATEPOINT2 > SYSDATE AND FINISHED = 0

  AND NOT EXISTS (SELECT 1 FROM TS_CREDIT_END TCE WHERE TCE.TI_ID = TI.TI_ID);



  -- UPDATE DATEPOINT2 = SYSDATE  FINSHED = 1

  UPDATE TS_INVEST

  SET DATEPOINT2 = SYSDATE, 

  FINISHED = 1

  WHERE P_ID     = V_P_ID AND DATEPOINT2 > SYSDATE AND FINISHED = 0;

  

END ADJUST_PRJ_BONUS;
/

REM Create procedure BA_BORROW_ORG_W_L_DEL
CREATE OR REPLACE PROCEDURE "BA_BORROW_ORG_W_L_DEL"(

    V_RET OUT SYS_REFCURSOR,

    V_BOW_ID IN NUMBER )

IS

BEGIN

  --DELETE THE BA_BORROW_ORG_WHITE_LIST DATA BY BOW_ID.

  DELETE

  FROM BA_BORROW_ORG_WHITE_LIST

  WHERE BOW_ID = V_BOW_ID;

  OPEN V_RET FOR SELECT V_BOW_ID FROM DUAL;

  IF SQL%NOTFOUND THEN

    OPEN V_RET FOR SELECT 0 FROM DUAL;

  END IF;

END BA_BORROW_ORG_W_L_DEL;

/

REM Create procedure BA_BORROW_ORG_W_L_IN_OR_UP
CREATE OR REPLACE PROCEDURE "BA_BORROW_ORG_W_L_IN_OR_UP"(

    V_RET OUT SYS_REFCURSOR,

    V_BBO_ID    IN NUMBER,

    V_ID_CARD   IN VARCHAR2,

    V_REAL_NAME IN VARCHAR2,

    V_MOBILE    IN VARCHAR2,

    V_CREATOR   IN VARCHAR2,

    V_STATUS    IN NUMBER,

    V_UPDATER   IN VARCHAR2,

    V_BOW_ID    IN OUT NUMBER )

AS

BEGIN

  UPDATE BA_BORROW_ORG_WHITE_LIST

  SET BBO_ID    = V_BBO_ID,

    ID_CARD     = V_ID_CARD,

    REAL_NAME   = V_REAL_NAME,

    MOBILE      = V_MOBILE,

    STATUS      = V_STATUS,

    UPDATER     = V_UPDATER,

    UPDATE_TIME = SYSDATE

  WHERE BOW_ID  = V_BOW_ID;

  IF SQL%NOTFOUND THEN

    INSERT

    INTO BA_BORROW_ORG_WHITE_LIST

      (

        BOW_ID,

        BBO_ID,

        ID_CARD,

        REAL_NAME,

        MOBILE,

        CREATOR,

        CREATE_TIME,

        STATUS,

        UPDATER,

        UPDATE_TIME

      )

      VALUES

      (

        BA_ID.NEXTVAL,

        V_BBO_ID,

        V_ID_CARD,

        V_REAL_NAME,

        V_MOBILE,

        V_CREATOR,

        SYSDATE,

        V_STATUS,

        V_UPDATER,

        SYSDATE

      );

    SELECT BA_ID.CURRVAL INTO V_BOW_ID FROM DUAL;

  END IF;

  --QUERY THE INSERT OR UPDATE DATA.

  OPEN V_RET FOR SELECT BOW_ID,

  BBO_ID,

  ID_CARD,

  REAL_NAME,

  MOBILE,

  CREATOR,

  CREATE_TIME,

  STATUS,

  UPDATER,

  UPDATE_TIME FROM BA_BORROW_ORG_WHITE_LIST WHERE BOW_ID =V_BOW_ID;

END BA_BORROW_ORG_W_L_IN_OR_UP;
/

REM Create procedure BA_BORROW_ORG_W_L_QUERY_BY_ID
CREATE OR REPLACE PROCEDURE "BA_BORROW_ORG_W_L_QUERY_BY_ID"

(

  V_RET OUT SYS_REFCURSOR,

  V_BOW_ID IN NUMBER

) AS



BEGIN



  --SEARCH AND RETURN THE BA_BORROW_ORG ITEM WHICH BOW_ID IS V_BOW_ID.

  OPEN V_RET FOR

  SELECT BBOW.BOW_ID, AUR.LOGIN_NAME, BBOW.REAL_NAME, AUR.MOBILE REG_MOBILE,

			         BBOW.MOBILE IMPORT_MOBILE, BBOW.ID_CARD, BBOW.STATUS, BBOW.BBO_ID BBO_ID

				     FROM BA_BORROW_ORG_WHITE_LIST BBOW

			         LEFT JOIN ACC_PERSON_INFO AUI ON AUI.ID_CARD = BBOW.ID_CARD

			         LEFT JOIN ACC_USER_REG AUR ON AUR.AU_ID = AUI.AU_ID

			 	     WHERE BBOW.BOW_ID = V_BOW_ID;



END BA_BORROW_ORG_W_L_QUERY_BY_ID;

/

REM Create procedure BA_BORROW_ORG_W_L_QUERY_LIST
CREATE OR REPLACE PROCEDURE "BA_BORROW_ORG_W_L_QUERY_LIST"(

    V_RET OUT SYS_REFCURSOR,

    V_BBO_ID     IN NUMBER,

    V_SEARCH_KEY IN VARCHAR2 )

AS

  V_SQL    VARCHAR2(30000 CHAR);

  V_CUR_ID NUMBER;

  V_RESULT NUMBER;

BEGIN

  V_SQL:='SELECT BBOW.BOW_ID, AUR.LOGIN_NAME, BBOW.REAL_NAME, AUR.MOBILE REG_MOBILE,

BBOW.MOBILE IMPORT_MOBILE, BBOW.ID_CARD, BBOW.STATUS, BBOW.BBO_ID

FROM BA_BORROW_ORG_WHITE_LIST BBOW

LEFT JOIN ACC_PERSON_INFO AUI ON AUI.ID_CARD = BBOW.ID_CARD

LEFT JOIN ACC_USER_REG AUR ON AUR.AU_ID = AUI.AU_ID

WHERE BBOW.BBO_ID = :V_BBO_ID ';

  --构建过滤条件，参数为空则取消该过滤条件

  IF V_SEARCH_KEY IS NOT NULL THEN

    V_SQL         := V_SQL||' AND (AUR.LOGIN_NAME LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_SEARCH_KEY||'||CHR(39)||'%'||CHR(39)||')

OR BBOW.REAL_NAME LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_SEARCH_KEY||'||CHR(39)||'%'||CHR(39)||')

OR BBOW.ID_CARD = :V_SEARCH_KEY

OR BBOW.MOBILE = :V_SEARCH_KEY

OR AUR.MOBILE = :V_SEARCH_KEY) ';

  END IF;

  V_SQL    := V_SQL||' ORDER BY BOW_ID';

  V_CUR_ID := DBMS_SQL.OPEN_CURSOR;

  DBMS_SQL.PARSE(V_CUR_ID, V_SQL, DBMS_SQL.NATIVE);

  --绑定参数

  DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_BBO_ID',V_BBO_ID);

  IF V_SEARCH_KEY IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_SEARCH_KEY',V_SEARCH_KEY);

  END IF;

  V_RESULT := DBMS_SQL.EXECUTE(V_CUR_ID);

  --转为可返回的cursor 返回结果

  V_RET := DBMS_SQL.TO_REFCURSOR(V_CUR_ID);

  IF DBMS_SQL.IS_OPEN(V_CUR_ID) THEN

    SYS.DBMS_SQL.CLOSE_CURSOR(V_CUR_ID);

  END IF;

END BA_BORROW_ORG_W_L_QUERY_LIST;
/

REM Create procedure BA_CTOR_ORG_DEL
CREATE OR REPLACE PROCEDURE "BA_CTOR_ORG_DEL"(

    V_RET OUT SYS_REFCURSOR,

    V_BCO_ID IN NUMBER )

IS

BEGIN

  --DELETE THE BA_CTOR_ORG DATA BY BCO_ID.

  DELETE

  FROM BA_CTOR_ORG

  WHERE BCO_ID = V_BCO_ID;

  OPEN V_RET FOR SELECT V_BCO_ID FROM DUAL;

  IF SQL%NOTFOUND THEN

    OPEN V_RET FOR SELECT 0 FROM DUAL;

  END IF;

END BA_CTOR_ORG_DEL;
/

REM Create procedure BA_CTOR_ORG_INSERT_OR_UPDATE
CREATE OR REPLACE PROCEDURE       "BA_CTOR_ORG_INSERT_OR_UPDATE" (

    V_RET OUT SYS_REFCURSOR,

    V_NAME               IN VARCHAR2,

    V_ENT_NATURE         IN VARCHAR2,

    V_REG_FUNDS          IN NUMBER,

    V_INTRO              IN VARCHAR2,

    V_CREATOR            IN VARCHAR2,

    V_UPDATER            IN VARCHAR2,

    V_QUALIFICATION      IN VARCHAR2,

    V_SHOW_NAME          IN VARCHAR2,

    V_ENT_STRENGTH       IN VARCHAR2,

    V_ENT_QUALITY        IN VARCHAR2,

    V_SHOW_REG_FUNDS     IN VARCHAR2,

    V_NATION_PRIZE_COUNT IN NUMBER,

    V_PROVIN_PRIZE_COUNT IN NUMBER,

    V_REG_YEARS          IN NUMBER,

    V_LASTED_AREA        IN NUMBER ,

    V_LASTED_OUTPUT      IN NUMBER,

    V_SHOW_REG_YEARS     IN VARCHAR2,

    V_REGISTERED_DATE    IN DATE,

    V_BCO_ID             IN OUT NUMBER )

AS

BEGIN

  UPDATE BA_CTOR_ORG

  SET NAME             = V_NAME,

    ENT_NATURE         = V_ENT_NATURE,

    REG_FUNDS          = V_REG_FUNDS,

    INTRO              = V_INTRO,

    UPDATER            = V_UPDATER,

    UPDATE_TIME        = SYSDATE,

    QUALIFICATION      = V_QUALIFICATION,

    SHOW_NAME          = V_SHOW_NAME,

    ENT_STRENGTH       = V_ENT_STRENGTH,

    ENT_QUALITY        = V_ENT_QUALITY,

    SHOW_REG_FUNDS     = V_SHOW_REG_FUNDS,

    NATION_PRIZE_COUNT = V_NATION_PRIZE_COUNT,

    PROVIN_PRIZE_COUNT = V_PROVIN_PRIZE_COUNT,

    REG_YEARS          = V_REG_YEARS,

    LASTED_AREA        = V_LASTED_AREA,

    LASTED_OUTPUT      = V_LASTED_OUTPUT,

    SHOW_REG_YEARS     = V_SHOW_REG_YEARS,

    REGISTERED_DATE    = V_REGISTERED_DATE

  WHERE BCO_ID         = V_BCO_ID;

  IF SQL%NOTFOUND THEN

    INSERT

    INTO BA_CTOR_ORG

      (

        BCO_ID,

        NAME,

        ENT_NATURE,

        REG_FUNDS,

        INTRO,

        CREATOR,

        CREATE_TIME,

        UPDATER,

        UPDATE_TIME,

        QUALIFICATION,

        SHOW_NAME,

        ENT_STRENGTH,

        ENT_QUALITY,

        SHOW_REG_FUNDS,

        NATION_PRIZE_COUNT,

        PROVIN_PRIZE_COUNT,

        REG_YEARS,

        LASTED_AREA,

        LASTED_OUTPUT,

        SHOW_REG_YEARS,

        REGISTERED_DATE

      )

      VALUES

      (

        BA_ID.NEXTVAL,

        V_NAME,

        V_ENT_NATURE,

        V_REG_FUNDS,

        V_INTRO,

        V_CREATOR,

        SYSDATE,

        V_UPDATER,

        SYSDATE,

        V_QUALIFICATION,

        V_SHOW_NAME,

        V_ENT_STRENGTH,

        V_ENT_QUALITY,

        V_SHOW_REG_FUNDS,

        V_NATION_PRIZE_COUNT,

        V_PROVIN_PRIZE_COUNT,

        V_REG_YEARS,

        V_LASTED_AREA,

        V_LASTED_OUTPUT,

        V_SHOW_REG_YEARS,

        V_REGISTERED_DATE

      );



      SELECT BA_ID.CURRVAL INTO V_BCO_ID FROM DUAL;

  END IF;

  --QUERY THE INSERT OR UPDATE DATA.

  OPEN V_RET FOR SELECT BCO_ID,

  NAME,

  ENT_NATURE,

  INTRO,

  REG_FUNDS,

  CREATOR,

  CREATE_TIME,

  UPDATER,

  UPDATE_TIME,

  QUALIFICATION,

  SHOW_NAME,

  ENT_STRENGTH,

  ENT_QUALITY,

  SHOW_REG_FUNDS,

  NATION_PRIZE_COUNT,

  PROVIN_PRIZE_COUNT,

  REG_YEARS,

  LASTED_AREA,

  LASTED_OUTPUT,

  SHOW_REG_YEARS,

  REGISTERED_DATE FROM BA_CTOR_ORG WHERE BCO_ID = V_BCO_ID;

END BA_CTOR_ORG_INSERT_OR_UPDATE;
/

REM Create procedure BA_CTOR_ORG_QUERY_BY_ID
CREATE OR REPLACE PROCEDURE       "BA_CTOR_ORG_QUERY_BY_ID"

(

  V_RET OUT SYS_REFCURSOR,

  V_BCO_ID IN NUMBER

) AS



BEGIN



  --SEARCH AND RETURN THE BA_CTOR_ORG ITEM WHICH BCO_ID IS V_BCO_ID.

  OPEN V_RET FOR

  SELECT BCO_ID,NAME,ENT_NATURE,INTRO,REG_FUNDS,CREATOR,CREATE_TIME,UPDATER,UPDATE_TIME,QUALIFICATION,SHOW_NAME,ENT_STRENGTH,ENT_QUALITY,

          SHOW_REG_FUNDS,NATION_PRIZE_COUNT,PROVIN_PRIZE_COUNT,REG_YEARS,LASTED_AREA,LASTED_OUTPUT,SHOW_REG_YEARS,REGISTERED_DATE

  FROM BA_CTOR_ORG

  WHERE BCO_ID = V_BCO_ID;



END BA_CTOR_ORG_QUERY_BY_ID;
/

REM Create procedure BA_CTOR_ORG_QUERY_LIST
CREATE OR REPLACE PROCEDURE "BA_CTOR_ORG_QUERY_LIST"(

    V_RET OUT SYS_REFCURSOR,

    V_START_TIME IN DATE,

    V_END_TIME   IN DATE,

    V_KEY        IN VARCHAR2 )

AS

  V_SQL    VARCHAR2(30000 CHAR);

  V_CUR_ID NUMBER;

  V_RESULT NUMBER;

BEGIN

  V_SQL:='SELECT BCO_ID,NAME,ENT_NATURE,INTRO,REG_FUNDS,CREATOR,CREATE_TIME,UPDATER,UPDATE_TIME,QUALIFICATION,SHOW_NAME,ENT_STRENGTH,ENT_QUALITY,

SHOW_REG_FUNDS,NATION_PRIZE_COUNT,PROVIN_PRIZE_COUNT,REG_YEARS,LASTED_AREA,LASTED_OUTPUT,SHOW_REG_YEARS,REGISTERED_DATE

FROM BA_CTOR_ORG

WHERE 1=1';

  --构建过滤条件，参数为空则取消该过滤条件

  IF V_START_TIME IS NOT NULL THEN

    V_SQL         := V_SQL||' AND CREATE_TIME >= :V_START_TIME ';

  END IF;

  IF V_END_TIME IS NOT NULL THEN

    V_SQL       := V_SQL||' AND CREATE_TIME <= :V_END_TIME ';

  END IF;

  IF V_KEY IS NOT NULL THEN

    V_SQL  := V_SQL||' AND (NAME LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_KEY||'||CHR(39)||'%'||CHR(39)||')

OR CREATOR LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_KEY||'||CHR(39)||'%'||CHR(39)||')

OR UPDATER LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_KEY||'||CHR(39)||'%'||CHR(39)||')) ';

  END IF;

  V_SQL    := V_SQL||' ORDER BY BCO_ID';

  V_CUR_ID := DBMS_SQL.OPEN_CURSOR;

  DBMS_SQL.PARSE(V_CUR_ID, V_SQL, DBMS_SQL.NATIVE);

  --绑定参数

  IF V_START_TIME IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_START_TIME',V_START_TIME);

  END IF;

  IF V_END_TIME IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_END_TIME',V_END_TIME);

  END IF;

  IF V_KEY IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_KEY',V_KEY);

  END IF;

  V_RESULT := DBMS_SQL.EXECUTE(V_CUR_ID);

  --转为可返回的cursor 返回结果

  V_RET := DBMS_SQL.TO_REFCURSOR(V_CUR_ID);

  IF DBMS_SQL.IS_OPEN(V_CUR_ID) THEN

    SYS.DBMS_SQL.CLOSE_CURSOR(V_CUR_ID);

  END IF;

END BA_CTOR_ORG_QUERY_LIST;
/

REM Create procedure BA_GUARANTEE_ORG_DEL
CREATE OR REPLACE PROCEDURE "BA_GUARANTEE_ORG_DEL"(

    V_RET OUT SYS_REFCURSOR,

    V_BGO_ID IN NUMBER )

IS

BEGIN

  --DELETE THE BA_GUARANTEE_ORG DATA BY BGO_ID.

  DELETE

  FROM BA_GUARANTEE_ORG

  WHERE BGO_ID = V_BGO_ID;

  OPEN V_RET FOR SELECT V_BGO_ID FROM DUAL;

  IF SQL%NOTFOUND THEN

    OPEN V_RET FOR SELECT 0 FROM DUAL;

  END IF;

END BA_GUARANTEE_ORG_DEL;
/

REM Create procedure BA_GUARANTEE_ORG_IN_OR_UP
CREATE OR REPLACE PROCEDURE       "BA_GUARANTEE_ORG_IN_OR_UP" (

    V_RET OUT SYS_REFCURSOR,

    V_NAME                    IN VARCHAR2,

    V_REG_FUNDS               IN NUMBER,

    V_INTRO                   IN VARCHAR2,

    V_CREATOR                 IN VARCHAR2,

    V_UPDATER                 IN VARCHAR2,

    V_REG_ADDRESS             IN VARCHAR2,

    V_POSTCODE                IN VARCHAR2,

    V_LINKMAN                 IN VARCHAR2,

    V_MOBILE                  IN VARCHAR2,

    V_RANKING                 IN NUMBER,

    V_GET_PRIZE               IN VARCHAR2,

    V_ORG_WEB_SITE            IN VARCHAR2,

    V_SHOW_NAME               IN VARCHAR2,

    V_REGISTERED_DATE         IN DATE,

    V_QUALIFICATION           IN VARCHAR2,

    V_SHOW_REG_ADDRESS        IN VARCHAR2,

    V_LEGAL_ID_CARD           IN VARCHAR2,

    V_LEGAL_PERSON_NAME       IN VARCHAR2,

    V_LEGAL_PERSON_SHOW_NAME  IN VARCHAR2,

    V_REG_YEARS               IN NUMBER,

    V_SOCIAL_CREDIT_CODE      IN VARCHAR2,

    V_SHOW_SOCIAL_CREDIT_CODE IN VARCHAR2,

    V_BGO_ID                  IN OUT NUMBER )

AS

BEGIN

  UPDATE BA_GUARANTEE_ORG

  SET NAME                  = V_NAME,

    REG_FUNDS               = V_REG_FUNDS,

    INTRO                   = V_INTRO,

    UPDATER                 = V_UPDATER,

    UPDATE_TIME             = SYSDATE,

    REG_ADDRESS             = V_REG_ADDRESS,

    POSTCODE                = V_POSTCODE,

    LINKMAN                 = V_LINKMAN,

    MOBILE                  = V_MOBILE,

    RANKING                 = V_RANKING,

    GET_PRIZE               = V_GET_PRIZE,

    ORG_WEB_SITE            = V_ORG_WEB_SITE,

    SHOW_NAME               = V_SHOW_NAME,

    REGISTERED_DATE         = V_REGISTERED_DATE,

    QUALIFICATION           = V_QUALIFICATION,

    SHOW_REG_ADDRESS        = V_SHOW_REG_ADDRESS,

    LEGAL_ID_CARD           = V_LEGAL_ID_CARD,

    LEGAL_PERSON_NAME       = V_LEGAL_PERSON_NAME,

    LEGAL_PERSON_SHOW_NAME  = V_LEGAL_PERSON_SHOW_NAME,

    REG_YEARS               = V_REG_YEARS,

    SOCIAL_CREDIT_CODE      = V_SOCIAL_CREDIT_CODE,

    SHOW_SOCIAL_CREDIT_CODE = V_SHOW_SOCIAL_CREDIT_CODE

  WHERE BGO_ID              = V_BGO_ID;

  IF SQL%NOTFOUND THEN

    INSERT

    INTO BA_GUARANTEE_ORG

      (

        BGO_ID,

        NAME,

        REG_FUNDS,

        INTRO,

        CREATOR,

        CREATE_TIME,

        UPDATER,

        UPDATE_TIME,

        REG_ADDRESS,

        POSTCODE,

        LINKMAN,

        MOBILE,

        RANKING,

        GET_PRIZE,

        ORG_WEB_SITE,

        SHOW_NAME,

        REGISTERED_DATE,

        QUALIFICATION,

        SHOW_REG_ADDRESS,

        LEGAL_ID_CARD,

        LEGAL_PERSON_NAME,

        LEGAL_PERSON_SHOW_NAME,

        REG_YEARS,

        SOCIAL_CREDIT_CODE,

        SHOW_SOCIAL_CREDIT_CODE

      )

      VALUES

      (

        BA_ID.NEXTVAL,

        V_NAME,

        V_REG_FUNDS,

        V_INTRO,

        V_CREATOR,

        SYSDATE,

        V_UPDATER,

        SYSDATE,

        V_REG_ADDRESS,

        V_POSTCODE,

        V_LINKMAN,

        V_MOBILE,

        V_RANKING,

        V_GET_PRIZE,

        V_ORG_WEB_SITE,

        V_SHOW_NAME,

        V_REGISTERED_DATE,

        V_QUALIFICATION,

        V_SHOW_REG_ADDRESS,

        V_LEGAL_ID_CARD,

        V_LEGAL_PERSON_NAME,

        V_LEGAL_PERSON_SHOW_NAME,

        V_REG_YEARS,

        V_SOCIAL_CREDIT_CODE,

        V_SHOW_SOCIAL_CREDIT_CODE

      );

    SELECT BA_ID.CURRVAL INTO V_BGO_ID FROM DUAL;

  END IF;

  --QUERY THE INSERT OR UPDATE DATA.

  OPEN V_RET FOR SELECT BGO_ID,

  NAME,

  REG_FUNDS,

  INTRO,

  CREATOR,

  CREATE_TIME,

  UPDATER,

  UPDATE_TIME,

  REG_ADDRESS,

  POSTCODE,

  LINKMAN,

  MOBILE,

  RANKING,

  GET_PRIZE,

  ORG_WEB_SITE,

  SHOW_NAME,

  REGISTERED_DATE,

  QUALIFICATION,

  SHOW_REG_ADDRESS,

  LEGAL_ID_CARD,

  LEGAL_PERSON_NAME,

  LEGAL_PERSON_SHOW_NAME,

  REG_YEARS,

  SOCIAL_CREDIT_CODE,

  SHOW_SOCIAL_CREDIT_CODE FROM BA_GUARANTEE_ORG WHERE BGO_ID =V_BGO_ID;

END BA_GUARANTEE_ORG_IN_OR_UP;
/

REM Create procedure BA_GUARANTEE_ORG_QUERY_BY_ID
CREATE OR REPLACE PROCEDURE       "BA_GUARANTEE_ORG_QUERY_BY_ID"

(

  V_RET OUT SYS_REFCURSOR,

  V_BGO_ID IN NUMBER

) AS



BEGIN



  --SEARCH AND RETURN THE BA_GUARANTEE_ORG ITEM WHICH BGO_ID IS V_BBO_ID.

  OPEN V_RET FOR

  SELECT BGO_ID,NAME,REG_FUNDS,INTRO,CREATOR,CREATE_TIME,UPDATER,UPDATE_TIME,REG_ADDRESS,POSTCODE,LINKMAN,MOBILE,RANKING,GET_PRIZE,

          ORG_WEB_SITE,SHOW_NAME,REGISTERED_DATE,QUALIFICATION,SHOW_REG_ADDRESS,LEGAL_ID_CARD,LEGAL_PERSON_NAME,LEGAL_PERSON_SHOW_NAME,REG_YEARS,

          SOCIAL_CREDIT_CODE,SHOW_SOCIAL_CREDIT_CODE

  FROM BA_GUARANTEE_ORG

  WHERE BGO_ID = V_BGO_ID;



END BA_GUARANTEE_ORG_QUERY_BY_ID;
/

REM Create procedure BA_GUARANTEE_ORG_QUERY_LIST
CREATE OR REPLACE PROCEDURE "BA_GUARANTEE_ORG_QUERY_LIST"(

    V_RET OUT SYS_REFCURSOR,

    V_START_TIME IN DATE,

    V_END_TIME   IN DATE,

    V_NAME       IN VARCHAR2,

    V_CREATOR       IN VARCHAR2,

    V_UPDATER       IN VARCHAR2,

    V_LEGAL_PERSON_NAME       IN VARCHAR2,

    V_LINKMAN       IN VARCHAR2)

AS

  V_SQL     VARCHAR2(30000 CHAR);

  V_SUB_SQL VARCHAR2(30000 CHAR);

  V_CUR_ID NUMBER;

  V_RESULT NUMBER;

BEGIN

  V_SQL:='SELECT BGO_ID,NAME,REG_FUNDS,INTRO,CREATOR,CREATE_TIME,UPDATER,UPDATE_TIME,REG_ADDRESS,POSTCODE,LINKMAN,MOBILE,RANKING,GET_PRIZE,

ORG_WEB_SITE,SHOW_NAME,REGISTERED_DATE,QUALIFICATION,SHOW_REG_ADDRESS,LEGAL_ID_CARD,LEGAL_PERSON_NAME,LEGAL_PERSON_SHOW_NAME,REG_YEARS,

SOCIAL_CREDIT_CODE,SHOW_SOCIAL_CREDIT_CODE

FROM BA_GUARANTEE_ORG

WHERE 1=1';

  --构建过滤条件，参数为空则取消该过滤条件

  IF V_START_TIME IS NOT NULL THEN

    V_SQL         := V_SQL||' AND CREATE_TIME >= :V_START_TIME ';

  END IF;

  IF V_END_TIME IS NOT NULL THEN

    V_SQL       := V_SQL||' AND CREATE_TIME <= :V_END_TIME ';

  END IF;

  

  V_SUB_SQL := '1<>1';

  IF V_NAME IS NOT NULL THEN

    V_SUB_SQL  := V_SUB_SQL||' OR  NAME LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_NAME||'||CHR(39)||'%'||CHR(39)||')';

  END IF;

  IF V_CREATOR IS NOT NULL THEN

    V_SUB_SQL  := V_SUB_SQL||' OR CREATOR LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_CREATOR||'||CHR(39)||'%'||CHR(39)||')';

  END IF;

  IF V_UPDATER IS NOT NULL THEN

    V_SUB_SQL  := V_SUB_SQL||' OR UPDATER LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_UPDATER||'||CHR(39)||'%'||CHR(39)||')';

  END IF;

  IF V_LEGAL_PERSON_NAME IS NOT NULL THEN

    V_SUB_SQL  := V_SUB_SQL||' OR LEGAL_PERSON_NAME LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_LEGAL_PERSON_NAME||'||CHR(39)||'%'||CHR(39)||')';

  END IF;

  IF V_LINKMAN IS NOT NULL THEN

    V_SUB_SQL  := V_SUB_SQL||' OR LINKMAN LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_LINKMAN||'||CHR(39)||'%'||CHR(39)||')';

  END IF;

  

  IF V_SUB_SQL = '1<>1' THEN

    V_SQL    := V_SQL||' ORDER BY BGO_ID';

  ELSE 

    V_SQL    := V_SQL || 'AND(' || V_SUB_SQL || ') ORDER BY BGO_ID';

  END IF;

  V_CUR_ID := DBMS_SQL.OPEN_CURSOR;

  DBMS_SQL.PARSE(V_CUR_ID, V_SQL, DBMS_SQL.NATIVE);

  --绑定参数

  IF V_START_TIME IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_START_TIME',V_START_TIME);

  END IF;

  IF V_END_TIME IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_END_TIME',V_END_TIME);

  END IF;

  IF V_NAME IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_NAME',V_NAME);

  END IF;

  IF V_CREATOR IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_CREATOR',V_CREATOR) ;

  END IF;

  IF V_UPDATER IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_UPDATER',V_UPDATER);

  END IF;

  IF V_LEGAL_PERSON_NAME IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_LEGAL_PERSON_NAME',V_LEGAL_PERSON_NAME);

  END IF;

  IF V_LINKMAN IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_LINKMAN',V_LINKMAN);

  END IF;

  V_RESULT := DBMS_SQL.EXECUTE(V_CUR_ID);

  --转为可返回的cursor 返回结果

  V_RET := DBMS_SQL.TO_REFCURSOR(V_CUR_ID);

  IF DBMS_SQL.IS_OPEN(V_CUR_ID) THEN

    SYS.DBMS_SQL.CLOSE_CURSOR(V_CUR_ID);

  END IF;

END BA_GUARANTEE_ORG_QUERY_LIST;
/

REM Create procedure BA_GUARANTEE_PERS_DEL
CREATE OR REPLACE PROCEDURE "BA_GUARANTEE_PERS_DEL"(

    V_RET OUT SYS_REFCURSOR,

    V_BGP_ID IN NUMBER )

IS

BEGIN

  --DELETE THE BA_BORROW_ORG DATA BY BBO_ID.

  DELETE

  FROM BA_GUARANTEE_PERSON

  WHERE BGP_ID = V_BGP_ID;

  OPEN V_RET FOR SELECT V_BGP_ID FROM DUAL;

  IF SQL%NOTFOUND THEN

    OPEN V_RET FOR SELECT 0 FROM DUAL;

  END IF;

END BA_GUARANTEE_PERS_DEL;
/

REM Create procedure BA_GUARANTEE_PERS_INST_OR_UPDT
CREATE OR REPLACE PROCEDURE       "BA_GUARANTEE_PERS_INST_OR_UPDT" (

    V_RET OUT SYS_REFCURSOR,

    V_NAME         IN VARCHAR2,

    V_SHOW_NAME    IN VARCHAR2,

    V_AGE          IN NUMBER,

    V_SHOW_AGE     IN VARCHAR2,

    V_GENDER       IN VARCHAR2,

    V_MOBILE       IN VARCHAR2,

    V_ADDRESS      IN VARCHAR2,

    V_SHOW_ADDRESS IN VARCHAR2,

    V_INTRO        IN VARCHAR2,

    V_CREATOR      IN VARCHAR2,

    V_UPDATER      IN VARCHAR2,

    V_POSTCODE     IN VARCHAR2,

    V_ID_CARD      IN VARCHAR2,

    V_BGP_ID       IN OUT NUMBER )

AS

BEGIN

  UPDATE BA_GUARANTEE_PERSON

  SET NAME       = V_NAME,

    SHOW_NAME    = V_SHOW_NAME,

    AGE          = V_AGE,

    SHOW_AGE     = V_SHOW_AGE,

    GENDER       = V_GENDER,

    MOBILE       = V_MOBILE,

    ADDRESS      = V_ADDRESS,

    SHOW_ADDRESS = V_SHOW_ADDRESS,

    INTRO        = V_INTRO,

    UPDATER      = V_UPDATER,

    UPDATE_TIME  = SYSDATE,

    POSTCODE     = V_POSTCODE,

    ID_CARD      = V_ID_CARD

  WHERE BGP_ID   = V_BGP_ID;

  IF SQL%NOTFOUND THEN

    INSERT

    INTO BA_GUARANTEE_PERSON

      (

        BGP_ID,

        NAME,

        SHOW_NAME,

        AGE,

        SHOW_AGE,

        GENDER,

        MOBILE,

        ADDRESS,

        SHOW_ADDRESS,

        INTRO,

        CREATOR,

        CREATE_TIME,

        UPDATER,

        UPDATE_TIME,

        POSTCODE,

        ID_CARD

      )

      VALUES

      (

        BA_ID.NEXTVAL,

        V_NAME,

        V_SHOW_NAME,

        V_AGE,

        V_SHOW_AGE,

        V_GENDER,

        V_MOBILE,

        V_ADDRESS,

        V_SHOW_ADDRESS,

        V_INTRO,

        V_CREATOR,

        SYSDATE,

        V_UPDATER,

        SYSDATE,

        V_POSTCODE,

        V_ID_CARD

      );

    SELECT BA_ID.CURRVAL INTO V_BGP_ID FROM DUAL;

  END IF;

  --QUERY THE INSERT OR UPDATE DATA."

  OPEN V_RET FOR SELECT BGP_ID,

  NAME,

  SHOW_NAME,

  AGE,

  SHOW_AGE,

  GENDER,

  MOBILE,

  ADDRESS,

  SHOW_ADDRESS,

  INTRO,

  CREATOR,

  CREATE_TIME,

  UPDATER,

  UPDATE_TIME,

  POSTCODE,

  ID_CARD FROM BA_GUARANTEE_PERSON WHERE BGP_ID =V_BGP_ID;

END BA_GUARANTEE_PERS_INST_OR_UPDT;
/

REM Create procedure BA_GUARANTEE_PERS_QUERY_BY_ID
CREATE OR REPLACE PROCEDURE       "BA_GUARANTEE_PERS_QUERY_BY_ID"

(

  V_RET OUT SYS_REFCURSOR,

  V_BGP_ID IN	NUMBER

) AS



BEGIN



  --SEARCH AND RETURN THE BA_BORROW_ORG ITEM WHICH BBO_ID IS V_BBO_ID.

  OPEN V_RET FOR

  SELECT BGP_ID,NAME,SHOW_NAME,AGE,SHOW_AGE,GENDER,MOBILE,ADDRESS,SHOW_ADDRESS,INTRO,CREATOR,CREATE_TIME,UPDATER,UPDATE_TIME,POSTCODE,ID_CARD

  FROM BA_GUARANTEE_PERSON

  WHERE BGP_ID =V_BGP_ID;



END BA_GUARANTEE_PERS_QUERY_BY_ID;
/

REM Create procedure BA_GUARANTEE_PERS_QUERY_LIST
CREATE OR REPLACE PROCEDURE "BA_GUARANTEE_PERS_QUERY_LIST"(

    V_RET OUT SYS_REFCURSOR,

    V_START_TIME IN DATE,

    V_END_TIME   IN DATE,

    V_MOBILE IN VARCHAR2,

    V_NAME IN VARCHAR2,

    V_CREATOR IN VARCHAR2,

    V_UPDATER IN VARCHAR2)

AS

  V_SQL     VARCHAR2(30000 CHAR);

  V_SUB_SQL VARCHAR2(30000 CHAR);

  V_CUR_ID NUMBER;

  V_RESULT NUMBER;

BEGIN

  V_SQL:='SELECT BGP_ID,NAME,SHOW_NAME,AGE,SHOW_AGE,GENDER,MOBILE,ADDRESS,SHOW_ADDRESS,INTRO,CREATOR,CREATE_TIME,UPDATER,UPDATE_TIME,POSTCODE,ID_CARD

FROM BA_GUARANTEE_PERSON

WHERE 1=1';

  --构建过滤条件，参数为空则取消该过滤条件

  IF V_START_TIME IS NOT NULL THEN

    V_SQL         := V_SQL||' AND CREATE_TIME >= :V_START_TIME ';

  END IF;

  IF V_END_TIME IS NOT NULL THEN

    V_SQL       := V_SQL||' AND CREATE_TIME <= :V_END_TIME ';

  END IF;

  

  V_SUB_SQL := '1<>1';

  IF V_MOBILE IS NOT NULL THEN

    V_SUB_SQL  := V_SUB_SQL||' OR MOBILE = :V_MOBILE ';

  END IF;

  IF V_NAME IS NOT NULL THEN

    V_SUB_SQL  := V_SUB_SQL||' OR NAME LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_NAME||'||CHR(39)||'%'||CHR(39)||')';

  END IF;

  IF V_CREATOR IS NOT NULL THEN

    V_SUB_SQL  := V_SUB_SQL||' OR CREATOR LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_CREATOR||'||CHR(39)||'%'||CHR(39)||')';

  END IF;

  IF V_UPDATER IS NOT NULL THEN

    V_SUB_SQL  := V_SUB_SQL||' OR UPDATER LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_UPDATER||'||CHR(39)||'%'||CHR(39)||') ';

  END IF;

  

  IF V_SUB_SQL = '1<>1' THEN

    V_SQL    := V_SQL || 'ORDER BY BGP_ID';

  ELSE

    V_SQL    := V_SQL || 'AND (' || V_SUB_SQL || ') ORDER BY BGP_ID';

  END IF;

  V_CUR_ID := DBMS_SQL.OPEN_CURSOR;

  DBMS_SQL.PARSE(V_CUR_ID, V_SQL, DBMS_SQL.NATIVE);

  --绑定参数

  IF V_START_TIME IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_START_TIME',V_START_TIME);

  END IF;

  IF V_END_TIME IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_END_TIME',V_END_TIME);

  END IF;

  IF V_MOBILE IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_MOBILE',V_MOBILE);

  END IF;

  IF V_NAME IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_NAME',V_NAME);

  END IF;

  IF V_CREATOR IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_CREATOR',V_CREATOR);

  END IF;

  IF V_UPDATER IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_UPDATER',V_UPDATER);

  END IF;

  V_RESULT := DBMS_SQL.EXECUTE(V_CUR_ID);

  --转为可返回的cursor 返回结果

  V_RET := DBMS_SQL.TO_REFCURSOR(V_CUR_ID);

  IF DBMS_SQL.IS_OPEN(V_CUR_ID) THEN

    SYS.DBMS_SQL.CLOSE_CURSOR(V_CUR_ID);

  END IF;

END BA_GUARANTEE_PERS_QUERY_LIST;
/

REM Create procedure BA_OWNER_DEL
CREATE OR REPLACE PROCEDURE "BA_OWNER_DEL"(

    V_RET OUT SYS_REFCURSOR,

    V_BO_ID IN NUMBER )

IS

BEGIN

  --DELETE THE BA_BORROW_ORG DATA BY BBO_ID.

  DELETE

  FROM BA_OWNER

  WHERE BO_ID = V_BO_ID;

  OPEN V_RET FOR SELECT V_BO_ID FROM DUAL;

  IF SQL%NOTFOUND THEN

    OPEN V_RET FOR SELECT 0 FROM DUAL;

  END IF;

END BA_OWNER_DEL;
/

REM Create procedure BA_OWNER_INSERT_OR_UPDATE
CREATE OR REPLACE PROCEDURE       "BA_OWNER_INSERT_OR_UPDATE" (

    V_RET OUT SYS_REFCURSOR,

    V_OWNER_NAME      IN VARCHAR2,

    V_OWNER_SHOW_NAME IN VARCHAR2,

    V_REG_YEARS       IN NUMBER,

    V_REG_FUNDS       IN NUMBER,

    V_SHOW_REG_FUNDS  IN VARCHAR2,

    V_ENT_INDUSTRY    IN VARCHAR2,

    V_INTRO           IN VARCHAR2,

    V_CREATOR         IN VARCHAR2,

    V_UPDATER         IN VARCHAR2,

    V_OWNER_NATURE    IN VARCHAR2,

    V_OWNER_STRENGTH  IN VARCHAR2,

    V_OWNER_QUALITY   IN VARCHAR2,

    V_REGISTERED_DATE IN DATE,

    V_BO_ID           IN OUT NUMBER )

AS

BEGIN

  UPDATE BA_OWNER

  SET OWNER_NAME    = V_OWNER_NAME,

    OWNER_SHOW_NAME = V_OWNER_SHOW_NAME,

    REG_YEARS       = V_REG_YEARS,

    REG_FUNDS       = V_REG_FUNDS,

    SHOW_REG_FUNDS  = V_SHOW_REG_FUNDS,

    ENT_INDUSTRY    = V_ENT_INDUSTRY,

    INTRO           = V_INTRO,

    UPDATER         = V_UPDATER,

    UPDATE_TIME     = SYSDATE,

    OWNER_NATURE    = V_OWNER_NATURE,

    OWNER_STRENGTH  = V_OWNER_STRENGTH,

    OWNER_QUALITY   = V_OWNER_QUALITY,

    REGISTERED_DATE = V_REGISTERED_DATE

  WHERE BO_ID       = V_BO_ID;

  IF SQL%NOTFOUND THEN

    INSERT

    INTO BA_OWNER

      (

        BO_ID,

        OWNER_NAME,

        OWNER_SHOW_NAME,

        REG_YEARS,

        REG_FUNDS,

        SHOW_REG_FUNDS,

        ENT_INDUSTRY,

        INTRO,

        CREATOR,

        CREATE_TIME,

        UPDATER,

        UPDATE_TIME,

        OWNER_NATURE,

        OWNER_STRENGTH,

        OWNER_QUALITY,

        REGISTERED_DATE

      )

      VALUES

      (

        BA_ID.NEXTVAL,

        V_OWNER_NAME,

        V_OWNER_SHOW_NAME,

        V_REG_YEARS,

        V_REG_FUNDS,

        V_SHOW_REG_FUNDS,

        V_ENT_INDUSTRY,

        V_INTRO,

        V_CREATOR,

        SYSDATE,

        V_UPDATER,

        SYSDATE,

        V_OWNER_NATURE,

        V_OWNER_STRENGTH,

        V_OWNER_QUALITY,

        V_REGISTERED_DATE

      );

    SELECT BA_ID.CURRVAL INTO V_BO_ID FROM DUAL;

  END IF;

  --QUERY THE INSERT OR UPDATE DATA.

  OPEN V_RET FOR SELECT BO_ID,

  OWNER_NAME,

  OWNER_SHOW_NAME,

  REG_YEARS,

  REG_FUNDS,

  SHOW_REG_FUNDS,

  ENT_INDUSTRY,

  INTRO,

  CREATOR,

  CREATE_TIME,

  UPDATER,

  UPDATE_TIME,

  OWNER_NATURE,

  OWNER_STRENGTH,

  OWNER_QUALITY,

  REGISTERED_DATE FROM BA_OWNER WHERE BO_ID =V_BO_ID;

END BA_OWNER_INSERT_OR_UPDATE;
/

REM Create procedure BA_OWNER_QUERY_BY_ID
CREATE OR REPLACE PROCEDURE       "BA_OWNER_QUERY_BY_ID"

(

  V_RET OUT SYS_REFCURSOR,

  V_BO_ID IN NUMBER

) AS



BEGIN



  --SEARCH AND RETURN THE BA_GUARANTEE_ORG ITEM WHICH BGO_ID IS V_BBO_ID.

  OPEN V_RET FOR

  SELECT BO_ID,OWNER_NAME,OWNER_SHOW_NAME,REG_YEARS,REG_FUNDS,SHOW_REG_FUNDS,ENT_INDUSTRY,INTRO,CREATOR,CREATE_TIME,UPDATER,UPDATE_TIME,

          OWNER_NATURE,OWNER_STRENGTH,OWNER_QUALITY,REGISTERED_DATE

  FROM BA_OWNER

  WHERE BO_ID =V_BO_ID;



END BA_OWNER_QUERY_BY_ID;
/

REM Create procedure BA_OWNER_QUERY_LIST
CREATE OR REPLACE PROCEDURE "BA_OWNER_QUERY_LIST"(

    V_RET OUT SYS_REFCURSOR,

    V_START_TIME IN DATE,

    V_END_TIME   IN DATE,

    V_KEY        IN VARCHAR2 )

AS

  V_SQL    VARCHAR2(30000 CHAR);

  V_CUR_ID NUMBER;

  V_RESULT NUMBER;

BEGIN

  V_SQL:='SELECT BO_ID,OWNER_NAME,OWNER_SHOW_NAME,REG_YEARS,REG_FUNDS,SHOW_REG_FUNDS,ENT_INDUSTRY,INTRO,CREATOR,CREATE_TIME,UPDATER,UPDATE_TIME,

OWNER_NATURE,OWNER_STRENGTH,OWNER_QUALITY,REGISTERED_DATE

FROM BA_OWNER

WHERE 1=1';

  --构建过滤条件，参数为空则取消该过滤条件

  IF V_START_TIME IS NOT NULL THEN

    V_SQL         := V_SQL||' AND CREATE_TIME >= :V_START_TIME ';

  END IF;

  IF V_END_TIME IS NOT NULL THEN

    V_SQL       := V_SQL||' AND CREATE_TIME <= :V_END_TIME ';

  END IF;

  IF V_KEY IS NOT NULL THEN

    V_SQL  := V_SQL||' AND (OWNER_NAME LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_KEY||'||CHR(39)||'%'||CHR(39)||')

OR ENT_INDUSTRY LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_KEY||'||CHR(39)||'%'||CHR(39)||')

OR OWNER_NATURE LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_KEY||'||CHR(39)||'%'||CHR(39)||')

OR CREATOR LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_KEY||'||CHR(39)||'%'||CHR(39)||')

OR UPDATER LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_KEY||'||CHR(39)||'%'||CHR(39)||')) ';

  END IF;

  V_SQL    := V_SQL||' ORDER BY BO_ID';

  V_CUR_ID := DBMS_SQL.OPEN_CURSOR;

  DBMS_SQL.PARSE(V_CUR_ID, V_SQL, DBMS_SQL.NATIVE);

  --绑定参数

  IF V_START_TIME IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_START_TIME',V_START_TIME);

  END IF;

  IF V_END_TIME IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_END_TIME',V_END_TIME);

  END IF;

  IF V_KEY IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_KEY',V_KEY);

  END IF;

  V_RESULT := DBMS_SQL.EXECUTE(V_CUR_ID);

  --转为可返回的cursor 返回结果

  V_RET := DBMS_SQL.TO_REFCURSOR(V_CUR_ID);

  IF DBMS_SQL.IS_OPEN(V_CUR_ID) THEN

    SYS.DBMS_SQL.CLOSE_CURSOR(V_CUR_ID);

  END IF;

END BA_OWNER_QUERY_LIST;
/

REM Create procedure BA_PRJ_ENGINEER_DEL
CREATE OR REPLACE PROCEDURE "BA_PRJ_ENGINEER_DEL"(

    V_RET OUT SYS_REFCURSOR,

    V_BPE_ID IN NUMBER )

IS

BEGIN

  --DELETE THE BA_PRJ_ENGINEER DATA BY BPE_ID.

  DELETE

  FROM BA_PRJ_ENGINEER

  WHERE BPE_ID = V_BPE_ID;

  OPEN V_RET FOR SELECT V_BPE_ID FROM DUAL;

  IF SQL%NOTFOUND THEN

    OPEN V_RET FOR SELECT 0 FROM DUAL;

  END IF;

END BA_PRJ_ENGINEER_DEL;
/

REM Create procedure BA_PRJ_ENGINEER_IN_OR_UP
CREATE OR REPLACE PROCEDURE       "BA_PRJ_ENGINEER_IN_OR_UP" (

    V_RET OUT SYS_REFCURSOR,

    V_NAME             IN VARCHAR2,

    V_ADDRESS          IN VARCHAR2,

    V_PRJ_START_TIME   IN DATE,

    V_PRJ_END_TIME     IN DATE,

    V_ENG_TYPE         IN VARCHAR2,

    V_AREA             IN NUMBER,

    V_ALL_ORG          IN VARCHAR2,

    V_DESIGN_ORG       IN VARCHAR2,

    V_MGR_ORG          IN VARCHAR2,

    V_CREATOR          IN VARCHAR2,

    V_UPDATER          IN VARCHAR2,

    V_PRO_INTRO        IN VARCHAR2,

    V_ENG_SHOW_NAME    IN VARCHAR2,

    V_ENG_SHOW_ADDRESS IN VARCHAR2,

    V_SHOW_MGR_ORG     IN VARCHAR2,

    V_SHOW_DESIGN_ORG  IN VARCHAR2,

    V_SHOW_AREA        IN VARCHAR2,

    V_DESIGN_ORG_LEVEL IN VARCHAR2,

    V_MGR_ORG_LEVEL    IN VARCHAR2,

    V_SHOW_ALL_ORG     IN VARCHAR2,

    V_MGR_REAL_NAME    IN VARCHAR2,

    V_MGR_SHOW_NAME    IN VARCHAR2,

    V_QUALIFICATION    IN VARCHAR2,

    V_MGR_INTRO        IN VARCHAR2,

    V_MGR_GENDER       IN VARCHAR2,

    V_MGR_AGE          IN NUMBER,

    V_MGR_SHOW_AGE     IN VARCHAR2,

    V_BPE_ID           IN OUT NUMBER )

AS



BEGIN

  UPDATE BA_PRJ_ENGINEER

  SET NAME           = V_NAME,

    ADDRESS          = V_ADDRESS,

    PRJ_START_TIME   = V_PRJ_START_TIME,

    PRJ_END_TIME     = V_PRJ_END_TIME,

    ENG_TYPE         = V_ENG_TYPE,

    AREA             = V_AREA,

    UPDATE_TIME      = SYSDATE,

    ALL_ORG          = V_ALL_ORG,

    DESIGN_ORG       = V_DESIGN_ORG,

    MGR_ORG          = V_MGR_ORG,

    UPDATER          = V_UPDATER,

    PRO_INTRO        = V_PRO_INTRO,

    ENG_SHOW_NAME    = V_ENG_SHOW_NAME,

    ENG_SHOW_ADDRESS = V_ENG_SHOW_ADDRESS,

    SHOW_MGR_ORG     = V_SHOW_MGR_ORG,

    SHOW_DESIGN_ORG  = V_SHOW_DESIGN_ORG,

    SHOW_AREA        = V_SHOW_AREA,

    DESIGN_ORG_LEVEL = V_DESIGN_ORG_LEVEL,

    MGR_ORG_LEVEL    = V_MGR_ORG_LEVEL,

    SHOW_ALL_ORG     = V_SHOW_ALL_ORG,

    MGR_REAL_NAME    = V_MGR_REAL_NAME,

    MGR_SHOW_NAME    = V_MGR_SHOW_NAME,

    QUALIFICATION    = V_QUALIFICATION,

    MGR_INTRO        = V_MGR_INTRO,

    MGR_GENDER       = V_MGR_GENDER,

    MGR_AGE          = V_MGR_AGE,

    MGR_SHOW_AGE     = V_MGR_SHOW_AGE

  WHERE BPE_ID       = V_BPE_ID;

  IF SQL%NOTFOUND THEN

    INSERT

    INTO BA_PRJ_ENGINEER

      (

        BPE_ID,

        NAME,

        ADDRESS,

        PRJ_START_TIME,

        PRJ_END_TIME,

        ENG_TYPE,

        AREA,

        UPDATE_TIME,

        ALL_ORG,

        DESIGN_ORG,

        MGR_ORG,

        CREATOR,

        CREATE_TIME,

        UPDATER,

        PRO_INTRO,

        ENG_SHOW_NAME,

        ENG_SHOW_ADDRESS,

        SHOW_MGR_ORG,

        SHOW_DESIGN_ORG,

        SHOW_AREA,

        DESIGN_ORG_LEVEL,

        MGR_ORG_LEVEL,

        SHOW_ALL_ORG,

        MGR_REAL_NAME,

        MGR_SHOW_NAME,

        QUALIFICATION,

        MGR_INTRO,

        MGR_GENDER,

        MGR_AGE,

        MGR_SHOW_AGE

      )

      VALUES

      (

        BA_ID.NEXTVAL,

        V_NAME,

        V_ADDRESS,

        V_PRJ_START_TIME,

        V_PRJ_END_TIME,

        V_ENG_TYPE,

        V_AREA,

        SYSDATE,

        V_ALL_ORG,

        V_DESIGN_ORG,

        V_MGR_ORG,

        V_CREATOR,

        SYSDATE,

        V_UPDATER,

        V_PRO_INTRO,

        V_ENG_SHOW_NAME,

        V_ENG_SHOW_ADDRESS,

        V_SHOW_MGR_ORG,

        V_SHOW_DESIGN_ORG,

        V_SHOW_AREA,

        V_DESIGN_ORG_LEVEL,

        V_MGR_ORG_LEVEL,

        V_SHOW_ALL_ORG,

        V_MGR_REAL_NAME,

        V_MGR_SHOW_NAME,

        V_QUALIFICATION,

        V_MGR_INTRO,

        V_MGR_GENDER,

        V_MGR_AGE,

        V_MGR_SHOW_AGE

      );

    SELECT BA_ID.CURRVAL INTO V_BPE_ID FROM DUAL;

  END IF;

  --QUERY THE INSERT OR UPDATE DATA.

  OPEN V_RET FOR SELECT BPE_ID,

  NAME,

  ADDRESS,

  PRJ_START_TIME,

  PRJ_END_TIME,

  ENG_TYPE,

  AREA,

  UPDATE_TIME,

  ALL_ORG,

  DESIGN_ORG,

  MGR_ORG,

  CREATOR,

  CREATE_TIME,

  UPDATER,

  PRO_INTRO,

  ENG_SHOW_NAME,

  ENG_SHOW_ADDRESS,

  SHOW_MGR_ORG,

  SHOW_DESIGN_ORG,

  SHOW_AREA,

  DESIGN_ORG_LEVEL,

  MGR_ORG_LEVEL,

  SHOW_ALL_ORG,

  MGR_REAL_NAME,

  MGR_SHOW_NAME,

  QUALIFICATION,

  MGR_INTRO,

  MGR_GENDER,

  MGR_AGE,

  MGR_SHOW_AGE FROM BA_PRJ_ENGINEER WHERE BPE_ID =V_BPE_ID;

END BA_PRJ_ENGINEER_IN_OR_UP;
/

REM Create procedure BA_PRJ_ENGINEER_QUERY_BY_ID
CREATE OR REPLACE PROCEDURE       "BA_PRJ_ENGINEER_QUERY_BY_ID"

(

  V_RET OUT SYS_REFCURSOR,

  V_BPE_ID IN NUMBER

) AS

BEGIN



  --SEARCH AND RETURN THE BA_BORROW_ORG ITEM WHICH BBO_ID IS V_BBO_ID.

  OPEN V_RET FOR

  SELECT BPE_ID,NAME,ADDRESS,PRJ_START_TIME,PRJ_END_TIME,ENG_TYPE,AREA,UPDATE_TIME,ALL_ORG,DESIGN_ORG,MGR_ORG,CREATOR,CREATE_TIME,UPDATER,PRO_INTRO,

          ENG_SHOW_NAME,ENG_SHOW_ADDRESS,SHOW_MGR_ORG,SHOW_DESIGN_ORG,SHOW_AREA,DESIGN_ORG_LEVEL,MGR_ORG_LEVEL,SHOW_ALL_ORG,MGR_REAL_NAME,MGR_SHOW_NAME,QUALIFICATION,

          MGR_INTRO,MGR_GENDER,MGR_AGE,MGR_SHOW_AGE

  FROM BA_PRJ_ENGINEER

  WHERE BPE_ID = V_BPE_ID;



END BA_PRJ_ENGINEER_QUERY_BY_ID;
/

REM Create procedure BA_PRJ_ENGINEER_QUERY_LIST
CREATE OR REPLACE PROCEDURE "BA_PRJ_ENGINEER_QUERY_LIST"(

    V_RET OUT SYS_REFCURSOR,

    V_START_TIME IN DATE,

    V_END_TIME   IN DATE,

    V_KEY        IN VARCHAR2 )

AS

  V_SQL    VARCHAR2(30000 CHAR);

  V_CUR_ID NUMBER;

  V_RESULT NUMBER;

BEGIN

  V_SQL:='SELECT BPE_ID,NAME,ADDRESS,PRJ_START_TIME,PRJ_END_TIME,ENG_TYPE,AREA,UPDATE_TIME,ALL_ORG,DESIGN_ORG,MGR_ORG,CREATOR,CREATE_TIME,UPDATER,PRO_INTRO,

ENG_SHOW_NAME,ENG_SHOW_ADDRESS,SHOW_MGR_ORG,SHOW_DESIGN_ORG,SHOW_AREA,DESIGN_ORG_LEVEL,MGR_ORG_LEVEL,SHOW_ALL_ORG,MGR_REAL_NAME,MGR_SHOW_NAME,QUALIFICATION,

MGR_INTRO,MGR_GENDER,MGR_AGE,MGR_SHOW_AGE

FROM BA_PRJ_ENGINEER

WHERE 1=1';

  --构建过滤条件，参数为空则取消该过滤条件

  IF V_START_TIME IS NOT NULL THEN

    V_SQL         := V_SQL||' AND CREATE_TIME >= :V_START_TIME ';

  END IF;

  IF V_END_TIME IS NOT NULL THEN

    V_SQL       := V_SQL||' AND CREATE_TIME <= :V_END_TIME ';

  END IF;

  IF V_KEY IS NOT NULL THEN

    V_SQL  := V_SQL||' AND (NAME LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_KEY||'||CHR(39)||'%'||CHR(39)||')

OR ENG_TYPE LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_KEY||'||CHR(39)||'%'||CHR(39)||')

OR CREATOR LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_KEY||'||CHR(39)||'%'||CHR(39)||')

OR UPDATER LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_KEY||'||CHR(39)||'%'||CHR(39)||')) ';

  END IF;

  V_SQL    := V_SQL||' ORDER BY BPE_ID ASC';

  V_CUR_ID := DBMS_SQL.OPEN_CURSOR;

  DBMS_SQL.PARSE(V_CUR_ID, V_SQL, DBMS_SQL.NATIVE);

  --绑定参数

  IF V_START_TIME IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_START_TIME',V_START_TIME);

  END IF;

  IF V_END_TIME IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_END_TIME',V_END_TIME);

  END IF;

  IF V_KEY IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_KEY',V_KEY);

  END IF;

  V_RESULT := DBMS_SQL.EXECUTE(V_CUR_ID);

  --转为可返回的cursor 返回结果

  V_RET := DBMS_SQL.TO_REFCURSOR(V_CUR_ID);

  IF DBMS_SQL.IS_OPEN(V_CUR_ID) THEN

    SYS.DBMS_SQL.CLOSE_CURSOR(V_CUR_ID);

  END IF;

END BA_PRJ_ENGINEER_QUERY_LIST;
/

REM Create procedure BA_PRJ_MGR_ORG_DEL
CREATE OR REPLACE PROCEDURE "BA_PRJ_MGR_ORG_DEL"(

    V_RET OUT SYS_REFCURSOR,

    V_BPMO_ID IN NUMBER )

IS

BEGIN

  --DELETE THE BA_BORROW_ORG DATA BY BBO_ID.

  DELETE

  FROM BA_PRJ_MGR_ORG

  WHERE BPMO_ID = V_BPMO_ID;

  OPEN V_RET FOR SELECT V_BPMO_ID FROM DUAL;

  IF SQL%NOTFOUND THEN

    OPEN V_RET FOR SELECT 0 FROM DUAL;

  END IF;

END BA_PRJ_MGR_ORG_DEL;
/

REM Create procedure BA_PRJ_MGR_ORG_IN_OR_UP
CREATE OR REPLACE PROCEDURE       "BA_PRJ_MGR_ORG_IN_OR_UP" (

    V_RET OUT SYS_REFCURSOR,

    V_ORG_NAME                IN VARCHAR2,

    V_SHOW_ORG_NAME           IN VARCHAR2,

    V_REGISTERED_FUND         IN NUMBER,

    V_REGISTERED_SHOW_FUND    IN VARCHAR2,

    V_REGISTERED_DATE         IN DATE,

    V_LEGAL_ID_CARD           IN VARCHAR2,

    V_LEGAL_PERSON_NAME       IN VARCHAR2,

    V_LEGAL_PERSON_SHOW_NAME  IN VARCHAR2,

    V_MOBILE                  IN VARCHAR2,

    V_EMAIL                   IN VARCHAR2,

    V_ADDRESS                 IN VARCHAR2,

    V_CREATOR                 IN VARCHAR2,

    V_UPDATER                 IN VARCHAR2,

    V_INTRO                   IN VARCHAR2,

    V_SHOW_ADDRESS            IN VARCHAR2,

    V_FAX                     IN VARCHAR2,

    V_WCHAT                   IN VARCHAR2,

    V_LINKMAN_NAME            IN VARCHAR2,

    V_LINKMAN_ID_CARD         IN VARCHAR2,

    V_LINKMAN_MOBILE          IN VARCHAR2,

    V_LINKMAN_FAX             IN VARCHAR2,

    V_LINKMAN_EMAIL           IN VARCHAR2,

    V_LINKMAN_WCHAT           IN VARCHAR2,

    V_LINKMAN_ADDRESS         IN VARCHAR2,

    V_LINKMAN_SHOW_ADDRESS    IN VARCHAR2,

    V_LINKMAN_SHOW_NAME       IN VARCHAR2,

    V_SOCIAL_CREDIT_CODE      IN VARCHAR2,

    V_SHOW_SOCIAL_CREDIT_CODE IN VARCHAR2,

    V_INDUSTRY                IN VARCHAR2,

    V_WORK_ADDRESS            IN VARCHAR2,

    V_SHOW_WORK_ADDRESS       IN VARCHAR2,

    V_SHAREHOLDER_INFO        IN VARCHAR2,

    V_SHOW_SHAREHOLDER_INFO   IN VARCHAR2,

    V_OPERATE_AREA            IN VARCHAR2,

    V_OTHER_INFO              IN VARCHAR2,

    V_BPMO_ID                 IN OUT NUMBER,

    V_LINKMAN_QQ              IN VARCHAR2,

    V_BORROWER_AREA           IN NUMBER,

    V_QQ                      IN VARCHAR2,

    V_LINKMAN_RELATION        IN VARCHAR2)

AS

BEGIN

  UPDATE BA_PRJ_MGR_ORG

  SET ORG_NAME              = V_ORG_NAME,

    SHOW_ORG_NAME           = V_SHOW_ORG_NAME,

    REGISTERED_FUND         = V_REGISTERED_FUND,

    REGISTERED_SHOW_FUND    = V_REGISTERED_SHOW_FUND,

    REGISTERED_DATE         = V_REGISTERED_DATE,

    LEGAL_ID_CARD           = V_LEGAL_ID_CARD,

    LEGAL_PERSON_NAME       = V_LEGAL_PERSON_NAME,

    LEGAL_PERSON_SHOW_NAME  = V_LEGAL_PERSON_SHOW_NAME,

    MOBILE                  = V_MOBILE,

    EMAIL                   = V_EMAIL,

    ADDRESS                 = V_ADDRESS,

    UPDATER                 = V_UPDATER,

    UPDATE_TIME             = SYSDATE,

    INTRO                   = V_INTRO,

    SHOW_ADDRESS            = V_SHOW_ADDRESS,

    FAX                     = V_FAX,

    WCHAT                   = V_WCHAT,

    LINKMAN_NAME            = V_LINKMAN_NAME,

    LINKMAN_ID_CARD         = V_LINKMAN_ID_CARD,

    LINKMAN_MOBILE          = V_LINKMAN_MOBILE,

    LINKMAN_FAX             = V_LINKMAN_FAX,

    LINKMAN_EMAIL           = V_LINKMAN_EMAIL,

    LINKMAN_WCHAT           = V_LINKMAN_WCHAT,

    LINKMAN_ADDRESS         = V_LINKMAN_ADDRESS,

    LINKMAN_SHOW_ADDRESS    = V_LINKMAN_SHOW_ADDRESS,

    LINKMAN_SHOW_NAME       = V_LINKMAN_SHOW_NAME,

    SOCIAL_CREDIT_CODE      = V_SOCIAL_CREDIT_CODE,

    SHOW_SOCIAL_CREDIT_CODE = V_SHOW_SOCIAL_CREDIT_CODE,

    INDUSTRY                = V_INDUSTRY,

    WORK_ADDRESS            = V_WORK_ADDRESS,

    SHOW_WORK_ADDRESS       = V_SHOW_WORK_ADDRESS,

    SHAREHOLDER_INFO        = V_SHAREHOLDER_INFO,

    SHOW_SHAREHOLDER_INFO   = V_SHOW_SHAREHOLDER_INFO,

    OPERATE_AREA            = V_OPERATE_AREA,

    OTHER_INFO              = V_OTHER_INFO,

    LINKMAN_QQ              = V_LINKMAN_QQ,

    BORROWER_AREA           = V_BORROWER_AREA,

    QQ                      = V_QQ,

    LINKMAN_RELATION        = V_LINKMAN_RELATION

  WHERE BPMO_ID             = V_BPMO_ID;

  IF SQL%NOTFOUND THEN

    INSERT

    INTO BA_PRJ_MGR_ORG

      (

        BPMO_ID,

        ORG_NAME,

        SHOW_ORG_NAME,

        REGISTERED_FUND,

        REGISTERED_SHOW_FUND,

        REGISTERED_DATE,

        LEGAL_ID_CARD,

        LEGAL_PERSON_NAME,

        LEGAL_PERSON_SHOW_NAME,

        MOBILE,

        EMAIL,

        ADDRESS,

        CREATOR,

        CREATE_TIME,

        UPDATER,

        UPDATE_TIME,

        INTRO,

        SHOW_ADDRESS,

        FAX,

        WCHAT,

        LINKMAN_NAME,

        LINKMAN_ID_CARD,

        LINKMAN_MOBILE,

        LINKMAN_FAX,

        LINKMAN_EMAIL,

        LINKMAN_WCHAT,

        LINKMAN_ADDRESS,

        LINKMAN_SHOW_ADDRESS,

        LINKMAN_SHOW_NAME,

        SOCIAL_CREDIT_CODE,

        SHOW_SOCIAL_CREDIT_CODE,

        INDUSTRY,

        WORK_ADDRESS,

        SHOW_WORK_ADDRESS,

        SHAREHOLDER_INFO,

        SHOW_SHAREHOLDER_INFO,

        OPERATE_AREA,

        OTHER_INFO,

        LINKMAN_QQ,

        BORROWER_AREA,

        QQ,

        LINKMAN_RELATION

      )

      VALUES

      (

        BA_ID.NEXTVAL,

        V_ORG_NAME,

        V_SHOW_ORG_NAME,

        V_REGISTERED_FUND,

        V_REGISTERED_SHOW_FUND,

        V_REGISTERED_DATE,

        V_LEGAL_ID_CARD,

        V_LEGAL_PERSON_NAME,

        V_LEGAL_PERSON_SHOW_NAME,

        V_MOBILE,

        V_EMAIL,

        V_ADDRESS,

        V_CREATOR,

        SYSDATE,

        V_UPDATER,

        SYSDATE,

        V_INTRO,

        V_SHOW_ADDRESS,

        V_FAX,

        V_WCHAT,

        V_LINKMAN_NAME,

        V_LINKMAN_ID_CARD,

        V_LINKMAN_MOBILE,

        V_LINKMAN_FAX,

        V_LINKMAN_EMAIL,

        V_LINKMAN_WCHAT,

        V_LINKMAN_ADDRESS,

        V_LINKMAN_SHOW_ADDRESS,

        V_LINKMAN_SHOW_NAME,

        V_SOCIAL_CREDIT_CODE,

        V_SHOW_SOCIAL_CREDIT_CODE,

        V_INDUSTRY,

        V_WORK_ADDRESS,

        V_SHOW_WORK_ADDRESS,

        V_SHAREHOLDER_INFO,

        V_SHOW_SHAREHOLDER_INFO,

        V_OPERATE_AREA,

        V_OTHER_INFO,

        V_LINKMAN_QQ,

        V_BORROWER_AREA,

        V_QQ,

        V_LINKMAN_RELATION

      );

    SELECT BA_ID.CURRVAL INTO V_BPMO_ID FROM DUAL;

  END IF;

  --QUERY THE INSERT OR UPDATE DATA.

  OPEN V_RET FOR SELECT BPMO_ID,

  ORG_NAME,

  SHOW_ORG_NAME,

  REGISTERED_FUND,

  REGISTERED_SHOW_FUND,

  REGISTERED_DATE,

  LEGAL_ID_CARD,

  LEGAL_PERSON_NAME,

  LEGAL_PERSON_SHOW_NAME,

  MOBILE,

  EMAIL,

  ADDRESS,

  CREATOR,

  CREATE_TIME,

  UPDATER,

  UPDATE_TIME,

  INTRO,

  SHOW_ADDRESS,

  FAX,

  WCHAT,

  LINKMAN_NAME,

  LINKMAN_ID_CARD,

  LINKMAN_MOBILE,

  LINKMAN_FAX,

  LINKMAN_EMAIL,

  LINKMAN_WCHAT,

  LINKMAN_ADDRESS,

  LINKMAN_SHOW_ADDRESS,

  LINKMAN_SHOW_NAME,

  SOCIAL_CREDIT_CODE,

  SHOW_SOCIAL_CREDIT_CODE,

  INDUSTRY,

  WORK_ADDRESS,

  SHOW_WORK_ADDRESS,

  SHAREHOLDER_INFO,

  SHOW_SHAREHOLDER_INFO,

  OPERATE_AREA,

  OTHER_INFO,

  LINKMAN_QQ,

  BORROWER_AREA,

  QQ,

  LINKMAN_RELATION

  FROM BA_PRJ_MGR_ORG WHERE BPMO_ID =V_BPMO_ID;

END BA_PRJ_MGR_ORG_IN_OR_UP;
/

REM Create procedure BA_PRJ_MGR_ORG_QUERY_BY_ID
CREATE OR REPLACE PROCEDURE       "BA_PRJ_MGR_ORG_QUERY_BY_ID" 

(

  V_RET OUT SYS_REFCURSOR,

  V_BPMO_ID IN NUMBER

) AS



BEGIN



  --SEARCH AND RETURN THE BA_BORROW_ORG ITEM WHICH BBO_ID IS V_BBO_ID.

  OPEN V_RET FOR

  SELECT BPMO_ID,ORG_NAME,SHOW_ORG_NAME,REGISTERED_FUND,REGISTERED_SHOW_FUND,REGISTERED_DATE,LEGAL_ID_CARD,LEGAL_PERSON_NAME,LEGAL_PERSON_SHOW_NAME,MOBILE,EMAIL,ADDRESS,

            CREATOR,CREATE_TIME,UPDATER,UPDATE_TIME,INTRO,SHOW_ADDRESS,FAX,WCHAT,LINKMAN_NAME,LINKMAN_ID_CARD,LINKMAN_MOBILE,LINKMAN_FAX,LINKMAN_EMAIL,LINKMAN_WCHAT,

            LINKMAN_ADDRESS,LINKMAN_SHOW_ADDRESS,LINKMAN_SHOW_NAME,SOCIAL_CREDIT_CODE,SHOW_SOCIAL_CREDIT_CODE,INDUSTRY,

            WORK_ADDRESS,SHOW_WORK_ADDRESS,SHAREHOLDER_INFO,SHOW_SHAREHOLDER_INFO,OPERATE_AREA,OTHER_INFO, LINKMAN_QQ, BORROWER_AREA, QQ, LINKMAN_RELATION

  FROM BA_PRJ_MGR_ORG

  WHERE BPMO_ID = V_BPMO_ID;



END BA_PRJ_MGR_ORG_QUERY_BY_ID;
/

REM Create procedure BA_PRJ_MGR_ORG_QUERY_LIST
CREATE OR REPLACE PROCEDURE       "BA_PRJ_MGR_ORG_QUERY_LIST" (

    V_RET OUT SYS_REFCURSOR,

    V_START_DATE IN DATE,

    V_END_DATE   IN DATE,

    V_UPDATER    IN VARCHAR2,

    V_CREATOR    IN VARCHAR2,

    V_ORG_NAME   IN VARCHAR2,

    V_MOBILE     IN VARCHAR2 )

AS

  V_SQL     VARCHAR2(30000 CHAR);  

  V_SUB_SQL VARCHAR2(30000 CHAR);

  V_CUR_ID NUMBER;

  V_RESULT NUMBER;

BEGIN

  V_SQL:='SELECT BPMO_ID,ORG_NAME,SHOW_ORG_NAME,REGISTERED_FUND,REGISTERED_SHOW_FUND,REGISTERED_DATE,LEGAL_ID_CARD,LEGAL_PERSON_NAME,LEGAL_PERSON_SHOW_NAME,MOBILE,EMAIL,ADDRESS,

CREATOR,CREATE_TIME,UPDATER,UPDATE_TIME,INTRO,SHOW_ADDRESS,FAX,WCHAT,LINKMAN_NAME,LINKMAN_ID_CARD,LINKMAN_MOBILE,LINKMAN_FAX,LINKMAN_EMAIL,LINKMAN_WCHAT,

LINKMAN_ADDRESS,LINKMAN_SHOW_ADDRESS,LINKMAN_SHOW_NAME,SOCIAL_CREDIT_CODE,SHOW_SOCIAL_CREDIT_CODE,INDUSTRY,

WORK_ADDRESS,SHOW_WORK_ADDRESS,SHAREHOLDER_INFO,SHOW_SHAREHOLDER_INFO,OPERATE_AREA,OTHER_INFO, LINKMAN_QQ, BORROWER_AREA, QQ, LINKMAN_RELATION

FROM BA_PRJ_MGR_ORG

WHERE 1=1';

  --构建过滤条件，参数为空则取消该过滤条件

  IF V_START_DATE IS NOT NULL THEN

    V_SQL         := V_SQL||' AND CREATE_TIME >= :V_START_DATE ';

  END IF;

  IF V_END_DATE IS NOT NULL THEN

    V_SQL       := V_SQL||' AND CREATE_TIME <= :V_END_DATE ';

  END IF;

  

  V_SUB_SQL :='1<>1';

  IF V_UPDATER IS NOT NULL THEN

    V_SUB_SQL       := V_SUB_SQL||' AND UPDATER LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_UPDATER||'||CHR(39)||'%'||CHR(39)||')';

  END IF;

  IF V_CREATOR IS NOT NULL THEN

    V_SUB_SQL       := V_SUB_SQL||' AND CREATOR LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_CREATOR||'||CHR(39)||'%'||CHR(39)||')';

  END IF;

  IF V_ORG_NAME IS NOT NULL THEN

    V_SUB_SQL       := V_SUB_SQL||' OR ORG_NAME LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_ORG_NAME||'||CHR(39)||'%'||CHR(39)||')';

  END IF;

  IF V_MOBILE IS NOT NULL THEN

    V_SUB_SQL       := V_SUB_SQL||' OR MOBILE = :V_MOBILE ';

  END IF;

  

  IF V_SUB_SQL = '1<>1' THEN

    V_SQL    := V_SQL||' ORDER BY BPMO_ID';

  ELSE 

    V_SQL    := V_SQL || 'AND(' || V_SUB_SQL || ') ORDER BY BPMO_ID';

  END IF;

  

  V_CUR_ID := DBMS_SQL.OPEN_CURSOR;

  DBMS_SQL.PARSE(V_CUR_ID, V_SQL, DBMS_SQL.NATIVE);

  --绑定参数

  IF V_START_DATE IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_START_DATE',V_START_DATE);

  END IF;

  IF V_END_DATE IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_END_DATE',V_END_DATE);

  END IF;

  IF V_UPDATER IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_UPDATER',V_UPDATER);

  END IF;

  IF V_CREATOR IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_CREATOR',V_CREATOR);

  END IF;

  IF V_ORG_NAME IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_ORG_NAME',V_ORG_NAME);

  END IF;

  IF V_MOBILE IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_MOBILE',V_MOBILE);

  END IF;

  V_RESULT := DBMS_SQL.EXECUTE(V_CUR_ID);

  --转为可返回的cursor 返回结果

  V_RET := DBMS_SQL.TO_REFCURSOR(V_CUR_ID);

  IF DBMS_SQL.IS_OPEN(V_CUR_ID) THEN

    SYS.DBMS_SQL.CLOSE_CURSOR(V_CUR_ID);

  END IF;

END BA_PRJ_MGR_ORG_QUERY_LIST;
/

REM Create procedure BA_PRJ_MGR_PERSON_DEL
CREATE OR REPLACE PROCEDURE "BA_PRJ_MGR_PERSON_DEL"(

    V_RET OUT SYS_REFCURSOR,

    V_BPMP_ID IN NUMBER )

IS

BEGIN

  --DELETE THE BA_BORROW_ORG DATA BY BBO_ID.

  DELETE

  FROM BA_PRJ_MGR_PERSON

  WHERE BPMP_ID = V_BPMP_ID;

  OPEN V_RET FOR SELECT V_BPMP_ID FROM DUAL;

  IF SQL%NOTFOUND THEN

    OPEN V_RET FOR SELECT 0 FROM DUAL;

  END IF;

END BA_PRJ_MGR_PERSON_DEL;
/

REM Create procedure BA_PRJ_MGR_PERSON_INST_OR_UPDT
CREATE OR REPLACE PROCEDURE       "BA_PRJ_MGR_PERSON_INST_OR_UPDT" (

    V_RET OUT SYS_REFCURSOR,

    V_REAL_NAME            IN VARCHAR2,

    V_SHOW_NAME            IN VARCHAR2,

    V_ID_CARD              IN VARCHAR2,

    V_MOBILE               IN VARCHAR2,

    V_EMAIL                IN VARCHAR2,

    V_ADDRESS              IN VARCHAR2,

    V_WORK_YEARS           IN NUMBER,

    V_CREATOR              IN VARCHAR2,

    V_UPDATER              IN VARCHAR2,

    V_INTRO                IN VARCHAR2,

    V_COMPANY              IN VARCHAR2,

    V_POSITION             IN VARCHAR2,

    V_AGE                  IN NUMBER,

    V_ID_CARD_ADDRESS_PROV IN VARCHAR2,

    V_ID_CARD_ADDRESS_CITY IN VARCHAR2,

    V_SHOW_AGE             IN VARCHAR2,

    V_GENDER               IN VARCHAR2,

    V_WCHAT                IN VARCHAR2,

    V_LINKMAN_NAME         IN VARCHAR2,

    V_LINKMAN_ID_CARD      IN VARCHAR2,

    V_LINKMAN_MOBILE       IN VARCHAR2,

    V_LINKMAN_FAX          IN VARCHAR2,

    V_LINKMAN_EMAIL        IN VARCHAR2,

    V_LINKMAN_WCHAT        IN VARCHAR2,

    V_LINKMAN_ADDRESS      IN VARCHAR2,

    V_FAX                  IN VARCHAR2,

    V_LINKMAN_SHOW_ADDRESS IN VARCHAR2,

    V_LINKMAN_SHOW_NAME    IN VARCHAR2,

    V_SHOW_ADDRESS         IN VARCHAR2,

    V_INDUSTRY             IN VARCHAR2,

    V_WORK_NATURE          IN VARCHAR2,

    V_OTHER_INFO           IN VARCHAR2,

    V_BPMP_ID              IN OUT NUMBER,

    V_LINKMAN_QQ           IN VARCHAR2,

    V_BORROWER_AREA        IN NUMBER,

    V_QQ                   IN VARCHAR2,

    V_LINKMAN_RELATION     IN VARCHAR2)

AS

BEGIN

  UPDATE BA_PRJ_MGR_PERSON

  SET REAL_NAME          = V_REAL_NAME,

    SHOW_NAME            = V_SHOW_NAME,

    ID_CARD              = V_ID_CARD,

    MOBILE               = V_MOBILE,

    EMAIL                = V_EMAIL,

    ADDRESS              = V_ADDRESS,

    WORK_YEARS           = V_WORK_YEARS,

    UPDATER              = V_UPDATER,

    UPDATE_TIME          = SYSDATE,

    INTRO                = V_INTRO,

    COMPANY              = V_COMPANY,

    POSITION             = V_POSITION,

    AGE                  = V_AGE,

    ID_CARD_ADDRESS_PROV = V_ID_CARD_ADDRESS_PROV,

    ID_CARD_ADDRESS_CITY = V_ID_CARD_ADDRESS_CITY,

    SHOW_AGE             = V_SHOW_AGE,

    GENDER               = V_GENDER,

    WCHAT                = V_WCHAT,

    LINKMAN_NAME         = V_LINKMAN_NAME,

    LINKMAN_ID_CARD      = V_LINKMAN_ID_CARD,

    LINKMAN_MOBILE       = V_LINKMAN_MOBILE,

    LINKMAN_FAX          = V_LINKMAN_FAX,

    LINKMAN_EMAIL        = V_LINKMAN_EMAIL,

    LINKMAN_WCHAT        = V_LINKMAN_WCHAT,

    LINKMAN_ADDRESS      = V_LINKMAN_ADDRESS,

    FAX                  = V_FAX,

    LINKMAN_SHOW_ADDRESS = V_LINKMAN_SHOW_ADDRESS,

    LINKMAN_SHOW_NAME    = V_LINKMAN_SHOW_NAME,

    SHOW_ADDRESS         = V_SHOW_ADDRESS,

    INDUSTRY             = V_INDUSTRY,

    WORK_NATURE          = V_WORK_NATURE,

    OTHER_INFO           = V_OTHER_INFO,

    LINKMAN_QQ           = V_LINKMAN_QQ,

    BORROWER_AREA        = V_BORROWER_AREA,

    QQ                   = V_QQ,

    LINKMAN_RELATION     = V_LINKMAN_RELATION

  WHERE BPMP_ID          = V_BPMP_ID;

  IF SQL%NOTFOUND THEN

    INSERT

    INTO BA_PRJ_MGR_PERSON

      (

        BPMP_ID,

        REAL_NAME,

        SHOW_NAME,

        ID_CARD,

        MOBILE,

        EMAIL,

        ADDRESS,

        WORK_YEARS,

        CREATOR,

        CREATE_TIME,

        UPDATER,

        UPDATE_TIME,

        INTRO,

        COMPANY,

        POSITION,

        AGE,

        ID_CARD_ADDRESS_PROV,

        ID_CARD_ADDRESS_CITY,

        SHOW_AGE,

        GENDER,

        WCHAT,

        LINKMAN_NAME,

        LINKMAN_ID_CARD,

        LINKMAN_MOBILE,

        LINKMAN_FAX,

        LINKMAN_EMAIL,

        LINKMAN_WCHAT,

        LINKMAN_ADDRESS,

        FAX,

        LINKMAN_SHOW_ADDRESS,

        LINKMAN_SHOW_NAME,

        SHOW_ADDRESS,

        INDUSTRY,

        WORK_NATURE,

        OTHER_INFO,

        LINKMAN_QQ,

        BORROWER_AREA,

        QQ,

        LINKMAN_RELATION

      )

      VALUES

      (

        BA_ID.NEXTVAL,

        V_REAL_NAME,

        V_SHOW_NAME,

        V_ID_CARD,

        V_MOBILE,

        V_EMAIL,

        V_ADDRESS,

        V_WORK_YEARS,

        V_CREATOR,

        SYSDATE,

        V_UPDATER,

        SYSDATE,

        V_INTRO,

        V_COMPANY,

        V_POSITION,

        V_AGE,

        V_ID_CARD_ADDRESS_PROV,

        V_ID_CARD_ADDRESS_CITY,

        V_SHOW_AGE,

        V_GENDER,

        V_WCHAT,

        V_LINKMAN_NAME,

        V_LINKMAN_ID_CARD,

        V_LINKMAN_MOBILE,

        V_LINKMAN_FAX,

        V_LINKMAN_EMAIL,

        V_LINKMAN_WCHAT,

        V_LINKMAN_ADDRESS,

        V_FAX,

        V_LINKMAN_SHOW_ADDRESS,

        V_LINKMAN_SHOW_NAME,

        V_SHOW_ADDRESS,

        V_INDUSTRY,

        V_WORK_NATURE,

        V_OTHER_INFO,

        V_LINKMAN_QQ,

        V_BORROWER_AREA,

        V_QQ,

        V_LINKMAN_RELATION

      );

    SELECT BA_ID.CURRVAL INTO V_BPMP_ID FROM DUAL;

  END IF;

  --QUERY THE INSERT OR UPDATE DATA."

  OPEN V_RET FOR SELECT BPMP_ID,

  REAL_NAME,

  SHOW_NAME,

  ID_CARD,

  MOBILE,

  EMAIL,

  ADDRESS,

  WORK_YEARS,

  CREATOR,

  CREATE_TIME,

  UPDATER,

  UPDATE_TIME,

  INTRO,

  COMPANY,

  POSITION,

  AGE,

  ID_CARD_ADDRESS_PROV,

  ID_CARD_ADDRESS_CITY,

  SHOW_AGE,

  GENDER,

  WCHAT,

  LINKMAN_NAME,

  LINKMAN_ID_CARD,

  LINKMAN_MOBILE,

  LINKMAN_FAX,

  LINKMAN_EMAIL,

  LINKMAN_WCHAT,

  LINKMAN_ADDRESS,

  FAX,

  LINKMAN_SHOW_ADDRESS,

  LINKMAN_SHOW_NAME,

  SHOW_ADDRESS,

  INDUSTRY,

  WORK_NATURE,

  OTHER_INFO,

  LINKMAN_QQ,

  BORROWER_AREA,

  QQ,

  LINKMAN_RELATION

  FROM BA_PRJ_MGR_PERSON WHERE BPMP_ID =V_BPMP_ID;

END BA_PRJ_MGR_PERSON_INST_OR_UPDT;
/

REM Create procedure BA_PRJ_MGR_PERSON_QUERY_BY_ID
CREATE OR REPLACE PROCEDURE       "BA_PRJ_MGR_PERSON_QUERY_BY_ID" 

(

  V_RET OUT SYS_REFCURSOR,

  V_BPMP_ID IN	NUMBER

) AS



BEGIN



  --SEARCH AND RETURN THE BA_BORROW_ORG ITEM WHICH BBO_ID IS V_BBO_ID.

  OPEN V_RET FOR

  SELECT BPMP_ID,REAL_NAME,SHOW_NAME,ID_CARD,MOBILE,EMAIL,ADDRESS,WORK_YEARS,CREATOR,CREATE_TIME,UPDATER,UPDATE_TIME,INTRO,COMPANY,POSITION,AGE,ID_CARD_ADDRESS_PROV,

        ID_CARD_ADDRESS_CITY,SHOW_AGE,GENDER,WCHAT,LINKMAN_NAME,LINKMAN_ID_CARD,LINKMAN_MOBILE,LINKMAN_FAX,LINKMAN_EMAIL,LINKMAN_WCHAT,LINKMAN_ADDRESS,FAX,LINKMAN_SHOW_ADDRESS,

        LINKMAN_SHOW_NAME ,SHOW_ADDRESS,INDUSTRY, WORK_NATURE, OTHER_INFO, LINKMAN_QQ, BORROWER_AREA, QQ, LINKMAN_RELATION

  FROM BA_PRJ_MGR_PERSON

  WHERE BPMP_ID =V_BPMP_ID;



END BA_PRJ_MGR_PERSON_QUERY_BY_ID;
/

REM Create procedure BA_PRJ_MGR_PERSON_QUERY_LIST
CREATE OR REPLACE PROCEDURE       "BA_PRJ_MGR_PERSON_QUERY_LIST" (

    V_RET OUT SYS_REFCURSOR,

    V_START_CREATE_TIME IN DATE,

    V_END_CREATE_TIME   IN DATE,

    V_START_UPDATE_TIME IN DATE,

    V_END_UPDATE_TIME   IN DATE,

    V_REAL_NAME         IN VARCHAR2,

    V_MOBILE            IN VARCHAR2,

    V_COMPANY           IN VARCHAR2,

    V_CREATOR           IN VARCHAR2,

    V_UPDATER           IN VARCHAR2 )

AS

  V_SQL    VARCHAR2(30000 CHAR);

  V_CUR_ID NUMBER;

  V_RESULT NUMBER;

BEGIN

  V_SQL:='SELECT BPMP_ID,REAL_NAME,SHOW_NAME,ID_CARD,MOBILE,EMAIL,ADDRESS,WORK_YEARS,CREATOR,CREATE_TIME,UPDATER,UPDATE_TIME,INTRO,COMPANY,POSITION,AGE,ID_CARD_ADDRESS_PROV,

ID_CARD_ADDRESS_CITY,SHOW_AGE,GENDER,WCHAT,LINKMAN_NAME,LINKMAN_ID_CARD,LINKMAN_MOBILE,LINKMAN_FAX,LINKMAN_EMAIL,LINKMAN_WCHAT,LINKMAN_ADDRESS,FAX,LINKMAN_SHOW_ADDRESS,

LINKMAN_SHOW_NAME,SHOW_ADDRESS,INDUSTRY, WORK_NATURE, OTHER_INFO, LINKMAN_QQ, BORROWER_AREA, QQ, LINKMAN_RELATION

FROM BA_PRJ_MGR_PERSON

WHERE 1=1 ';

  --构建过滤条件，参数为空则取消该过滤条件

  IF V_START_CREATE_TIME IS NOT NULL THEN

    V_SQL                := V_SQL||' AND CREATE_TIME >= :V_START_CREATE_TIME ';

  END IF;

  IF V_END_CREATE_TIME IS NOT NULL THEN

    V_SQL              := V_SQL||' AND CREATE_TIME <= :V_END_CREATE_TIME ';

  END IF;

  IF V_START_UPDATE_TIME IS NOT NULL THEN

    V_SQL                := V_SQL||' AND UPDATE_TIME >= :V_START_UPDATE_TIME ';

  END IF;

  IF V_END_UPDATE_TIME IS NOT NULL THEN

    V_SQL              := V_SQL||' AND UPDATE_TIME <= :V_END_UPDATE_TIME ';

  END IF;

  IF V_REAL_NAME IS NOT NULL THEN

    V_SQL        := V_SQL||' AND REAL_NAME LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_REAL_NAME||'||CHR(39)||'%'||CHR(39)||') ';

  END IF;

  IF V_MOBILE IS NOT NULL THEN

    V_SQL     := V_SQL||' AND MOBILE = :V_MOBILE ';

  END IF;

  IF V_COMPANY IS NOT NULL THEN

    V_SQL      := V_SQL||' AND COMPANY LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_COMPANY||'||CHR(39)||'%'||CHR(39)||') ';

  END IF;

  IF V_CREATOR IS NOT NULL THEN

    V_SQL      := V_SQL||' AND CREATOR LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_CREATOR||'||CHR(39)||'%'||CHR(39)||') ';

  END IF;

  IF V_UPDATER IS NOT NULL THEN

    V_SQL      := V_SQL||' AND UPDATER LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_UPDATER||'||CHR(39)||'%'||CHR(39)||') ';

  END IF;

  V_SQL    := V_SQL||' ORDER BY BPMP_ID';

  V_CUR_ID := DBMS_SQL.OPEN_CURSOR;

  DBMS_SQL.PARSE(V_CUR_ID, V_SQL, DBMS_SQL.NATIVE);

  --绑定参数

  IF V_START_CREATE_TIME IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_START_CREATE_TIME',V_START_CREATE_TIME);

  END IF;

  IF V_END_CREATE_TIME IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_END_CREATE_TIME',V_END_CREATE_TIME);

  END IF;

  IF V_START_UPDATE_TIME IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_START_UPDATE_TIME',V_START_UPDATE_TIME);

  END IF;

  IF V_END_UPDATE_TIME IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_END_UPDATE_TIME',V_END_UPDATE_TIME);

  END IF;

  IF V_REAL_NAME IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_REAL_NAME',V_REAL_NAME);

  END IF;

  IF V_MOBILE IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_MOBILE',V_MOBILE);

  END IF;

  IF V_COMPANY IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_COMPANY',V_COMPANY);

  END IF;

  IF V_CREATOR IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_CREATOR',V_CREATOR);

  END IF;

  IF V_UPDATER IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_UPDATER',V_UPDATER);

  END IF;

  V_RESULT := DBMS_SQL.EXECUTE(V_CUR_ID);

  --转为可返回的cursor 返回结果

  V_RET := DBMS_SQL.TO_REFCURSOR(V_CUR_ID);

  IF DBMS_SQL.IS_OPEN(V_CUR_ID) THEN

    SYS.DBMS_SQL.CLOSE_CURSOR(V_CUR_ID);

  END IF;

END BA_PRJ_MGR_PERSON_QUERY_LIST;
/

REM Create procedure BA_PRJ_MORTGAGE_DEL
CREATE OR REPLACE PROCEDURE BA_PRJ_MORTGAGE_DEL (

  V_RET       OUT     SYS_REFCURSOR,

  V_BPM_ID    IN      NUMBER )

IS

BEGIN

  --DELETE THE BA_PRJ_MORTGAGE DATA BY BPM_ID.

  DELETE

  FROM BA_PRJ_MORTGAGE

  WHERE BPM_ID = V_BPM_ID;

  OPEN V_RET FOR SELECT V_BPM_ID FROM DUAL;

  IF SQL%NOTFOUND THEN

    OPEN V_RET FOR SELECT 0 FROM DUAL;

  END IF;

END BA_PRJ_MORTGAGE_DEL;

/

REM Create procedure BA_PRJ_MORTGAGE_IN_OR_UP
CREATE OR REPLACE PROCEDURE     BA_PRJ_MORTGAGE_IN_OR_UP (

    V_RET				        OUT		  SYS_REFCURSOR,

    V_M_TYPE            IN      NUMBER,

    V_CONTENT           IN      NVARCHAR2,

    V_EVALUATION        IN      NUMBER,

    V_OWNER_NAME        IN      NVARCHAR2,

    V_OWNER_SHOW_NAME   IN      NVARCHAR2,

    V_OWNER_ID_NO       IN      NVARCHAR2,

    V_LINK_MAN          IN      NVARCHAR2,

    V_LINK_MOBILE       IN      NVARCHAR2,

    V_LINK_ADDRESS      IN      NVARCHAR2,

    V_REMARK           IN      NVARCHAR2,

    V_CREATOR   			  IN		  NVARCHAR2,

    V_UPDATER		    	  IN		  NVARCHAR2,

    V_BPM_ID			      IN OUT	NUMBER )

AS

BEGIN

  UPDATE BA_PRJ_MORTGAGE

     SET 

        M_TYPE            = V_M_TYPE,

        CONTENT           = V_CONTENT,

        EVALUATION        = V_EVALUATION,

        OWNER_NAME        = V_OWNER_NAME,

        OWNER_SHOW_NAME   = V_OWNER_SHOW_NAME,

        OWNER_ID_NO       = V_OWNER_ID_NO,

        LINK_MAN          = V_LINK_MAN,

        LINK_MOBILE       = V_LINK_MOBILE,

        LINK_ADDRESS      = V_LINK_ADDRESS,

        UPDATER	      	  = V_UPDATER,

        UPDATE_TIME     	= SYSDATE,        

        REMARK           = V_REMARK

  WHERE BPM_ID			      = V_BPM_ID;

  IF SQL%NOTFOUND THEN

    INSERT

      INTO BA_PRJ_MORTGAGE

         (

          BPM_ID,

          M_TYPE,

          CONTENT,

          EVALUATION,

          OWNER_NAME,

          OWNER_SHOW_NAME,

          OWNER_ID_NO,

          LINK_MAN,

          LINK_MOBILE,

          LINK_ADDRESS,

          CREATOR,

          CREATE_TIME,          

          REMARK

          )

      VALUES

          (

          BA_ID.NEXTVAL,

          V_M_TYPE,

          V_CONTENT,

          V_EVALUATION,

          V_OWNER_NAME,

          V_OWNER_SHOW_NAME,

          V_OWNER_ID_NO,

          V_LINK_MAN,

          V_LINK_MOBILE,

          V_LINK_ADDRESS,

          V_CREATOR,

          SYSDATE,

          V_REMARK    

           ); 

    SELECT BA_ID.CURRVAL INTO V_BPM_ID FROM DUAL;

  END IF;

  --QUERY THE INSERT OR UPDATE DATA."

  OPEN V_RET 

   FOR 

	   SELECT 

            BPM_ID,

            M_TYPE,

            CONTENT,

            EVALUATION,

            OWNER_NAME,

            OWNER_SHOW_NAME,

            OWNER_ID_NO,

            LINK_MAN,

            LINK_MOBILE,

            LINK_ADDRESS,

      			CREATOR,

        		CREATE_TIME,

        		UPDATER,

          	UPDATE_TIME, 

            REMARK

	     FROM BA_PRJ_MORTGAGE WHERE BPM_ID = V_BPM_ID;

END BA_PRJ_MORTGAGE_IN_OR_UP;
/

REM Create procedure BA_PRJ_MORTGAGE_QUERY_BY_ID
CREATE OR REPLACE PROCEDURE     BA_PRJ_MORTGAGE_QUERY_BY_ID 

(

  V_RET OUT SYS_REFCURSOR,

  V_BPM_ID IN	NUMBER

) AS

BEGIN

  --SEARCH AND RETURN THE BA_PRJ_MORTGAGE ITEM WHICH BBO_ID IS V_BBO_ID.

  OPEN V_RET FOR

	SELECT 

        BPM_ID,

        M_TYPE,

        CONTENT,

        EVALUATION,

        OWNER_NAME,

        OWNER_SHOW_NAME,

        OWNER_ID_NO,

        LINK_MAN,

        LINK_MOBILE,

        LINK_ADDRESS,

        CREATOR,

        CREATE_TIME,

        UPDATER,

        UPDATE_TIME, 

        REMARK

	 FROM BA_PRJ_MORTGAGE

  WHERE BPM_ID = V_BPM_ID;

END BA_PRJ_MORTGAGE_QUERY_BY_ID;
/

REM Create procedure BA_PRJ_MORTGAGE_QUERY_LIST
CREATE OR REPLACE PROCEDURE     BA_PRJ_MORTGAGE_QUERY_LIST(

    V_RET			    OUT		SYS_REFCURSOR,

    V_START_TIME	IN		DATE,

    V_END_TIME		IN		DATE,

    V_MOBILE		  IN		NVARCHAR2,

    V_NAME   		  IN		NVARCHAR2,

    V_CREATOR		  IN		NVARCHAR2,

    V_UPDATER		  IN		NVARCHAR2)

AS

  V_SQL			VARCHAR2(30000 CHAR);

  V_SUB_SQL		VARCHAR2(30000 CHAR);

  V_CUR_ID		NUMBER;

  V_RESULT		NUMBER;

BEGIN

  V_SQL:='SELECT BPM_ID, M_TYPE, CONTENT, EVALUATION, OWNER_NAME, OWNER_SHOW_NAME, OWNER_ID_NO, LINK_MAN, LINK_MOBILE, LINK_ADDRESS, CREATOR, CREATE_TIME, UPDATER, UPDATE_TIME, REMARK

	        FROM BA_PRJ_MORTGAGE

		   WHERE 1=1';

  --构建过滤条件，参数为空则取消该过滤条件

  IF V_START_TIME IS NOT NULL THEN

    V_SQL         := V_SQL||' AND CREATE_TIME >= :V_START_TIME ';

  END IF;

  IF V_END_TIME IS NOT NULL THEN

    V_SQL       := V_SQL||' AND CREATE_TIME <= :V_END_TIME ';

  END IF;

  

  V_SUB_SQL := '1<>1';

  IF V_MOBILE IS NOT NULL THEN

    V_SUB_SQL  := V_SUB_SQL||' OR LINK_MOBILE = :V_MOBILE ';

  END IF;

  

  IF V_NAME IS NOT NULL THEN

    V_SUB_SQL  := V_SUB_SQL||' OR OWNER_NAME LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_NAME||'||CHR(39)||'%'||CHR(39)||')';

  END IF;

  

  IF V_CREATOR IS NOT NULL THEN

    V_SUB_SQL  := V_SUB_SQL||' OR CREATOR LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_CREATOR||'||CHR(39)||'%'||CHR(39)||')';

  END IF;

  IF V_UPDATER IS NOT NULL THEN

    V_SUB_SQL  := V_SUB_SQL||' OR UPDATER LIKE ('||CHR(39)||'%'||CHR(39)||'||:V_UPDATER||'||CHR(39)||'%'||CHR(39)||') ';

  END IF;

  

  IF V_SUB_SQL = '1<>1' THEN

    V_SQL    := V_SQL || 'ORDER BY BPM_ID';

  ELSE

    V_SQL    := V_SQL || 'AND (' || V_SUB_SQL || ') ORDER BY BPM_ID';

  END IF;

  V_CUR_ID := DBMS_SQL.OPEN_CURSOR;

  DBMS_SQL.PARSE(V_CUR_ID, V_SQL, DBMS_SQL.NATIVE);

  --绑定参数

  IF V_START_TIME IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_START_TIME',V_START_TIME);

  END IF;

  IF V_END_TIME IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_END_TIME',V_END_TIME);

  END IF;

  IF V_MOBILE IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_MOBILE',V_MOBILE);

  END IF;

  IF V_NAME IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_NAME',V_NAME);

  END IF;

  IF V_CREATOR IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_CREATOR',V_CREATOR);

  END IF;

  IF V_UPDATER IS NOT NULL THEN

    DBMS_SQL.BIND_VARIABLE(V_CUR_ID,':V_UPDATER',V_UPDATER);

  END IF;

  V_RESULT := DBMS_SQL.EXECUTE(V_CUR_ID);

  --转为可返回的CURSOR 返回结果

  V_RET := DBMS_SQL.TO_REFCURSOR(V_CUR_ID);

  IF DBMS_SQL.IS_OPEN(V_CUR_ID) THEN

    SYS.DBMS_SQL.CLOSE_CURSOR(V_CUR_ID);

  END IF;

END BA_PRJ_MORTGAGE_QUERY_LIST;
/

REM Create procedure BUILD_PRJ_PERMISSIBLE
CREATE OR REPLACE PROCEDURE BUILD_PRJ_PERMISSIBLE(

    V_P_ID      IN NUMBER ,

    V_INVESTORS IN VARCHAR2 ,

    V_I_ROLE    IN NUMBER )

IS

  V_IDX         INTEGER;

  V_INVESTORS_1 VARCHAR2(2000 CHAR) := V_INVESTORS;

  V_INVESTOR    VARCHAR2(50 CHAR);

BEGIN

  -- Delete old permissible investors

  DELETE

  FROM PRJ_PERMISSIBLE_INVESTORS

  WHERE P_ID                   = V_P_ID

  AND I_ROLE                   = V_I_ROLE;

  WHILE LENGTH(V_INVESTORS_1) <> 0

  LOOP

    V_IDX           := INSTR(V_INVESTORS_1, ',');

    IF V_IDX         > 0 THEN

      V_INVESTOR    := SUBSTR(V_INVESTORS_1, 1, V_IDX - 1);

      V_INVESTORS_1 := SUBSTR(V_INVESTORS_1, V_IDX    + 1);

    ELSE

      V_INVESTOR    := V_INVESTORS_1;

      V_INVESTORS_1 := '';

    END IF;

    -- Insert new permissible investor

    INSERT

    INTO PRJ_PERMISSIBLE_INVESTORS

      (

        P_ID,

        AU_ID,

        I_ROLE

      )

    SELECT V_P_ID,

      AU_ID,

      V_I_ROLE

    FROM ACC_USER_REG

    WHERE LOGIN_NAME = V_INVESTOR;

  END LOOP;

END BUILD_PRJ_PERMISSIBLE;

/

REM Create procedure BUILD_PRJ_TS_COLLECTIONS
CREATE OR REPLACE PROCEDURE "BUILD_PRJ_TS_COLLECTIONS"(

    V_RET OUT SYS_REFCURSOR,

    V_P_ID IN INTEGER)

IS

  V_CAPITAL   NUMBER(18, 2);

  V_AMT       NUMBER(18, 2);

  V_MAX_AMT   NUMBER(18, 2);

  V_TOTAL_AMT NUMBER(18, 2);

  V_FEE_RATE  NUMBER(18, 2);

  V_MAX_TI_ID INTEGER;

BEGIN

  -- Get capital from PRJ_BONUS

  SELECT SUM(AMT)

  INTO V_CAPITAL

  FROM PRJ_BONUS

  WHERE P_ID    = V_P_ID

  AND TRAN_TYPE = 1;

  FOR PB IN

  (SELECT * FROM PRJ_BONUS WHERE P_ID = V_P_ID

  )

  LOOP

    SELECT 0,

      0,

      0

    INTO V_MAX_TI_ID,

      V_MAX_AMT,

      V_TOTAL_AMT

    FROM DUAL;

    FOR TI IN

    (SELECT *

    FROM TS_INVEST

    WHERE P_ID       = V_P_ID

    AND PB.DUE_TIME >= DATEPOINT

    AND PB.DUE_TIME  < DATEPOINT2

    )

    LOOP

      -- Get amt from TS_INVEST and PRJ_BONUS

      SELECT

        CASE

          WHEN PB.TRAN_TYPE = 1

          THEN TI.AMT

          ELSE ROUND(TI.AMT * PB.AMT / V_CAPITAL, 2)

        END

      INTO V_AMT

      FROM DUAL;

      SELECT

        CASE

          WHEN PB.TRAN_TYPE = 1

          THEN 0

          ELSE

            (SELECT FEE_RATE FROM PRJ_LOAN WHERE P_ID = V_P_ID

            )

        END

      INTO V_FEE_RATE

      FROM DUAL;

      SELECT V_TOTAL_AMT + V_AMT INTO V_TOTAL_AMT FROM DUAL;

      IF V_AMT > V_MAX_AMT THEN

        SELECT TI.TI_ID, V_AMT INTO V_MAX_TI_ID, V_MAX_AMT FROM DUAL;

      END IF;

      -- Update TS_COLLECTION.AMT from PRJ_BONUS

      UPDATE TS_COLLECTION

      SET AMT         = V_AMT

      WHERE TI_ID     = TI.TI_ID

      AND TRAN_NO     = PB.TRAN_NO

      AND TRAN_TYPE   = PB.TRAN_TYPE;

      IF SQL%ROWCOUNT = 0 THEN

        -- Insert TS_COLLECTION from PRJ_BONUS

        INSERT

        INTO TS_COLLECTION

          (

            TI_ID,

            PAID_AMT,

            AMT,

            CREATE_DATE,

            CREATOR,

            DELETED,

            TRAN_NO,

            TRAN_TYPE,

            PAID_OVERDUE_AMT,

            OVERDUE_AMT,

            FEE_RATE

          )

          VALUES

          (

            TI.TI_ID,

            0,            -- PAID_AMT

            V_AMT,        -- AMT

            SYSDATE,      -- CREATE_DATE

            '',           -- CREATOR

            0,            -- DELETED

            PB.TRAN_NO,   -- TRAN_NO

            PB.TRAN_TYPE, -- TRAN_TYPE

            0,            -- PAID_OVERDUE_AMT

            0,            -- OVERDUE_AMT

            V_FEE_RATE

          );

      END IF;

    END LOOP;

    UPDATE TS_COLLECTION

    SET AMT       = AMT - V_TOTAL_AMT + PB.AMT

    WHERE TI_ID   = V_MAX_TI_ID

    AND TRAN_NO   = PB.TRAN_NO

    AND TRAN_TYPE = PB.TRAN_TYPE;

  END LOOP;

END BUILD_PRJ_TS_COLLECTIONS;
/

REM Create procedure CREATE_ACC_DAILY_SUMMARY
CREATE OR REPLACE PROCEDURE CREATE_ACC_DAILY_SUMMARY

(

  V_RET OUT SYS_REFCURSOR,

  V_DATEPOINT IN DATE 

) AS

BEGIN

  --删除v_datepoint已存在的数据

  delete from ACC_DAILY_SUMMARY where datepoint = TO_CHAR(V_DATEPOINT, 'YYYYMMDD');

  --插入ACC_DAILY_SUMMARY新记录

  INSERT INTO  ACC_DAILY_SUMMARY (AU_ID, DATEPOINT)

  SELECT AJU1.AU_ID, TO_CHAR(V_DATEPOINT, 'YYYYMMDD')

  FROM  ACC_JX_USER AJU1;

  

  --更新TENDER_AMT

  UPDATE ACC_DAILY_SUMMARY ADS SET TENDER_AMT =

                              ( SELECT  NVL(SUM(TT.AMT),0)

                                FROM  ACC_JX_USER AJU

                                JOIN  TS_TENDER TT ON TT.AU_ID = AJU.AU_ID AND TT.DATEPOINT BETWEEN V_DATEPOINT AND  V_DATEPOINT + 1 AND TT.STATUS = 1

                                WHERE AJU.AU_ID = ADS.AU_ID)

  WHERE DATEPOINT = TO_CHAR(V_DATEPOINT, 'YYYYMMDD');

     

  --更新LOAN_AMT，LOAN_INCOME

  UPDATE ACC_DAILY_SUMMARY ADS SET (LOAN_AMT ,LOAN_INCOME) =

                                (SELECT NVL(SUM(TL.AMT),0), NVL(ROUND(SUM(TT.AMT * (NVL(PL.SOLD_FEE, 0) - NVL(PL.COST_FEE, 0)) * PL.BORROW_DAYS / 365/ 100),2),0)

                                FROM  ACC_JX_USER AJU

                                JOIN  TS_TENDER TT ON TT.AU_ID = AJU.AU_ID 

                                JOIN  TS_LOAN TL ON TL.TT_ID = TT.TT_ID AND TL.STATUS = 1 AND TL.DATEPOINT BETWEEN V_DATEPOINT AND  V_DATEPOINT + 1

                                JOIN  PRJ_LOAN PL ON PL.P_ID = TT.P_ID 

                                WHERE AJU.AU_ID = ADS.AU_ID)

  WHERE DATEPOINT = TO_CHAR(V_DATEPOINT, 'YYYYMMDD');

     

  --更新TENDER_AMT2

  UPDATE ACC_DAILY_SUMMARY ADS SET TENDER_AMT2 = 

                              (SELECT NVL(SUM(TT.AMT),0)

                               FROM  ACC_JX_USER AJU

                               JOIN  TS_TENDER TT ON TT.AU_ID = AJU.AU_ID AND TT.DATEPOINT BETWEEN V_DATEPOINT AND  V_DATEPOINT + 1 AND TT.STATUS = 1

                               JOIN  PRJ_LOAN PL ON PL.P_ID = TT.P_ID 

                               JOIN  PRJ_INDEX PI ON PI.P_ID = PL.P_ID AND PI.FLAGS = 1

                               WHERE AJU.AU_ID = ADS.AU_ID)

  WHERE DATEPOINT = TO_CHAR(V_DATEPOINT, 'YYYYMMDD');

     

  --更新LOAN_AMT2,LOAN_INCOME2

  UPDATE ACC_DAILY_SUMMARY ADS SET (LOAN_AMT2 ,LOAN_INCOME2) =

                                (SELECT NVL(SUM(TL.AMT),0) ,NVL(ROUND(SUM(TT.AMT * (NVL(PL.SOLD_FEE, 0) - NVL(PL.COST_FEE, 0)) * PL.BORROW_DAYS / 365/ 100),2),0)

                                 FROM  ACC_JX_USER AJU

                                 JOIN  TS_TENDER TT ON TT.AU_ID = AJU.AU_ID 

                                 JOIN  TS_LOAN TL ON TL.TT_ID = TT.TT_ID AND TL.STATUS = 1 AND TL.DATEPOINT BETWEEN V_DATEPOINT AND  V_DATEPOINT + 1

                                 JOIN  PRJ_LOAN PL ON PL.P_ID = TT.P_ID 

                                 JOIN  PRJ_INDEX PI ON PL.P_ID = PI.P_ID AND PI.FLAGS = 1

                                 WHERE AJU.AU_ID = ADS.AU_ID)

  WHERE DATEPOINT = TO_CHAR(V_DATEPOINT, 'YYYYMMDD');

      

  --更新 CREDIT_IN_AMT

  UPDATE ACC_DAILY_SUMMARY ADS SET CREDIT_IN_AMT = 

                               (SELECT NVL(SUM(TCA.AMT),0)

                                FROM  ACC_JX_USER AJU

                                JOIN  TS_CREDIT_ASSIGN TCA ON TCA.AU_ID = AJU.AU_ID AND TCA.STATUS = 1 AND TCA.DATEPOINT BETWEEN V_DATEPOINT AND  V_DATEPOINT + 1

                                WHERE AJU.AU_ID = ADS.AU_ID)

  WHERE DATEPOINT = TO_CHAR(V_DATEPOINT, 'YYYYMMDD');   

      

  --更新 CREDIT_OUT_AMT,CREDIT_FEE

  UPDATE ACC_DAILY_SUMMARY ADS SET (CREDIT_OUT_AMT,CREDIT_FEE) = 

                               (SELECT NVL(SUM(TCA.AMT),0), NVL(SUM(TCA.FEE),0)

                                FROM  ACC_JX_USER AJU

                                JOIN  TS_INVEST TI ON TI.AU_ID = AJU.AU_ID 

                                JOIN  TS_CREDIT_ASSIGN TCA ON TCA.TI_ID = TI.TI_ID AND TCA.STATUS = 1 AND TCA.DATEPOINT BETWEEN V_DATEPOINT AND  V_DATEPOINT + 1

                                WHERE AJU.AU_ID = ADS.AU_ID)

   WHERE DATEPOINT = TO_CHAR(V_DATEPOINT, 'YYYYMMDD'); 

      

   --更新REPAY_INTEREST_AMT,REPAY_INTEREST_FEE

   UPDATE ACC_DAILY_SUMMARY ADS SET (REPAY_INTEREST_AMT,REPAY_INTEREST_FEE) =

                               (SELECT NVL(SUM(TRI.AMT),0),NVL(SUM(TRI.FEE),0)

                                FROM  ACC_JX_USER AJU

                                JOIN  TS_INVEST TI ON TI.AU_ID = AJU.AU_ID 

                                JOIN  TS_REPAY_INTEREST TRI ON TI.TI_ID = TRI.TI_ID  AND TRI.STATUS = 1 AND TRI.DATEPOINT BETWEEN V_DATEPOINT AND  V_DATEPOINT + 1

                                WHERE AJU.AU_ID = ADS.AU_ID)

   WHERE DATEPOINT = TO_CHAR(V_DATEPOINT, 'YYYYMMDD'); 

      

   --更新REPAY_AMT

   UPDATE ACC_DAILY_SUMMARY ADS SET REPAY_AMT = 

                               (SELECT NVL(SUM(TR.AMT),0)

                                FROM ACC_JX_USER AJU

                                JOIN TS_INVEST TI ON TI.AU_ID = AJU.AU_ID

                                JOIN TS_REPAY TR ON TR.TI_ID = TI.TI_ID AND TR.STATUS = 1 AND TR.DATEPOINT BETWEEN V_DATEPOINT AND  V_DATEPOINT + 1

                                WHERE AJU.AU_ID = ADS.AU_ID)

   WHERE DATEPOINT = TO_CHAR(V_DATEPOINT, 'YYYYMMDD'); 

      

    --更新MANAGER

   UPDATE ACC_DAILY_SUMMARY ADS SET MANAGER = 

                               (SELECT U_NAME

                                FROM ACC_JX_USER AJU

                                JOIN CRM_MGR_REG_USER_RELATION CMRR ON CMRR.AU_ID = AJU.AU_ID  AND SYSDATE BETWEEN CMRR.DATEPOINT AND CMRR.DATEPOINT2

                                WHERE AJU.AU_ID = ADS.AU_ID AND ROWNUM <= 1)

   WHERE DATEPOINT = TO_CHAR(V_DATEPOINT, 'YYYYMMDD');                              

                                

                        

      

  OPEN V_RET FOR SELECT count(1) FROM ACC_DAILY_SUMMARY WHERE DATEPOINT = TO_CHAR(V_DATEPOINT, 'YYYYMMDD');

  IF SQL%NOTFOUND THEN

    OPEN V_RET FOR SELECT 0 FROM DUAL;

  END IF;

 

  

END CREATE_ACC_DAILY_SUMMARY;

/

REM Create procedure CREATE_ACC_USER_DAY_STATISTICS
CREATE OR REPLACE PROCEDURE CREATE_ACC_USER_DAY_STATISTICS

(

  V_RET OUT SYS_REFCURSOR,

  V_DATEPOINT IN DATE 

) AS 

BEGIN

  INSERT 

	INTO  ACC_USER_DAY_STATISTICS 

			  (AU_ID, INVEST_AMT, TENDER_AMT, INVEST_COUNT, CREDIT_AMT, DATEPOINT, 

			   CREDIT_ASSIGN_COUNT, INCOME_AMT, BIND_CARD_COUNT, IS_INVEST, FIRST_INVEST, REPAID_CAPITAL_AMT)

	SELECT 

        AJU1.AU_ID, NVL(T1.INVEST_AMT,0), NVL(TENDER_AMT, 0), NVL(T2.INVEST_COUNT,0), NVL(T3.CREDIT_AMT,0), TO_CHAR(V_DATEPOINT, 'YYYYMMDD'), 

        NVL(T3.CREDIT_ASSIGN_COUNT,0), NVL(T2.INCOME_AMT,0), NVL(T4.BIND_CARD_COUNT,0), NVL(T2.IS_INVEST,0), NVL(T5.FIRST_INVEST, 0), NVL(T6.REPAID_CAPITAL_AMT, 0) 

	FROM  ACC_JX_USER AJU1

  LEFT JOIN (

        SELECT 

              SUM(TI.AMT) INVEST_AMT, AJU.AU_ID

        FROM  ACC_JX_USER AJU

        JOIN  TS_INVEST TI ON TI.AU_ID = AJU.AU_ID AND TI.DATEPOINT <= V_DATEPOINT AND TI.DATEPOINT2 > V_DATEPOINT

        WHERE NOT EXISTS(SELECT 1 FROM ACC_USER_DAY_STATISTICS WHERE AU_ID = AJU.AU_ID AND DATEPOINT = TO_CHAR(V_DATEPOINT, 'YYYYMMDD'))

        GROUP BY AJU.AU_ID) T1 ON T1.AU_ID = AJU1.AU_ID

  LEFT JOIN(

        SELECT 

              SUM(TT.AMT) TENDER_AMT, COUNT(TT.TT_ID) INVEST_COUNT, 

              ROUND(SUM(TT.AMT * (NVL(PL.COST_FEE, 0) - NVL(PL.SOLD_FEE, 0)) * PL.BORROW_DAYS / 365/ 100),2) INCOME_AMT,

              CASE 

              WHEN COUNT(TT.TT_ID)>0 THEN 1 

              ELSE 0

              END  IS_INVEST,AJU.AU_ID

        FROM  ACC_JX_USER AJU

        JOIN  TS_TENDER TT ON TT.AU_ID = AJU.AU_ID AND TRUNC(TT.DATEPOINT) = TRUNC(V_DATEPOINT) AND TT.STATUS = 1

        JOIN  PRJ_LOAN PL ON PL.P_ID = TT.P_ID

        WHERE NOT EXISTS(SELECT 1 FROM ACC_USER_DAY_STATISTICS WHERE AU_ID = AJU.AU_ID AND DATEPOINT = TO_CHAR(V_DATEPOINT, 'YYYYMMDD')) 

        GROUP BY AJU.AU_ID) T2 ON T2.AU_ID = AJU1.AU_ID

  LEFT JOIN(   

        SELECT 

              SUM(TCA.AMT) CREDIT_AMT, COUNT(TCA.TCA_ID) CREDIT_ASSIGN_COUNT,AJU.AU_ID

        FROM  ACC_JX_USER AJU

        JOIN  TS_CREDIT_ASSIGN TCA ON TCA.AU_ID = AJU.AU_ID AND TRUNC(TCA.DATEPOINT) = TRUNC(V_DATEPOINT) AND TCA.STATUS = 1

        WHERE NOT EXISTS(SELECT 1 FROM ACC_USER_DAY_STATISTICS WHERE AU_ID = AJU.AU_ID AND DATEPOINT = TO_CHAR(V_DATEPOINT, 'YYYYMMDD')) 

        GROUP BY AJU.AU_ID) T3 ON T3.AU_ID = AJU1.AU_ID

  LEFT JOIN(       

--        SELECT 

--              COUNT(JCBP.JCBP_ID) BIND_CARD_COUNT,AJU.AU_ID

--        FROM  ACC_JX_USER AJU

--        JOIN  JX2_CARD_BIND_PLUS JCBP ON JCBP.CARDNO = AJU.USER_ID AND TRUNC(JCBP.DATEPOINT2) = TRUNC(V_DATEPOINT) AND JCBP.DONE = 2

--        WHERE NOT EXISTS(SELECT 1 FROM ACC_USER_DAY_STATISTICS WHERE AU_ID = AJU.AU_ID AND DATEPOINT = TO_CHAR(V_DATEPOINT, 'YYYYMMDD'))

--        GROUP BY AJU.AU_ID

          SELECT 

                COUNT(1) BIND_CARD_COUNT,AJU.AU_ID

          FROM  ACC_JX_USER AJU

          JOIN  TS_BIND_CARD TBC ON TBC.AU_ID = AJU.AU_ID AND TRUNC(TBC.DATEPOINT) = TRUNC(V_DATEPOINT) AND TBC.STATUS = 1

          WHERE NOT EXISTS(SELECT 1 FROM ACC_USER_DAY_STATISTICS WHERE AU_ID = AJU.AU_ID AND DATEPOINT = TO_CHAR(V_DATEPOINT, 'YYYYMMDD'))

          GROUP BY AJU.AU_ID) T4 ON T4.AU_ID = AJU1.AU_ID

  LEFT JOIN(

            SELECT

                  AJU.AU_ID,

                  CASE

                  WHEN COUNT(TT.TT_ID)>0 THEN 1

                  ELSE 0

                  END FIRST_INVEST

            FROM  ACC_JX_USER AJU

            JOIN  TS_TENDER TT ON TT.AU_ID = AJU.AU_ID AND TRUNC(TT.DATEPOINT) = TRUNC(V_DATEPOINT) AND TT.STATUS = 1

            WHERE NOT EXISTS (SELECT 1 FROM TS_TENDER TT2 WHERE TT2.AU_ID = AJU.AU_ID AND TRUNC(TT2.DATEPOINT) <= TRUNC(V_DATEPOINT-1) AND TT2.STATUS = 1)

            AND   NOT EXISTS (SELECT 1 FROM ACC_USER_DAY_STATISTICS WHERE AU_ID = AJU.AU_ID AND DATEPOINT = TO_CHAR(V_DATEPOINT, 'YYYYMMDD'))

            GROUP BY AJU.AU_ID) T5 ON T5.AU_ID = AJU1.AU_ID

  LEFT JOIN(

          SELECT 

                SUM(TR.AMT) REPAID_CAPITAL_AMT, AJU.AU_ID

          FROM  ACC_JX_USER AJU

          JOIN  TS_INVEST TI ON TI.AU_ID = AJU.AU_ID

          JOIN  TS_REPAY TR ON TR.TI_ID = TI.TI_ID AND TR.STATUS = 1 AND TRUNC(TR.DATEPOINT) = TRUNC(V_DATEPOINT)

          WHERE NOT EXISTS(SELECT 1 FROM ACC_USER_DAY_STATISTICS WHERE AU_ID = AJU.AU_ID AND DATEPOINT = TO_CHAR(V_DATEPOINT, 'YYYYMMDD'))

          GROUP BY AJU.AU_ID) T6 ON T6.AU_ID = AJU1.AU_ID

  WHERE NOT EXISTS(SELECT 1 FROM ACC_USER_DAY_STATISTICS WHERE AU_ID = AJU1.AU_ID AND DATEPOINT = TO_CHAR(V_DATEPOINT, 'YYYYMMDD'));

  

  OPEN V_RET FOR SELECT count(1) FROM ACC_USER_DAY_STATISTICS WHERE DATEPOINT = TO_CHAR(V_DATEPOINT, 'YYYYMMDD');

  IF SQL%NOTFOUND THEN

    OPEN V_RET FOR SELECT 0 FROM DUAL; 

  END IF;

  

END CREATE_ACC_USER_DAY_STATISTICS;

/

REM Create procedure INSERT_ACC_SCORE_DATAILS
CREATE OR REPLACE PROCEDURE INSERT_ACC_SCORE_DATAILS (

    V_RET         OUT NUMBER,

    V_AU_ID       IN NUMBER,

    V_DATEPOINT   IN DATE,

    V_ORIGIN      IN NUMBER,

    V_GAINED      IN NUMBER)

AS

V_ASD_ID NUMBER;

V_COUNT NUMBER;

BEGIN

  --插入积分详情记录

  SELECT ASD_ID.NEXTVAL INTO V_ASD_ID FROM DUAL;

  INSERT INTO ACC_SCORE_DETAIL(

    ASD_ID, 

    AU_ID, 

    DATE_POINT, 

    ORIGIN, 

    GAINED, 

    SPENT, 

    BALANCE, 

    ENABLED

  ) 

  VALUES(

    V_ASD_ID, 

    V_AU_ID, 

    V_DATEPOINT, 

    V_ORIGIN, 

    V_GAINED, 

    0, 

    V_GAINED, 

    1);

    --更新积分表，记录总积分。

  SELECT COUNT(AU_ID) INTO V_COUNT FROM ACC_SCORE WHERE AU_ID = V_AU_ID;

  IF V_COUNT > 0 THEN

    UPDATE ACC_SCORE SET SCORE = (SELECT SUM(BALANCE) FROM ACC_SCORE_DETAIL WHERE AU_ID = V_AU_ID AND ENABLED = 1)

    WHERE AU_ID = V_AU_ID;

  ELSE

    INSERT INTO ACC_SCORE(

    AU_ID,

    SCORE

    )

    SELECT 

    V_AU_ID, 

    (SELECT SUM(BALANCE) FROM ACC_SCORE_DETAIL WHERE AU_ID = V_AU_ID AND ENABLED = 1) SCORE

    FROM DUAL;

  END IF;

  SELECT ASD_ID INTO V_RET FROM ACC_SCORE_DETAIL WHERE ASD_ID = V_ASD_ID;

END INSERT_ACC_SCORE_DATAILS;

/

REM Create procedure PRJ_BONUS_DELETE
CREATE OR REPLACE procedure PRJ_BONUS_DELETE(

    V_RET       OUT SYS_REFCURSOR,

    V_P_ID      in INTEGER,

    V_TRAN_NO   IN INTEGER,

    V_TRAN_TYPE IN INTEGER

    )

is

begin

    DELETE FROM PRJ_BONUS PB WHERE P_ID = V_P_ID AND TRAN_NO = V_TRAN_NO AND TRAN_TYPE = V_TRAN_TYPE

    AND NOT EXISTS (SELECT 1 FROM PRJ_BONUS_DETAIL PBD WHERE PBD.P_ID = PB.P_ID AND PBD.TRAN_NO = PB.TRAN_NO AND PBD.TRAN_TYPE = PB.TRAN_TYPE);

    IF SQL%ROWCOUNT = 0 THEN

        RETURN;

    END IF; 



    OPEN V_RET FOR

    SELECT P_ID, TRAN_NO, TRAN_TYPE, CAPITAL, UNPAID_AMT, AMT, DUE_TIME, STATUS, PAID_AMT, PAID_TIME, TRAN_NO

    FROM V_PRJ_BONUS

    WHERE P_ID = V_P_ID AND TRAN_NO = V_TRAN_NO AND TRAN_TYPE = V_TRAN_TYPE;

end;
/

REM Create procedure PRJ_BONUS_INSERT
CREATE OR REPLACE procedure PRJ_BONUS_INSERT(

    V_RET        OUT SYS_REFCURSOR,

    V_P_ID       IN INTEGER,

    V_TRAN_NO    IN INTEGER,

    V_TRAN_TYPE  IN INTEGER,

    V_REPAY_AMT  IN NUMBER,

    V_REPAY_DATE IN DATE

    )

IS

    V_PAID_AMT NUMBER;

BEGIN

    INSERT INTO PRJ_BONUS (P_ID, TRAN_NO, TRAN_TYPE, AMT, DUE_TIME, OVERDUEL_AMT)

      VALUES (V_P_ID, V_TRAN_NO, V_TRAN_TYPE, V_REPAY_AMT, V_REPAY_DATE, 0);



    IF SQL%ROWCOUNT = 0 THEN

        RETURN;

    END IF; 

    

    OPEN V_RET FOR

    SELECT P_ID, TRAN_NO, TRAN_TYPE, CAPITAL, UNPAID_AMT, AMT, DUE_TIME, STATUS, PAID_AMT, PAID_TIME, TRAN_NO

    FROM V_PRJ_BONUS

    WHERE P_ID = V_P_ID AND TRAN_NO = V_TRAN_NO AND TRAN_TYPE = V_TRAN_TYPE;

END;
/

REM Create procedure PRJ_BONUS_UPDATE
CREATE OR REPLACE procedure PRJ_BONUS_UPDATE(

    V_RET        OUT SYS_REFCURSOR,

    V_P_ID       IN INTEGER,

    V_TRAN_NO    IN INTEGER,

    V_TRAN_TYPE  IN INTEGER,

    V_REPAY_AMT  IN NUMBER,

    V_REPAY_DATE IN DATE

    )

IS

    V_PAID_AMT NUMBER;

BEGIN

    UPDATE PRJ_BONUS SET AMT = V_REPAY_AMT, DUE_TIME = V_REPAY_DATE, OVERDUEL_AMT = 0

    WHERE P_ID = V_P_ID AND TRAN_NO = V_TRAN_NO AND TRAN_TYPE = V_TRAN_TYPE;



    IF SQL%ROWCOUNT = 0 THEN

        RETURN;

    END IF; 

    

    SELECT COALESCE(PAID_AMT, 0) INTO V_PAID_AMT FROM V_PRJ_BONUS

    WHERE P_ID = V_P_ID AND TRAN_NO = V_TRAN_NO AND TRAN_TYPE = V_TRAN_TYPE;



    UPDATE PRJ_BONUS SET AMT = GREATEST(AMT, V_PAID_AMT)

    WHERE P_ID = V_P_ID AND TRAN_NO = V_TRAN_NO AND TRAN_TYPE = V_TRAN_TYPE;



    OPEN V_RET FOR

    SELECT P_ID, TRAN_NO, TRAN_TYPE, CAPITAL, UNPAID_AMT, AMT, DUE_TIME, STATUS, PAID_AMT, PAID_TIME, TRAN_NO

    FROM V_PRJ_BONUS

    WHERE P_ID = V_P_ID AND TRAN_NO = V_TRAN_NO AND TRAN_TYPE = V_TRAN_TYPE;

END;
/

REM Create procedure PRJ_GUARANTEE_ORG_INSERT
CREATE OR REPLACE PROCEDURE "PRJ_GUARANTEE_ORG_INSERT"(

    V_RET OUT SYS_REFCURSOR,

    V_p_id                   IN NUMBER ,

    v_bgo_id                 IN NUMBER ,

    v_form                   IN VARCHAR2 ,

    v_range                  IN VARCHAR2 ,

    v_limit                  IN VARCHAR2 ,

    v_relation_ship          IN VARCHAR2 ,

    v_last_year_income       IN NUMBER ,

    V_GUARANTEE_RIGHT_MAN    IN VARCHAR2 ,

    v_GUARANTEE_RIGHT_MAN_NO IN VARCHAR2 ,

    v_ORDER_NO               IN NUMBER ,

    v_VISIBLE                IN NUMBER ,

    V_GUARA_HIGH_CREDIT_AMT  IN NUMBER ,

    V_MAIN_CREDIT_AMT        IN NUMBER ,

    V_INTRO                  IN VARCHAR2)

IS

  w_pgo_id NUMBER;

BEGIN

  INSERT

  INTO PRJ_GUARANTEE_ORG

    (

      PGO_ID,

      P_ID,

      BGO_ID,

      NAME,

      FORM,

      RANGE,

      LIMIT,

      RELATIONSHIP,

      REG_YEARS,

      REG_FUNDS,

      INTRO,

      REG_ADDRESS,

      POSTCODE,

      LINKMAN,

      MOBILE,

      RANKING,

      GET_PRIZE,

      ORG_WEB_SITE,

      SHOW_NAME,

      REGISTERED_DATE,

      QUALIFICATION,

      LAST_YEAR_INCOME,

      SHOW_REG_ADDRESS,

      LEGAL_ID_CARD,

      LEGAL_PERSON_NAME,

      LEGAL_PERSON_SHOW_NAME,

      GUARANTEE_RIGHT_MAN,

      GUARANTEE_RIGHT_MAN_NO,

      ORDER_NO,

      VISIBLE,

      SOCIAL_CREDIT_CODE,

      SHOW_SOCIAL_CREDIT_CODE,

      GUARA_HIGH_CREDIT_AMT,

      MAIN_CREDIT_AMT

    )

  SELECT PRJ_GUARANTEE_ID.NEXTVAL,

    v_p_id,

    BGO.BGO_ID,

    BGO.name,

    v_form,

    v_range,

    v_limit,

    v_relation_ship,

    BGO.REG_YEARS,

    BGO.REG_FUNDS,

    V_INTRO,

    BGO.REG_ADDRESS,

    BGO.POSTCODE,

    BGO.LINKMAN,

    BGO.MOBILE,

    BGO.RANKING,

    BGO.GET_PRIZE,

    BGO.ORG_WEB_SITE,

    BGO.show_name ,

    BGO.REGISTERED_DATE,

    BGO.QUALIFICATION,

    v_LAST_YEAR_INCOME,

    BGO.SHOW_REG_ADDRESS,

    BGO.LEGAL_ID_CARD,

    BGO.LEGAL_PERSON_NAME,

    BGO.LEGAL_PERSON_SHOW_NAME,

    v_GUARANTEE_RIGHT_MAN,

    v_GUARANTEE_RIGHT_MAN_NO,

    v_ORDER_NO,

    v_VISIBLE,

    BGO.SOCIAL_CREDIT_CODE,

    BGO.SHOW_SOCIAL_CREDIT_CODE,

    V_GUARA_HIGH_CREDIT_AMT,

    V_MAIN_CREDIT_AMT

  FROM DUAL

  LEFT JOIN BA_GUARANTEE_ORG BGO

  ON 1           = 1

  AND BGO.BGO_ID = v_bgo_id;

  SELECT PRJ_GUARANTEE_ID.CURRVAL INTO w_pgo_id FROM DUAL;

  OPEN V_RET FOR SELECT PGO_ID,

  P_ID,

  BGO_ID,

  NAME,

  FORM,

RANGE,

LIMIT,

RELATIONSHIP,

REG_YEARS,

REG_FUNDS,

INTRO,

REG_ADDRESS,

POSTCODE,

LINKMAN,

MOBILE,

RANKING,

GET_PRIZE,

ORG_WEB_SITE,

SHOW_NAME,

REGISTERED_DATE,

QUALIFICATION,

LAST_YEAR_INCOME,

SHOW_REG_ADDRESS,

LEGAL_ID_CARD,

LEGAL_PERSON_NAME,

LEGAL_PERSON_SHOW_NAME,

GUARANTEE_RIGHT_MAN,

GUARANTEE_RIGHT_MAN_NO,

ORDER_NO,

VISIBLE,

SOCIAL_CREDIT_CODE,

SHOW_SOCIAL_CREDIT_CODE,

GUARA_HIGH_CREDIT_AMT,

MAIN_CREDIT_AMT FROM PRJ_GUARANTEE_ORG WHERE PGO_ID = w_pgo_id;

END PRJ_GUARANTEE_ORG_INSERT;
/

REM Create procedure PRJ_GUARANTEE_PERSON_INSERT
CREATE OR REPLACE PROCEDURE PRJ_GUARANTEE_PERSON_INSERT(

    V_RET OUT SYS_REFCURSOR,

    V_p_id                   IN NUMBER ,

    v_bgp_id                 IN NUMBER ,

    v_form                   IN VARCHAR2 ,

    v_range                  IN VARCHAR2 ,

    v_limit                  IN VARCHAR2 ,

    v_relation_ship          IN VARCHAR2 ,

    v_last_year_income       IN NUMBER ,

    V_GUARANTEE_RIGHT_MAN    IN VARCHAR2 ,

    v_GUARANTEE_RIGHT_MAN_NO IN VARCHAR2 ,

    v_ORDER_NO               IN NUMBER ,

    v_VISIBLE                IN NUMBER ,

    V_GUARA_HIGH_CREDIT_AMT  IN NUMBER ,

    V_MAIN_CREDIT_AMT        IN NUMBER ,

    V_INTRO                  IN VARCHAR2)

IS

  w_pgp_id NUMBER;

BEGIN

  INSERT

  INTO PRJ_GUARANTEE_PERSON

    (

      PGP_ID,

      P_ID,

      BGP_ID,

      NAME,

      FORM,

      RANGE,

      LIMIT,

      RELATIONSHIP,

      INTRO,

      ADDRESS,

      SHOW_ADDRESS,

      POSTCODE,

      SHOW_NAME,

      LAST_YEAR_INCOME,

      GUARANTEE_RIGHT_MAN,

      GUARANTEE_RIGHT_MAN_NO,

      AGE,

      SHOW_AGE,

      GENDER,

      ID_CARD,

      MOBILE,

      ORDER_NO,

      VISIBLE,

      GUARA_HIGH_CREDIT_AMT,

      MAIN_CREDIT_AMT

    )

  SELECT PRJ_GUARANTEE_ID.NEXTVAL,

    v_p_id,

    BGP.BGP_ID,

    BGP.name,

    v_form,

    v_range,

    v_limit,

    v_relation_ship,

    V_INTRO,

    BGP.ADDRESS,

    BGP.SHOW_ADDRESS,

    BGP.POSTCODE,

    BGP.SHOW_NAME ,

    v_LAST_YEAR_INCOME,

    v_GUARANTEE_RIGHT_MAN,

    v_GUARANTEE_RIGHT_MAN_NO,

    BGP.AGE,

    BGP.SHOW_AGE,

    BGP.GENDER,

    BGP.ID_CARD,

    BGP.MOBILE,

    v_ORDER_NO,

    v_VISIBLE,

    V_GUARA_HIGH_CREDIT_AMT,

    V_MAIN_CREDIT_AMT

  FROM DUAL

  LEFT JOIN BA_GUARANTEE_PERSON BGP

  ON 1           = 1

  AND BGP.BGP_ID = v_bgp_id;

  SELECT PRJ_GUARANTEE_ID.CURRVAL INTO w_pgp_id FROM DUAL;

  OPEN V_RET FOR SELECT PGP_ID,

  P_ID,

  BGP_ID,

  NAME,

  FORM,

RANGE,

LIMIT,

RELATIONSHIP,

INTRO,

ADDRESS,

SHOW_ADDRESS,

POSTCODE,

SHOW_NAME,

LAST_YEAR_INCOME,

GUARANTEE_RIGHT_MAN,

GUARANTEE_RIGHT_MAN_NO,

AGE,

SHOW_AGE,

GENDER,

ID_CARD,

MOBILE,

ORDER_NO,

VISIBLE,

GUARA_HIGH_CREDIT_AMT,

MAIN_CREDIT_AMT FROM PRJ_GUARANTEE_PERSON WHERE PGP_ID = w_pgp_id;

END PRJ_GUARANTEE_PERSON_INSERT;
/

REM Create procedure PRJ_LOAN_INSERT_OR_UPDATE
CREATE OR REPLACE PROCEDURE "PRJ_LOAN_INSERT_OR_UPDATE"(

    V_RET OUT SYS_REFCURSOR,

    V_P_ID                 IN NUMBER,

    V_ITEM_NAME            IN VARCHAR2 ,

    V_ITEM_SHOW_NAME       IN VARCHAR2,

    V_IN_TIME              IN TIMESTAMP,

    V_OUT_TIME             IN TIMESTAMP,

    V_AMT                  IN NUMBER,

    V_CREATOR              IN VARCHAR2,

    V_ITEM_NO              IN VARCHAR2,

    V_FINANCING_DAYS       IN NUMBER,

    V_VISIBLE              IN NUMBER,

    V_TYPE                 IN NUMBER,

    V_WATER_MARK           IN VARCHAR2,

    V_FLAGS                IN NUMBER,

    V_RATE                 IN NUMBER,

    V_EXTENSION_RATE       IN NUMBER,

    V_TIME_OUT_RATE        IN NUMBER,

    V_PENALTY_RATION       IN NUMBER,

    V_EXPECTED_BORROW_TIME IN TIMESTAMP,

    V_INVEST_MAX_AMT_RATIO IN NUMBER,

    V_INVEST_MAX_AMT       IN NUMBER,

    V_PER_INVEST_MIN_AMT   IN NUMBER,

    V_BORROW_DAYS          IN NUMBER,

    V_KEY                  IN VARCHAR2,

    V_EXTENSION_DAYS       IN NUMBER,

    V_PER_INVEST_AMT       IN NUMBER,

    V_CONTRACT             IN NUMBER,

    V_PER_INVEST_MAX_AMT   IN NUMBER,

    V_FEE_RATE             IN NUMBER,

    V_COST_FEE             IN NUMBER,

    V_SOLD_FEE             IN NUMBER,

    V_OUT_PROXY            IN VARCHAR2,

    V_IN_PROXY             IN VARCHAR2,

    V_SRC                  IN VARCHAR2,

    V_REMARK               IN VARCHAR2,

    V_FINANCIER            IN VARCHAR2,

    V_DEPOSIT_RATIO        IN NUMBER,

    V_LOAN_PURPOSES        IN VARCHAR2,

    V_CORE_GUARA_NAME      IN VARCHAR2,

    V_PAY_SRC              IN VARCHAR2,

    V_TOTAL_INTEREST       IN NUMBER)

AS

  W_P_ID               NUMBER(10);

  V_INVEST_MAX_AMTS    NUMBER;

  V_FINANCING_END_TIME TIMESTAMP;

  V_REPAY_TIME         TIMESTAMP;

BEGIN

  V_FINANCING_END_TIME  := V_OUT_TIME            +V_FINANCING_DAYS;

  V_REPAY_TIME          := V_EXPECTED_BORROW_TIME+V_BORROW_DAYS;

  IF V_INVEST_MAX_AMT   IS NULL OR V_INVEST_MAX_AMT = 0 THEN

    IF V_FLAGS           = 1 THEN

      V_INVEST_MAX_AMTS := 3000;

    ELSE

      V_INVEST_MAX_AMTS := V_AMT;

    END IF;

  ELSE

    V_INVEST_MAX_AMTS := V_INVEST_MAX_AMT;

  END IF;

  IF V_P_ID = 0 THEN



    SELECT PRJ_ID.NEXTVAL INTO W_P_ID FROM DUAL;

    INSERT

    INTO PRJ_INDEX

      (

        P_ID,

        ITEM_NAME,

        ITEM_SHOW_NAME,

        ITEM_NO,

        IN_TIME,

        OUT_TIME,

        AMT,

        CREATOR,

        CREATE_TIME,

        FINANCING_DAYS,

        VISIBLE,

        TYPE,

        WATER_MARK,

        FLAGS

      )

    SELECT W_P_ID,

      V_ITEM_NAME,

      V_ITEM_SHOW_NAME,

      CONCAT('NO',W_P_ID),

      V_IN_TIME,

      V_OUT_TIME,

      V_AMT,

      V_CREATOR,

      SYSDATE,

      V_FINANCING_DAYS,

      V_VISIBLE,

      V_TYPE,

      V_WATER_MARK,

      V_FLAGS

    FROM DUAL

    WHERE NOT EXISTS

      (SELECT 1 FROM PRJ_INDEX WHERE ITEM_NO = CONCAT('NO',W_P_ID)

      );

    INSERT

    INTO PRJ_LOAN

      (

        P_ID,

        FINANCIER_CU_ID,

        RATE,

        EXTENSION_RATE,

        TIME_OUT_RATE,

        PENALTY_RATION,

        EXPECTED_BORROW_TIME,

        FINANCING_END_TIME,

        CAPITAL_REPAY_TIME,

        INVEST_MAX_AMT,

        STATUS,

        INVESTED_AMT,

        BORROW_DAYS,

        KEY,

        CONTRACT,

        COST_FEE,

        SOLD_FEE,

        OUT_PROXY,

        IN_PROXY,

        SRC,

        REMARK,

        FINANCIER,

        DEPOSIT_RATIO,

        LOAN_PURPOSES,

        CORE_GUARA_NAME,

        PAY_SRC,

        TOTAL_INTEREST

      )

      VALUES

      (

        W_P_ID,

        0,

        V_RATE,

        V_EXTENSION_RATE,

        V_TIME_OUT_RATE,

        V_PENALTY_RATION,

        V_EXPECTED_BORROW_TIME,

        V_FINANCING_END_TIME,

        V_REPAY_TIME,

        V_INVEST_MAX_AMTS,

        0,

        0,

        V_BORROW_DAYS,

        V_KEY,

        V_CONTRACT,

        V_COST_FEE,

        V_SOLD_FEE,

        V_OUT_PROXY,

        V_IN_PROXY,

        V_SRC,

        V_REMARK,

        V_FINANCIER,

        V_DEPOSIT_RATIO,

        V_LOAN_PURPOSES,

        V_CORE_GUARA_NAME,

        V_PAY_SRC,

        V_TOTAL_INTEREST

      );

  ELSE

    W_P_ID := V_P_ID;

    UPDATE PRJ_INDEX

    SET ITEM_NAME    = V_ITEM_NAME,

      ITEM_SHOW_NAME = V_ITEM_SHOW_NAME,

      ITEM_NO        = V_ITEM_NO,

      IN_TIME        = V_IN_TIME,

      OUT_TIME       = V_OUT_TIME,

      AMT            = V_AMT,

      FINANCING_DAYS = V_FINANCING_DAYS,

      VISIBLE        = V_VISIBLE,

      WATER_MARK     = V_WATER_MARK,

      FLAGS          = V_FLAGS

    WHERE P_ID       = V_P_ID

    AND NOT EXISTS

      (SELECT 1

      FROM PRJ_INDEX

      WHERE ITEM_NO = V_ITEM_NO

      AND TYPE     <> 4

      AND P_ID     <> V_P_ID

      );

    UPDATE PRJ_LOAN

    SET RATE               = V_RATE,

      EXTENSION_RATE       = V_EXTENSION_RATE,

      TIME_OUT_RATE        = V_TIME_OUT_RATE,

      PENALTY_RATION       = V_PENALTY_RATION,

      EXPECTED_BORROW_TIME = V_EXPECTED_BORROW_TIME,

      FINANCING_END_TIME   = V_FINANCING_END_TIME,

      CAPITAL_REPAY_TIME   = V_REPAY_TIME,

      INVEST_MAX_AMT_RATIO = V_INVEST_MAX_AMT_RATIO,

      INVEST_MAX_AMT       = V_INVEST_MAX_AMTS,

      PER_INVEST_MIN_AMT   = V_PER_INVEST_MIN_AMT,

      BORROW_DAYS          = V_BORROW_DAYS,

      KEY                  = V_KEY,

      EXTENSION_DAYS       = V_EXTENSION_DAYS,

      PER_INVEST_AMT       = V_PER_INVEST_AMT,

      CONTRACT             = V_CONTRACT,

      PER_INVEST_MAX_AMT   = V_PER_INVEST_MAX_AMT,

      FEE_RATE             = V_FEE_RATE,

      COST_FEE             = V_COST_FEE,

      SOLD_FEE             = V_SOLD_FEE,

      OUT_PROXY            = V_OUT_PROXY,

      IN_PROXY             = V_IN_PROXY,

      SRC                  = V_SRC,

      REMARK               = V_REMARK,

      FINANCIER            = V_FINANCIER,

      DEPOSIT_RATIO        = V_DEPOSIT_RATIO,

      LOAN_PURPOSES        = V_LOAN_PURPOSES,

      CORE_GUARA_NAME      = V_CORE_GUARA_NAME,

      PAY_SRC              = V_PAY_SRC,

      TOTAL_INTEREST       = V_TOTAL_INTEREST

    WHERE P_ID  = V_P_ID;

  END IF;

  OPEN V_RET FOR SELECT PI.P_ID ,

  PI.ITEM_NAME,

  PI.ITEM_SHOW_NAME,

  PI.ITEM_NO,

  PI.IN_TIME,

  PI.OUT_TIME,

  PI.CREATOR,

  PI.CREATE_TIME,

  PI.FINANCING_DAYS,

  PI.VISIBLE,

  PI.TYPE,

  PI.WATER_MARK,

  PI.FLAGS,

  PI.TOP_TIME,

  PI.BOND_AMT,

  PI.AUTO_CREDIT_DATE,

  PI.AUTO_CREDIT_FLAG,

  PI.AMT,

  PI.ALLOW_CREDIT_OUT,

  PL.FINANCIER_CU_ID,

  PL.RATE          /100,

  PL.EXTENSION_RATE/100,

  PL.TIME_OUT_RATE /100,

  PL.PENALTY_RATION,

  PL.EXPECTED_BORROW_TIME,

  PL.FINANCING_END_TIME,

  PL.CAPITAL_REPAY_TIME,

  PL.INVEST_MAX_AMT_RATIO,

  PL.INVEST_MAX_AMT,

  PL.STATUS,

  PL.INVESTED_AMT,

  PL.PER_INVEST_MIN_AMT,

  PL.BORROW_DAYS,

  PL.KEY,

  PL.EXTENSION_DAYS,

  PL.PER_INVEST_AMT,

  PL.CONTRACT,

  PL.BONUS_PERIOD,

  PL.BONUS_DAY,

  PL.PER_INVEST_MAX_AMT,

  PL.FEE_RATE,

  PL.COST_FEE,

  PL.SOLD_FEE,

  PL.OUT_PROXY,

  PL.IN_PROXY,

  PL.NOMINAL_AU_ID,

  PL.BONDSMAN_AU_ID,

  PL.SRC,

  PL.REMARK,

  PL.FINANCIER,

  PL.DEPOSIT_RATIO,

  PL.LOAN_PURPOSES,

  PL.CORE_GUARA_NAME,

  PL.PAY_SRC,

  PL.TOTAL_INTEREST

  FROM PRJ_INDEX PI JOIN PRJ_LOAN PL ON PI.P_ID = PL.P_ID WHERE PI.P_ID = W_P_ID;

END PRJ_LOAN_INSERT_OR_UPDATE;
/

REM Create procedure PRJ_MGR_ORG_INSERT
CREATE OR REPLACE PROCEDURE "PRJ_MGR_ORG_INSERT" (

    V_RET OUT SYS_REFCURSOR,

    V_p_id              IN NUMBER ,

    V_bpmo_id           IN NUMBER ,

    V_loan_purposes     IN VARCHAR2 ,

    V_loan_bal          IN NUMBER ,

    V_other_loan_bal    IN NUMBER ,

    V_loan_intro        IN VARCHAR2 ,

    V_overdue_num       IN NUMBER ,

    V_overdue_amt       IN NUMBER ,

    V_visible           IN NUMBER ,

    V_other_overdue_num IN NUMBER ,

    V_other_overdue_amt IN NUMBER ,

    V_order_no          IN NUMBER,

    v_borrower_guarantor_relative IN NUMBER )

AS

BEGIN

  INSERT

  INTO PRJ_MGR_ORG

    (

      P_ID,

      ORG_NAME,

      LOAN_PURPOSES,

      LOAN_BAL,

      OTHER_LOAN_BAL,

      OVERDUE_NUM,

      OVERDUE_AMT,

      SHOW_ORG_NAME,

      REGISTERED_FUND,

      REGISTERED_SHOW_FUND,

      REGISTERED_DATE,

      LEGAL_ID_CARD,

      LEGAL_PERSON_NAME,

      LEGAL_PERSON_SHOW_NAME,

      MOBILE,

      EMAIL,

      ADDRESS,

      INTRO,

      BPMO_ID,

      LOAN_INTRO,

      SHOW_ADDRESS,

      VISIBLE,

      OTHER_OVERDUE_NUM,

      OTHER_OVERDUE_AMT,

      ORDER_NO,

      LINKMAN_NAME,

      LINKMAN_ID_CARD,

      LINKMAN_FAX,

      LINKMAN_EMAIL,

      LINKMAN_WCHAT,

      LINKMAN_ADDRESS,

      FAX,

      WCHAT,

      LINKMAN_SHOW_ADDRESS,

      LINKMAN_SHOW_NAME,

      LINKMAN_MOBILE,

      SOCIAL_CREDIT_CODE,

      SHOW_SOCIAL_CREDIT_CODE,

      INDUSTRY,

      WORK_ADDRESS,

      SHOW_WORK_ADDRESS,

      SHAREHOLDER_INFO,

      SHOW_SHAREHOLDER_INFO,

      OPERATE_AREA,

      OTHER_INFO,

      LINKMAN_QQ,

      BORROWER_GUARANTOR_RELATIVE,

      BORROWER_AREA,

      QQ,

      LINKMAN_RELATION

    )

  SELECT v_p_id,

    bpmo.org_name,

    v_loan_purposes,

    v_loan_bal,

    v_other_loan_bal,

    v_overdue_num,

    v_overdue_amt,

    bpmo.show_org_name,

    bpmo.registered_fund,

    bpmo.registered_show_fund,

    bpmo.registered_date,

    bpmo.legal_id_card,

    bpmo.legal_person_name,

    bpmo.legal_person_show_name,

    bpmo.mobile,

    bpmo.email,

    bpmo.address,

    bpmo.intro,

    bpmo.bpmo_id,

    v_loan_intro,

    bpmo.show_address,

    V_visible,

    V_other_overdue_num,

    V_other_overdue_amt,

    V_order_no,

    LINKMAN_NAME,

    LINKMAN_ID_CARD,

    LINKMAN_FAX,

    LINKMAN_EMAIL,

    LINKMAN_WCHAT,

    LINKMAN_ADDRESS,

    FAX,

    WCHAT,

    LINKMAN_SHOW_ADDRESS,

    LINKMAN_SHOW_NAME,

    LINKMAN_MOBILE,

    SOCIAL_CREDIT_CODE,

    SHOW_SOCIAL_CREDIT_CODE,

    INDUSTRY,

    WORK_ADDRESS,

    SHOW_WORK_ADDRESS,

    SHAREHOLDER_INFO,

    SHOW_SHAREHOLDER_INFO,

    OPERATE_AREA,

    OTHER_INFO,

    LINKMAN_QQ,

    v_borrower_guarantor_relative,

    BORROWER_AREA,

    QQ,

    LINKMAN_RELATION

  FROM ba_prj_mgr_org bpmo

  WHERE bpmo.bpmo_id = v_bpmo_id;

  OPEN V_RET FOR SELECT P_ID,

  ORG_NAME,

  LOAN_PURPOSES,

  LOAN_BAL,

  OTHER_LOAN_BAL,

  SHOW_ORG_NAME,

  REGISTERED_FUND,

  REGISTERED_SHOW_FUND,

  REGISTERED_DATE,

  LEGAL_ID_CARD,

  LEGAL_PERSON_NAME,

  LEGAL_PERSON_SHOW_NAME,

  MOBILE,

  EMAIL,

  ADDRESS,

  INTRO,

  BPMO_ID,

  LOAN_INTRO,

  SHOW_ADDRESS,

  OVERDUE_NUM,

  OVERDUE_AMT,

  VISIBLE,

  OTHER_OVERDUE_NUM,

  OTHER_OVERDUE_AMT,

  ORDER_NO,

  LINKMAN_NAME,

  LINKMAN_ID_CARD,

  LINKMAN_MOBILE,

  LINKMAN_FAX,

  LINKMAN_EMAIL,

  LINKMAN_WCHAT,

  LINKMAN_ADDRESS,

  FAX,

  WCHAT,

  LINKMAN_SHOW_ADDRESS,

  LINKMAN_SHOW_NAME,

  SOCIAL_CREDIT_CODE,

  SHOW_SOCIAL_CREDIT_CODE,

  INDUSTRY,

  WORK_ADDRESS,

  SHOW_WORK_ADDRESS,

  SHAREHOLDER_INFO,

  SHOW_SHAREHOLDER_INFO,

  OPERATE_AREA,

  OTHER_INFO,

  LINKMAN_QQ,

  BORROWER_GUARANTOR_RELATIVE,

  BORROWER_AREA,

  QQ,

  LINKMAN_RELATION

  FROM PRJ_MGR_ORG WHERE BPMO_ID = V_bpmo_id AND P_ID = v_p_id;

END PRJ_MGR_ORG_INSERT;
/

REM Create procedure PRJ_MGR_PERSON_INSERT
CREATE OR REPLACE PROCEDURE       "PRJ_MGR_PERSON_INSERT" (

    V_RET OUT SYS_REFCURSOR,

    V_P_ID              IN NUMBER,

    V_BPMP_ID           IN NUMBER,

    V_loan_purposes     IN VARCHAR2,

    v_loan_bal          IN NUMBER,

    v_other_loan_bal    IN NUMBER,

    v_loan_intro        IN VARCHAR2,

    v_overdue_num       IN NUMBER,

    v_overdue_amt       IN NUMBER,

    v_visible           IN NUMBER,

    v_other_overdue_num IN NUMBER,

    v_other_overdue_amt IN NUMBER,

    v_order_no          IN NUMBER,

    v_borrower_guarantor_relative IN NUMBER)

AS

BEGIN

  INSERT

  INTO PRJ_MGR_PERSON

    (

      P_ID,

      BPMP_ID,

      NAME,

      SHOW_NAME,

      GENDER,

      SHOW_AGE,

      ID_CARD_ADDRESS_PROV,

      ID_CARD_ADDRESS_CITY,

      WORK_YEARS,

      INTRO,

      AGE,

      ID_CARD,

      MOBILE,

      EMAIL,

      ADDRESS,

      COMPANY,

      POSITION,

      LOAN_PURPOSES,

      LOAN_BAL,

      OTHER_LOAN_BAL,

      LOAN_INTRO,

      OVERDUE_NUM,

      OVERDUE_AMT,

      VISIBLE,

      OTHER_OVERDUE_NUM,

      OTHER_OVERDUE_AMT,

      ORDER_NO ,

      FAX,

      WCHAT,

      LINKMAN_NAME,

      LINKMAN_ID_CARD,

      LINKMAN_MOBILE,

      LINKMAN_FAX,

      LINKMAN_EMAIL,

      LINKMAN_WCHAT,

      LINKMAN_ADDRESS,

      LINKMAN_SHOW_ADDRESS,

      LINKMAN_SHOW_NAME,

      SHOW_ADDRESS,

      INDUSTRY,

      WORK_NATURE,

      OTHER_INFO,

      LINKMAN_QQ,

      BORROWER_GUARANTOR_RELATIVE,

      BORROWER_AREA,

      QQ,

      LINKMAN_RELATION

    )

  SELECT v_p_id,

    BPMP_ID,

    REAL_NAME,

    SHOW_NAME,

    GENDER,

    SHOW_AGE,

    ID_CARD_ADDRESS_PROV,

    ID_CARD_ADDRESS_CITY,

    WORK_YEARS,

    INTRO,

    AGE,

    ID_CARD,

    MOBILE,

    EMAIL,

    ADDRESS,

    COMPANY,

    POSITION,

    v_loan_purposes,

    v_loan_bal,

    v_other_loan_bal,

    v_loan_intro,

    V_overdue_num,

    v_overdue_amt,

    v_visible,

    v_other_overdue_num,

    v_other_overdue_amt,

    v_order_no,

    FAX,

    WCHAT,

    LINKMAN_NAME,

    LINKMAN_ID_CARD,

    LINKMAN_MOBILE,

    LINKMAN_FAX,

    LINKMAN_EMAIL,

    LINKMAN_WCHAT,

    LINKMAN_ADDRESS,

    LINKMAN_SHOW_ADDRESS,

    LINKMAN_SHOW_NAME,

    SHOW_ADDRESS,

    INDUSTRY,

    WORK_NATURE,

    OTHER_INFO,

    LINKMAN_QQ,

    v_borrower_guarantor_relative,

    BORROWER_AREA,

    QQ,

    LINKMAN_RELATION

  FROM BA_PRJ_MGR_PERSON

  WHERE BPMP_ID = v_bpmp_id;

  OPEN V_RET FOR SELECT P_ID,

  BPMP_ID,

  SHOW_NAME,

  SHOW_AGE,

  ID_CARD_ADDRESS_PROV,

  ID_CARD_ADDRESS_CITY,

  WORK_YEARS,

  INTRO,

  NAME,

  AGE,

  ID_CARD,

  MOBILE,

  EMAIL,

  ADDRESS,

  COMPANY,

  POSITION,

  LOAN_PURPOSES,

  LOAN_BAL,

  OTHER_LOAN_BAL,

  LOAN_INTRO,

  OVERDUE_NUM,

  OVERDUE_AMT,

  GENDER,

  VISIBLE,

  OTHER_OVERDUE_NUM,

  OTHER_OVERDUE_AMT,

  ORDER_NO,

  FAX,

  WCHAT,

  LINKMAN_NAME,

  LINKMAN_ID_CARD,

  LINKMAN_MOBILE,

  LINKMAN_FAX,

  LINKMAN_EMAIL,

  LINKMAN_WCHAT,

  LINKMAN_ADDRESS,

  LINKMAN_SHOW_ADDRESS,

  LINKMAN_SHOW_NAME,

  SHOW_ADDRESS,

  INDUSTRY,

  WORK_NATURE,

  OTHER_INFO,

  LINKMAN_QQ,

  BORROWER_GUARANTOR_RELATIVE,

  BORROWER_AREA,

  QQ,

  LINKMAN_RELATION

  FROM PRJ_MGR_PERSON WHERE BPMP_ID = v_bpmp_id AND P_ID = v_p_id;

END PRJ_MGR_PERSON_INSERT;
/

REM Create procedure PRJ_MORTGAGE_INSERT
CREATE OR REPLACE PROCEDURE     PRJ_MORTGAGE_INSERT(

    V_RET 					         OUT	SYS_REFCURSOR,

    V_P_ID                   IN		NUMBER ,

    V_BPM_ID                 IN		NUMBER ,

    V_ORDER_NO               IN		NUMBER ,

    V_VISIBLE                IN		NUMBER ,

    V_GUARA_HIGH_CREDIT_AMT  IN		NUMBER ,

    V_REMARK                IN		NVARCHAR2)

IS

  W_PM_ID NUMBER;

BEGIN

  INSERT

  INTO PRJ_MORTGAGE

    (

        PM_ID,

        P_ID,

        BPM_ID,

        GUARA_HIGH_CREDIT_AMT,

        ORDER_NO,

        VISIBLE,

        M_TYPE,

        CONTENT,

        EVALUATION,

        OWNER_NAME,

        OWNER_SHOW_NAME,

        OWNER_ID_NO,

        LINK_MAN,

        LINK_MOBILE,

        LINK_ADDRESS,

        REMARK

    )

  SELECT 

        PM_ID.NEXTVAL,

        V_P_ID,

        BPM.BPM_ID,

        V_GUARA_HIGH_CREDIT_AMT,

        V_ORDER_NO,

        V_VISIBLE,

        BPM.M_TYPE,

        BPM.CONTENT,

        BPM.EVALUATION,

        BPM.OWNER_NAME,

        BPM.OWNER_SHOW_NAME,

        BPM.OWNER_ID_NO,

        BPM.LINK_MAN,

        BPM.LINK_MOBILE,

        BPM.LINK_ADDRESS,

        BPM.REMARK

   FROM DUAL

   LEFT JOIN BA_PRJ_MORTGAGE BPM ON 1 = 1 AND BPM.BPM_ID = V_BPM_ID;

  

  SELECT PM_ID.CURRVAL INTO W_PM_ID FROM DUAL;

  OPEN V_RET FOR 

	SELECT 

        PM_ID,

        P_ID,

        BPM_ID,

        M_TYPE,

        CONTENT,

        EVALUATION,

        OWNER_NAME,

        OWNER_SHOW_NAME,

        OWNER_ID_NO,

        LINK_MAN,

        LINK_MOBILE,

        LINK_ADDRESS,

        REMARK,

        GUARA_HIGH_CREDIT_AMT,

        ORDER_NO,

        VISIBLE

   FROM PRJ_MORTGAGE WHERE PM_ID = W_PM_ID;

END PRJ_MORTGAGE_INSERT;
/

REM Create procedure PRJ_PROGRESS_SAVE
CREATE OR REPLACE PROCEDURE PRJ_PROGRESS_SAVE 

(

  V_AU_ID IN NUMBER,

  V_APPLICATION_OF_FUND IN VARCHAR2,

  V_FINANCE_STATUS IN VARCHAR2,

  V_REPAY_ABILITY_STATUS IN VARCHAR2, 

  V_OVERDUE_STATUS IN VARCHAR2, 

  V_LAWSUIT_INVOLVED_STATUS IN VARCHAR2, 

  V_PUNISH_STATUS IN VARCHAR2, 

  V_ORTHERS IN VARCHAR2

) AS 

BEGIN

  --删除表中数据

  DELETE PRJ_PROGRESS PP WHERE EXISTS (SELECT 1 FROM PRJ_LOAN WHERE FINANCIER_CU_ID = V_AU_ID AND P_ID = PP.P_ID);

   --插入记录

  INSERT INTO PRJ_PROGRESS(

    P_ID, DATE_POINT, 

    APPLICATION_OF_FUNDS, 

    FINANCE_STATUS, 

    REPAY_ABILITY_STATUS, 

    OVERDUE_STATUS, 

    LAWSUIT_INVOLVED_STATUS, 

    PUNISH_STATUS, 

    OTHERS

  )

  SELECT 

    P_ID, 

    TO_CHAR(SYSDATE, 'yyyy-mm-dd'), 

    V_APPLICATION_OF_FUND, 

    V_FINANCE_STATUS, 

    V_REPAY_ABILITY_STATUS, 

    V_OVERDUE_STATUS, 

    V_LAWSUIT_INVOLVED_STATUS, 

    V_PUNISH_STATUS, 

    V_ORTHERS     

  FROM PRJ_LOAN WHERE FINANCIER_CU_ID = V_AU_ID AND STATUS = 90;

END PRJ_PROGRESS_SAVE;
/

REM Create procedure UPDATE_REPAID_CAPITAL_AMT
CREATE OR REPLACE PROCEDURE UPDATE_REPAID_CAPITAL_AMT 

(

  START_DATE IN DATE 

, END_DATE IN DATE 

) AS 

BEGIN



  UPDATE ACC_USER_DAY_STATISTICS AUDS

  SET AUDS.REPAID_CAPITAL_AMT = (SELECT NVL(V.REPAID_CAPITAL_AMT, 0) FROM V_REPAID_CAPITAL_AMT V WHERE TO_CHAR(V.DATEPOINT, 'YYYYMMDD') = AUDS.DATEPOINT AND V.AU_ID = AUDS.AU_ID)

  WHERE EXISTS(SELECT 1 FROM V_REPAID_CAPITAL_AMT V WHERE V.DATEPOINT >= START_DATE AND V.DATEPOINT <= END_DATE AND V.AU_ID = AUDS.AU_ID AND TO_CHAR(V.DATEPOINT, 'YYYYMMDD') = AUDS.DATEPOINT);

  

END UPDATE_REPAID_CAPITAL_AMT;
/


